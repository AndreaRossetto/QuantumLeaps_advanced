
QuantumLeaps.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ac0  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08004ca0  08004ca0  00005ca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004db8  08004db8  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  08004db8  08004db8  00005db8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004dc0  08004dc0  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004dc0  08004dc0  00005dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004dc4  08004dc4  00005dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004dc8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000484  2000005c  08004e24  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004e0  08004e24  000064e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001359f  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e5b  00000000  00000000  0001962b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f10  00000000  00000000  0001d488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b58  00000000  00000000  0001e398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020310  00000000  00000000  0001eef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000129d3  00000000  00000000  0003f200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c61cd  00000000  00000000  00051bd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00117da0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f34  00000000  00000000  00117de4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0011bd18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000005c 	.word	0x2000005c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08004c88 	.word	0x08004c88

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000060 	.word	0x20000060
 800021c:	08004c88 	.word	0x08004c88

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b96a 	b.w	80005bc <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	460c      	mov	r4, r1
 8000308:	2b00      	cmp	r3, #0
 800030a:	d14e      	bne.n	80003aa <__udivmoddi4+0xaa>
 800030c:	4694      	mov	ip, r2
 800030e:	458c      	cmp	ip, r1
 8000310:	4686      	mov	lr, r0
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	d962      	bls.n	80003de <__udivmoddi4+0xde>
 8000318:	b14a      	cbz	r2, 800032e <__udivmoddi4+0x2e>
 800031a:	f1c2 0320 	rsb	r3, r2, #32
 800031e:	4091      	lsls	r1, r2
 8000320:	fa20 f303 	lsr.w	r3, r0, r3
 8000324:	fa0c fc02 	lsl.w	ip, ip, r2
 8000328:	4319      	orrs	r1, r3
 800032a:	fa00 fe02 	lsl.w	lr, r0, r2
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f f68c 	uxth.w	r6, ip
 8000336:	fbb1 f4f7 	udiv	r4, r1, r7
 800033a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033e:	fb07 1114 	mls	r1, r7, r4, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb04 f106 	mul.w	r1, r4, r6
 800034a:	4299      	cmp	r1, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x64>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f104 30ff 	add.w	r0, r4, #4294967295
 8000356:	f080 8112 	bcs.w	800057e <__udivmoddi4+0x27e>
 800035a:	4299      	cmp	r1, r3
 800035c:	f240 810f 	bls.w	800057e <__udivmoddi4+0x27e>
 8000360:	3c02      	subs	r4, #2
 8000362:	4463      	add	r3, ip
 8000364:	1a59      	subs	r1, r3, r1
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb1 f0f7 	udiv	r0, r1, r7
 800036e:	fb07 1110 	mls	r1, r7, r0, r1
 8000372:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000376:	fb00 f606 	mul.w	r6, r0, r6
 800037a:	429e      	cmp	r6, r3
 800037c:	d90a      	bls.n	8000394 <__udivmoddi4+0x94>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 31ff 	add.w	r1, r0, #4294967295
 8000386:	f080 80fc 	bcs.w	8000582 <__udivmoddi4+0x282>
 800038a:	429e      	cmp	r6, r3
 800038c:	f240 80f9 	bls.w	8000582 <__udivmoddi4+0x282>
 8000390:	4463      	add	r3, ip
 8000392:	3802      	subs	r0, #2
 8000394:	1b9b      	subs	r3, r3, r6
 8000396:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800039a:	2100      	movs	r1, #0
 800039c:	b11d      	cbz	r5, 80003a6 <__udivmoddi4+0xa6>
 800039e:	40d3      	lsrs	r3, r2
 80003a0:	2200      	movs	r2, #0
 80003a2:	e9c5 3200 	strd	r3, r2, [r5]
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d905      	bls.n	80003ba <__udivmoddi4+0xba>
 80003ae:	b10d      	cbz	r5, 80003b4 <__udivmoddi4+0xb4>
 80003b0:	e9c5 0100 	strd	r0, r1, [r5]
 80003b4:	2100      	movs	r1, #0
 80003b6:	4608      	mov	r0, r1
 80003b8:	e7f5      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003ba:	fab3 f183 	clz	r1, r3
 80003be:	2900      	cmp	r1, #0
 80003c0:	d146      	bne.n	8000450 <__udivmoddi4+0x150>
 80003c2:	42a3      	cmp	r3, r4
 80003c4:	d302      	bcc.n	80003cc <__udivmoddi4+0xcc>
 80003c6:	4290      	cmp	r0, r2
 80003c8:	f0c0 80f0 	bcc.w	80005ac <__udivmoddi4+0x2ac>
 80003cc:	1a86      	subs	r6, r0, r2
 80003ce:	eb64 0303 	sbc.w	r3, r4, r3
 80003d2:	2001      	movs	r0, #1
 80003d4:	2d00      	cmp	r5, #0
 80003d6:	d0e6      	beq.n	80003a6 <__udivmoddi4+0xa6>
 80003d8:	e9c5 6300 	strd	r6, r3, [r5]
 80003dc:	e7e3      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003de:	2a00      	cmp	r2, #0
 80003e0:	f040 8090 	bne.w	8000504 <__udivmoddi4+0x204>
 80003e4:	eba1 040c 	sub.w	r4, r1, ip
 80003e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ec:	fa1f f78c 	uxth.w	r7, ip
 80003f0:	2101      	movs	r1, #1
 80003f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fa:	fb08 4416 	mls	r4, r8, r6, r4
 80003fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000402:	fb07 f006 	mul.w	r0, r7, r6
 8000406:	4298      	cmp	r0, r3
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x11c>
 800040a:	eb1c 0303 	adds.w	r3, ip, r3
 800040e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x11a>
 8000414:	4298      	cmp	r0, r3
 8000416:	f200 80cd 	bhi.w	80005b4 <__udivmoddi4+0x2b4>
 800041a:	4626      	mov	r6, r4
 800041c:	1a1c      	subs	r4, r3, r0
 800041e:	fa1f f38e 	uxth.w	r3, lr
 8000422:	fbb4 f0f8 	udiv	r0, r4, r8
 8000426:	fb08 4410 	mls	r4, r8, r0, r4
 800042a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800042e:	fb00 f707 	mul.w	r7, r0, r7
 8000432:	429f      	cmp	r7, r3
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x148>
 8000436:	eb1c 0303 	adds.w	r3, ip, r3
 800043a:	f100 34ff 	add.w	r4, r0, #4294967295
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x146>
 8000440:	429f      	cmp	r7, r3
 8000442:	f200 80b0 	bhi.w	80005a6 <__udivmoddi4+0x2a6>
 8000446:	4620      	mov	r0, r4
 8000448:	1bdb      	subs	r3, r3, r7
 800044a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800044e:	e7a5      	b.n	800039c <__udivmoddi4+0x9c>
 8000450:	f1c1 0620 	rsb	r6, r1, #32
 8000454:	408b      	lsls	r3, r1
 8000456:	fa22 f706 	lsr.w	r7, r2, r6
 800045a:	431f      	orrs	r7, r3
 800045c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000460:	fa04 f301 	lsl.w	r3, r4, r1
 8000464:	ea43 030c 	orr.w	r3, r3, ip
 8000468:	40f4      	lsrs	r4, r6
 800046a:	fa00 f801 	lsl.w	r8, r0, r1
 800046e:	0c38      	lsrs	r0, r7, #16
 8000470:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000474:	fbb4 fef0 	udiv	lr, r4, r0
 8000478:	fa1f fc87 	uxth.w	ip, r7
 800047c:	fb00 441e 	mls	r4, r0, lr, r4
 8000480:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000484:	fb0e f90c 	mul.w	r9, lr, ip
 8000488:	45a1      	cmp	r9, r4
 800048a:	fa02 f201 	lsl.w	r2, r2, r1
 800048e:	d90a      	bls.n	80004a6 <__udivmoddi4+0x1a6>
 8000490:	193c      	adds	r4, r7, r4
 8000492:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000496:	f080 8084 	bcs.w	80005a2 <__udivmoddi4+0x2a2>
 800049a:	45a1      	cmp	r9, r4
 800049c:	f240 8081 	bls.w	80005a2 <__udivmoddi4+0x2a2>
 80004a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004a4:	443c      	add	r4, r7
 80004a6:	eba4 0409 	sub.w	r4, r4, r9
 80004aa:	fa1f f983 	uxth.w	r9, r3
 80004ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80004b2:	fb00 4413 	mls	r4, r0, r3, r4
 80004b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80004be:	45a4      	cmp	ip, r4
 80004c0:	d907      	bls.n	80004d2 <__udivmoddi4+0x1d2>
 80004c2:	193c      	adds	r4, r7, r4
 80004c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004c8:	d267      	bcs.n	800059a <__udivmoddi4+0x29a>
 80004ca:	45a4      	cmp	ip, r4
 80004cc:	d965      	bls.n	800059a <__udivmoddi4+0x29a>
 80004ce:	3b02      	subs	r3, #2
 80004d0:	443c      	add	r4, r7
 80004d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004d6:	fba0 9302 	umull	r9, r3, r0, r2
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	429c      	cmp	r4, r3
 80004e0:	46ce      	mov	lr, r9
 80004e2:	469c      	mov	ip, r3
 80004e4:	d351      	bcc.n	800058a <__udivmoddi4+0x28a>
 80004e6:	d04e      	beq.n	8000586 <__udivmoddi4+0x286>
 80004e8:	b155      	cbz	r5, 8000500 <__udivmoddi4+0x200>
 80004ea:	ebb8 030e 	subs.w	r3, r8, lr
 80004ee:	eb64 040c 	sbc.w	r4, r4, ip
 80004f2:	fa04 f606 	lsl.w	r6, r4, r6
 80004f6:	40cb      	lsrs	r3, r1
 80004f8:	431e      	orrs	r6, r3
 80004fa:	40cc      	lsrs	r4, r1
 80004fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000500:	2100      	movs	r1, #0
 8000502:	e750      	b.n	80003a6 <__udivmoddi4+0xa6>
 8000504:	f1c2 0320 	rsb	r3, r2, #32
 8000508:	fa20 f103 	lsr.w	r1, r0, r3
 800050c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000510:	fa24 f303 	lsr.w	r3, r4, r3
 8000514:	4094      	lsls	r4, r2
 8000516:	430c      	orrs	r4, r1
 8000518:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800051c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000520:	fa1f f78c 	uxth.w	r7, ip
 8000524:	fbb3 f0f8 	udiv	r0, r3, r8
 8000528:	fb08 3110 	mls	r1, r8, r0, r3
 800052c:	0c23      	lsrs	r3, r4, #16
 800052e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000532:	fb00 f107 	mul.w	r1, r0, r7
 8000536:	4299      	cmp	r1, r3
 8000538:	d908      	bls.n	800054c <__udivmoddi4+0x24c>
 800053a:	eb1c 0303 	adds.w	r3, ip, r3
 800053e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000542:	d22c      	bcs.n	800059e <__udivmoddi4+0x29e>
 8000544:	4299      	cmp	r1, r3
 8000546:	d92a      	bls.n	800059e <__udivmoddi4+0x29e>
 8000548:	3802      	subs	r0, #2
 800054a:	4463      	add	r3, ip
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	b2a4      	uxth	r4, r4
 8000550:	fbb3 f1f8 	udiv	r1, r3, r8
 8000554:	fb08 3311 	mls	r3, r8, r1, r3
 8000558:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800055c:	fb01 f307 	mul.w	r3, r1, r7
 8000560:	42a3      	cmp	r3, r4
 8000562:	d908      	bls.n	8000576 <__udivmoddi4+0x276>
 8000564:	eb1c 0404 	adds.w	r4, ip, r4
 8000568:	f101 36ff 	add.w	r6, r1, #4294967295
 800056c:	d213      	bcs.n	8000596 <__udivmoddi4+0x296>
 800056e:	42a3      	cmp	r3, r4
 8000570:	d911      	bls.n	8000596 <__udivmoddi4+0x296>
 8000572:	3902      	subs	r1, #2
 8000574:	4464      	add	r4, ip
 8000576:	1ae4      	subs	r4, r4, r3
 8000578:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800057c:	e739      	b.n	80003f2 <__udivmoddi4+0xf2>
 800057e:	4604      	mov	r4, r0
 8000580:	e6f0      	b.n	8000364 <__udivmoddi4+0x64>
 8000582:	4608      	mov	r0, r1
 8000584:	e706      	b.n	8000394 <__udivmoddi4+0x94>
 8000586:	45c8      	cmp	r8, r9
 8000588:	d2ae      	bcs.n	80004e8 <__udivmoddi4+0x1e8>
 800058a:	ebb9 0e02 	subs.w	lr, r9, r2
 800058e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000592:	3801      	subs	r0, #1
 8000594:	e7a8      	b.n	80004e8 <__udivmoddi4+0x1e8>
 8000596:	4631      	mov	r1, r6
 8000598:	e7ed      	b.n	8000576 <__udivmoddi4+0x276>
 800059a:	4603      	mov	r3, r0
 800059c:	e799      	b.n	80004d2 <__udivmoddi4+0x1d2>
 800059e:	4630      	mov	r0, r6
 80005a0:	e7d4      	b.n	800054c <__udivmoddi4+0x24c>
 80005a2:	46d6      	mov	lr, sl
 80005a4:	e77f      	b.n	80004a6 <__udivmoddi4+0x1a6>
 80005a6:	4463      	add	r3, ip
 80005a8:	3802      	subs	r0, #2
 80005aa:	e74d      	b.n	8000448 <__udivmoddi4+0x148>
 80005ac:	4606      	mov	r6, r0
 80005ae:	4623      	mov	r3, r4
 80005b0:	4608      	mov	r0, r1
 80005b2:	e70f      	b.n	80003d4 <__udivmoddi4+0xd4>
 80005b4:	3e02      	subs	r6, #2
 80005b6:	4463      	add	r3, ip
 80005b8:	e730      	b.n	800041c <__udivmoddi4+0x11c>
 80005ba:	bf00      	nop

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <Blinky_ctor>:
//----------------------------------------------------------------------------
Blinky Blinky_inst;
QActive * const AO_Blinky = &Blinky_inst.super;

//............................................................................
void Blinky_ctor(void) {
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
    Blinky * const me = &Blinky_inst;
 80005c6:	4b09      	ldr	r3, [pc, #36]	@ (80005ec <Blinky_ctor+0x2c>)
 80005c8:	607b      	str	r3, [r7, #4]
    QActive_ctor(&me->super, Q_STATE_CAST(&Blinky_initial));
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	4908      	ldr	r1, [pc, #32]	@ (80005f0 <Blinky_ctor+0x30>)
 80005ce:	4618      	mov	r0, r3
 80005d0:	f003 f98e 	bl	80038f0 <QActive_ctor>

    QTimeEvt_ctorX(&me->timeEvt, &me->super, TIMEOUT_SIG, 0U);
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 80005da:	6879      	ldr	r1, [r7, #4]
 80005dc:	2300      	movs	r3, #0
 80005de:	2207      	movs	r2, #7
 80005e0:	f003 fa6c 	bl	8003abc <QTimeEvt_ctorX>
}
 80005e4:	bf00      	nop
 80005e6:	3708      	adds	r7, #8
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	20000078 	.word	0x20000078
 80005f0:	080005f5 	.word	0x080005f5

080005f4 <Blinky_initial>:

// HSM definition ----------------------------------------------------------
QState Blinky_initial(Blinky * const me, void const * const par) {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
 80005fc:	6039      	str	r1, [r7, #0]
    Q_UNUSED_PAR(par);

    QActive_subscribe(&me->super, TOGGLE_SIG);
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	2105      	movs	r1, #5
 8000602:	4618      	mov	r0, r3
 8000604:	f003 f912 	bl	800382c <QActive_subscribe>

    return Q_TRAN(&Blinky_start);
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	4a03      	ldr	r2, [pc, #12]	@ (8000618 <Blinky_initial+0x24>)
 800060c:	609a      	str	r2, [r3, #8]
 800060e:	2308      	movs	r3, #8
}
 8000610:	4618      	mov	r0, r3
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	0800061d 	.word	0x0800061d

0800061c <Blinky_start>:
//............................................................................



//............................................................................
QState Blinky_start(Blinky * const me, QEvt const * const e) {
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
 8000624:	6039      	str	r1, [r7, #0]
    QState status;
    switch( e->sig ){
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	881b      	ldrh	r3, [r3, #0]
 800062a:	2b05      	cmp	r3, #5
 800062c:	d00b      	beq.n	8000646 <Blinky_start+0x2a>
 800062e:	2b05      	cmp	r3, #5
 8000630:	dc1b      	bgt.n	800066a <Blinky_start+0x4e>
 8000632:	2b01      	cmp	r3, #1
 8000634:	d002      	beq.n	800063c <Blinky_start+0x20>
 8000636:	2b02      	cmp	r3, #2
 8000638:	d014      	beq.n	8000664 <Blinky_start+0x48>
 800063a:	e016      	b.n	800066a <Blinky_start+0x4e>
        case Q_ENTRY_SIG:
        					BSP_blinkyStart();
 800063c:	f000 f9f2 	bl	8000a24 <BSP_blinkyStart>
							status = Q_HANDLED();
 8000640:	2303      	movs	r3, #3
 8000642:	73fb      	strb	r3, [r7, #15]
							break;
 8000644:	e017      	b.n	8000676 <Blinky_start+0x5a>

        case TOGGLE_SIG:
        					BSP_ledOn();
 8000646:	f000 fa25 	bl	8000a94 <BSP_ledOn>
        					// arm the time event to expire in half a second and every half second
							QTimeEvt_armX(&me->timeEvt, BSP_TICKS_PER_SEC / 2U, BSP_TICKS_PER_SEC / 2U);
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	3328      	adds	r3, #40	@ 0x28
 800064e:	2232      	movs	r2, #50	@ 0x32
 8000650:	2132      	movs	r1, #50	@ 0x32
 8000652:	4618      	mov	r0, r3
 8000654:	f003 fa66 	bl	8003b24 <QTimeEvt_armX>
							status = Q_TRAN(&Blinky_on);
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	4a09      	ldr	r2, [pc, #36]	@ (8000680 <Blinky_start+0x64>)
 800065c:	609a      	str	r2, [r3, #8]
 800065e:	2308      	movs	r3, #8
 8000660:	73fb      	strb	r3, [r7, #15]
							break;
 8000662:	e008      	b.n	8000676 <Blinky_start+0x5a>

        case Q_EXIT_SIG:
							status = Q_HANDLED();
 8000664:	2303      	movs	r3, #3
 8000666:	73fb      	strb	r3, [r7, #15]
        					break;
 8000668:	e005      	b.n	8000676 <Blinky_start+0x5a>

        default:
					status = Q_SUPER(&QHsm_top);
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	4a05      	ldr	r2, [pc, #20]	@ (8000684 <Blinky_start+0x68>)
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	2300      	movs	r3, #0
 8000672:	73fb      	strb	r3, [r7, #15]
					break;
 8000674:	bf00      	nop
    }

    return status;
 8000676:	7bfb      	ldrb	r3, [r7, #15]
}
 8000678:	4618      	mov	r0, r3
 800067a:	3710      	adds	r7, #16
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	08000755 	.word	0x08000755
 8000684:	08002f11 	.word	0x08002f11

08000688 <Blinky_stop>:
//............................................................................
QState Blinky_stop(Blinky * const me, QEvt const * const e) {
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
 8000690:	6039      	str	r1, [r7, #0]
    QState status;
    switch (e->sig) {
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	881b      	ldrh	r3, [r3, #0]
 8000696:	2b05      	cmp	r3, #5
 8000698:	d00d      	beq.n	80006b6 <Blinky_stop+0x2e>
 800069a:	2b05      	cmp	r3, #5
 800069c:	dc19      	bgt.n	80006d2 <Blinky_stop+0x4a>
 800069e:	2b01      	cmp	r3, #1
 80006a0:	d002      	beq.n	80006a8 <Blinky_stop+0x20>
 80006a2:	2b02      	cmp	r3, #2
 80006a4:	d00d      	beq.n	80006c2 <Blinky_stop+0x3a>
 80006a6:	e014      	b.n	80006d2 <Blinky_stop+0x4a>
        case Q_ENTRY_SIG:
        					BSP_ledOff();
 80006a8:	f000 f9ff 	bl	8000aaa <BSP_ledOff>
        					BSP_blinkyStop();
 80006ac:	f000 f9d6 	bl	8000a5c <BSP_blinkyStop>
        					status = Q_HANDLED();
 80006b0:	2303      	movs	r3, #3
 80006b2:	73fb      	strb	r3, [r7, #15]
							break;
 80006b4:	e013      	b.n	80006de <Blinky_stop+0x56>

        case TOGGLE_SIG:
							status = Q_TRAN(&Blinky_start); // Transition to Blinky_start state
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	4a0b      	ldr	r2, [pc, #44]	@ (80006e8 <Blinky_stop+0x60>)
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	2308      	movs	r3, #8
 80006be:	73fb      	strb	r3, [r7, #15]
							break;
 80006c0:	e00d      	b.n	80006de <Blinky_stop+0x56>

        case Q_EXIT_SIG:
        					QTimeEvt_disarm(&me->timeEvt);
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	3328      	adds	r3, #40	@ 0x28
 80006c6:	4618      	mov	r0, r3
 80006c8:	f003 fa86 	bl	8003bd8 <QTimeEvt_disarm>
							status = Q_HANDLED();
 80006cc:	2303      	movs	r3, #3
 80006ce:	73fb      	strb	r3, [r7, #15]
        					break;
 80006d0:	e005      	b.n	80006de <Blinky_stop+0x56>

        default:
						status = Q_SUPER(&QHsm_top);
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	4a05      	ldr	r2, [pc, #20]	@ (80006ec <Blinky_stop+0x64>)
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	2300      	movs	r3, #0
 80006da:	73fb      	strb	r3, [r7, #15]
						break;
 80006dc:	bf00      	nop
    }

    return status;
 80006de:	7bfb      	ldrb	r3, [r7, #15]
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	3710      	adds	r7, #16
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	0800061d 	.word	0x0800061d
 80006ec:	08002f11 	.word	0x08002f11

080006f0 <Blinky_off>:
//............................................................................
QState Blinky_off(Blinky * const me, QEvt const * const e) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
 80006f8:	6039      	str	r1, [r7, #0]
    QState status;
    switch (e->sig) {
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	881b      	ldrh	r3, [r3, #0]
 80006fe:	2b07      	cmp	r3, #7
 8000700:	d011      	beq.n	8000726 <Blinky_off+0x36>
 8000702:	2b07      	cmp	r3, #7
 8000704:	dc15      	bgt.n	8000732 <Blinky_off+0x42>
 8000706:	2b01      	cmp	r3, #1
 8000708:	d002      	beq.n	8000710 <Blinky_off+0x20>
 800070a:	2b05      	cmp	r3, #5
 800070c:	d005      	beq.n	800071a <Blinky_off+0x2a>
 800070e:	e010      	b.n	8000732 <Blinky_off+0x42>
        case Q_ENTRY_SIG:
							BSP_ledOff();
 8000710:	f000 f9cb 	bl	8000aaa <BSP_ledOff>
							status = Q_HANDLED();
 8000714:	2303      	movs	r3, #3
 8000716:	73fb      	strb	r3, [r7, #15]
							break;
 8000718:	e011      	b.n	800073e <Blinky_off+0x4e>

        case TOGGLE_SIG:
							status = Q_TRAN(&Blinky_stop);
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	4a0a      	ldr	r2, [pc, #40]	@ (8000748 <Blinky_off+0x58>)
 800071e:	609a      	str	r2, [r3, #8]
 8000720:	2308      	movs	r3, #8
 8000722:	73fb      	strb	r3, [r7, #15]
							break;
 8000724:	e00b      	b.n	800073e <Blinky_off+0x4e>

        case TIMEOUT_SIG:
							status = Q_TRAN(&Blinky_on);
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	4a08      	ldr	r2, [pc, #32]	@ (800074c <Blinky_off+0x5c>)
 800072a:	609a      	str	r2, [r3, #8]
 800072c:	2308      	movs	r3, #8
 800072e:	73fb      	strb	r3, [r7, #15]
							break;
 8000730:	e005      	b.n	800073e <Blinky_off+0x4e>

        default:
					status = Q_SUPER(&QHsm_top);
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	4a06      	ldr	r2, [pc, #24]	@ (8000750 <Blinky_off+0x60>)
 8000736:	609a      	str	r2, [r3, #8]
 8000738:	2300      	movs	r3, #0
 800073a:	73fb      	strb	r3, [r7, #15]
					break;
 800073c:	bf00      	nop

    }
    return status;
 800073e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000740:	4618      	mov	r0, r3
 8000742:	3710      	adds	r7, #16
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	08000689 	.word	0x08000689
 800074c:	08000755 	.word	0x08000755
 8000750:	08002f11 	.word	0x08002f11

08000754 <Blinky_on>:
//............................................................................
QState Blinky_on(Blinky * const me, QEvt const * const e) {
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
 800075c:	6039      	str	r1, [r7, #0]
    QState status;
    switch (e->sig) {
 800075e:	683b      	ldr	r3, [r7, #0]
 8000760:	881b      	ldrh	r3, [r3, #0]
 8000762:	2b07      	cmp	r3, #7
 8000764:	d011      	beq.n	800078a <Blinky_on+0x36>
 8000766:	2b07      	cmp	r3, #7
 8000768:	dc15      	bgt.n	8000796 <Blinky_on+0x42>
 800076a:	2b01      	cmp	r3, #1
 800076c:	d002      	beq.n	8000774 <Blinky_on+0x20>
 800076e:	2b05      	cmp	r3, #5
 8000770:	d005      	beq.n	800077e <Blinky_on+0x2a>
 8000772:	e010      	b.n	8000796 <Blinky_on+0x42>
        case Q_ENTRY_SIG:
							BSP_ledOn();
 8000774:	f000 f98e 	bl	8000a94 <BSP_ledOn>
							status = Q_HANDLED();
 8000778:	2303      	movs	r3, #3
 800077a:	73fb      	strb	r3, [r7, #15]
							break;
 800077c:	e011      	b.n	80007a2 <Blinky_on+0x4e>

        case TOGGLE_SIG:
							status = Q_TRAN(&Blinky_stop);
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	4a0a      	ldr	r2, [pc, #40]	@ (80007ac <Blinky_on+0x58>)
 8000782:	609a      	str	r2, [r3, #8]
 8000784:	2308      	movs	r3, #8
 8000786:	73fb      	strb	r3, [r7, #15]
							break;
 8000788:	e00b      	b.n	80007a2 <Blinky_on+0x4e>

        case TIMEOUT_SIG:
							status = Q_TRAN(&Blinky_off);
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	4a08      	ldr	r2, [pc, #32]	@ (80007b0 <Blinky_on+0x5c>)
 800078e:	609a      	str	r2, [r3, #8]
 8000790:	2308      	movs	r3, #8
 8000792:	73fb      	strb	r3, [r7, #15]
							break;
 8000794:	e005      	b.n	80007a2 <Blinky_on+0x4e>

        default:
					status = Q_SUPER(&QHsm_top);
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	4a06      	ldr	r2, [pc, #24]	@ (80007b4 <Blinky_on+0x60>)
 800079a:	609a      	str	r2, [r3, #8]
 800079c:	2300      	movs	r3, #0
 800079e:	73fb      	strb	r3, [r7, #15]
					break;
 80007a0:	bf00      	nop

    }
    return status;
 80007a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	3710      	adds	r7, #16
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	08000689 	.word	0x08000689
 80007b0:	080006f1 	.word	0x080006f1
 80007b4:	08002f11 	.word	0x08002f11

080007b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b085      	sub	sp, #20
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	f003 0307 	and.w	r3, r3, #7
 80007c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007c8:	4b0c      	ldr	r3, [pc, #48]	@ (80007fc <__NVIC_SetPriorityGrouping+0x44>)
 80007ca:	68db      	ldr	r3, [r3, #12]
 80007cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007ce:	68ba      	ldr	r2, [r7, #8]
 80007d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80007d4:	4013      	ands	r3, r2
 80007d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007dc:	68bb      	ldr	r3, [r7, #8]
 80007de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80007e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007ea:	4a04      	ldr	r2, [pc, #16]	@ (80007fc <__NVIC_SetPriorityGrouping+0x44>)
 80007ec:	68bb      	ldr	r3, [r7, #8]
 80007ee:	60d3      	str	r3, [r2, #12]
}
 80007f0:	bf00      	nop
 80007f2:	3714      	adds	r7, #20
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr
 80007fc:	e000ed00 	.word	0xe000ed00

08000800 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
 8000806:	4603      	mov	r3, r0
 8000808:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800080a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800080e:	2b00      	cmp	r3, #0
 8000810:	db0b      	blt.n	800082a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000812:	79fb      	ldrb	r3, [r7, #7]
 8000814:	f003 021f 	and.w	r2, r3, #31
 8000818:	4907      	ldr	r1, [pc, #28]	@ (8000838 <__NVIC_EnableIRQ+0x38>)
 800081a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800081e:	095b      	lsrs	r3, r3, #5
 8000820:	2001      	movs	r0, #1
 8000822:	fa00 f202 	lsl.w	r2, r0, r2
 8000826:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800082a:	bf00      	nop
 800082c:	370c      	adds	r7, #12
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	e000e100 	.word	0xe000e100

0800083c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
 8000842:	4603      	mov	r3, r0
 8000844:	6039      	str	r1, [r7, #0]
 8000846:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000848:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800084c:	2b00      	cmp	r3, #0
 800084e:	db0a      	blt.n	8000866 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	b2da      	uxtb	r2, r3
 8000854:	490c      	ldr	r1, [pc, #48]	@ (8000888 <__NVIC_SetPriority+0x4c>)
 8000856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800085a:	0112      	lsls	r2, r2, #4
 800085c:	b2d2      	uxtb	r2, r2
 800085e:	440b      	add	r3, r1
 8000860:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000864:	e00a      	b.n	800087c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	b2da      	uxtb	r2, r3
 800086a:	4908      	ldr	r1, [pc, #32]	@ (800088c <__NVIC_SetPriority+0x50>)
 800086c:	79fb      	ldrb	r3, [r7, #7]
 800086e:	f003 030f 	and.w	r3, r3, #15
 8000872:	3b04      	subs	r3, #4
 8000874:	0112      	lsls	r2, r2, #4
 8000876:	b2d2      	uxtb	r2, r2
 8000878:	440b      	add	r3, r1
 800087a:	761a      	strb	r2, [r3, #24]
}
 800087c:	bf00      	nop
 800087e:	370c      	adds	r7, #12
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr
 8000888:	e000e100 	.word	0xe000e100
 800088c:	e000ed00 	.word	0xe000ed00

08000890 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	3b01      	subs	r3, #1
 800089c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80008a0:	d301      	bcc.n	80008a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008a2:	2301      	movs	r3, #1
 80008a4:	e00f      	b.n	80008c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008a6:	4a0a      	ldr	r2, [pc, #40]	@ (80008d0 <SysTick_Config+0x40>)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	3b01      	subs	r3, #1
 80008ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008ae:	210f      	movs	r1, #15
 80008b0:	f04f 30ff 	mov.w	r0, #4294967295
 80008b4:	f7ff ffc2 	bl	800083c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008b8:	4b05      	ldr	r3, [pc, #20]	@ (80008d0 <SysTick_Config+0x40>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008be:	4b04      	ldr	r3, [pc, #16]	@ (80008d0 <SysTick_Config+0x40>)
 80008c0:	2207      	movs	r2, #7
 80008c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008c4:	2300      	movs	r3, #0
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	e000e010 	.word	0xe000e010

080008d4 <Q_onError>:
UART_HandleTypeDef lpuart;

//============================================================================
// Error handler and ISRs...

Q_NORETURN Q_onError(char const *module, int_t const id) {
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b0b4      	sub	sp, #208	@ 0xd0
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
 80008dc:	6039      	str	r1, [r7, #0]
    Q_UNUSED_PAR(id);
    QS_ASSERTION(module, id, (uint32_t)10000U);

#ifndef NDEBUG
    // light up the user LED
	GPIOA->BSRR = (1U << LD4_PIN);  // turn LED on
 80008de:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80008e2:	2220      	movs	r2, #32
 80008e4:	619a      	str	r2, [r3, #24]
	  char msg[200];
	  sprintf(msg, "QonError\r\n");
 80008e6:	f107 0308 	add.w	r3, r7, #8
 80008ea:	490a      	ldr	r1, [pc, #40]	@ (8000914 <Q_onError+0x40>)
 80008ec:	4618      	mov	r0, r3
 80008ee:	f003 fd33 	bl	8004358 <siprintf>
	  HAL_UART_Transmit(&lpuart, (uint8_t *)msg, strlen(msg), 2000);
 80008f2:	f107 0308 	add.w	r3, r7, #8
 80008f6:	4618      	mov	r0, r3
 80008f8:	f7ff fc92 	bl	8000220 <strlen>
 80008fc:	4603      	mov	r3, r0
 80008fe:	b29a      	uxth	r2, r3
 8000900:	f107 0108 	add.w	r1, r7, #8
 8000904:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000908:	4803      	ldr	r0, [pc, #12]	@ (8000918 <Q_onError+0x44>)
 800090a:	f001 f879 	bl	8001a00 <HAL_UART_Transmit>

    // for debugging, hang on in an endless loop...
    for (;;) {
 800090e:	bf00      	nop
 8000910:	e7fd      	b.n	800090e <Q_onError+0x3a>
 8000912:	bf00      	nop
 8000914:	08004ca0 	.word	0x08004ca0
 8000918:	200000b4 	.word	0x200000b4

0800091c <HAL_GPIO_EXTI_Callback>:
#endif

    NVIC_SystemReset();
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	4603      	mov	r3, r0
 8000924:	80fb      	strh	r3, [r7, #6]
	QK_ISR_ENTRY();   // inform QK about entering an ISR

	if( GPIO_Pin == GPIO_PIN_13 )
 8000926:	88fb      	ldrh	r3, [r7, #6]
 8000928:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800092c:	d101      	bne.n	8000932 <HAL_GPIO_EXTI_Callback+0x16>
		BSP_BtnEvt();
 800092e:	f000 f86d 	bl	8000a0c <BSP_BtnEvt>

	QK_ISR_EXIT();    // inform QK about exiting an ISR
 8000932:	f001 fef1 	bl	8002718 <QF_int_disable_>
 8000936:	f003 fb01 	bl	8003f3c <QK_sched_>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d003      	beq.n	8000948 <HAL_GPIO_EXTI_Callback+0x2c>
 8000940:	4b05      	ldr	r3, [pc, #20]	@ (8000958 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000942:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	f001 fef8 	bl	800273c <QF_int_enable_>
 800094c:	f3bf 8f4f 	dsb	sy
}
 8000950:	bf00      	nop
 8000952:	3708      	adds	r7, #8
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	e000ed04 	.word	0xe000ed04

0800095c <SysTick_Handler>:
    Q_onError(module, id);
}

//............................................................................
void SysTick_Handler(void); // prototype
void SysTick_Handler(void) {
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
    QK_ISR_ENTRY();   // inform QK about entering an ISR

    QTIMEEVT_TICK_X(0U, &l_SysTick_Handler); // time events at rate 0
 8000960:	2100      	movs	r1, #0
 8000962:	2000      	movs	r0, #0
 8000964:	f003 f962 	bl	8003c2c <QTimeEvt_tick_>

    QK_ISR_EXIT();    // inform QK about exiting an ISR
 8000968:	f001 fed6 	bl	8002718 <QF_int_disable_>
 800096c:	f003 fae6 	bl	8003f3c <QK_sched_>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d003      	beq.n	800097e <SysTick_Handler+0x22>
 8000976:	4b05      	ldr	r3, [pc, #20]	@ (800098c <SysTick_Handler+0x30>)
 8000978:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800097c:	601a      	str	r2, [r3, #0]
 800097e:	f001 fedd 	bl	800273c <QF_int_enable_>
 8000982:	f3bf 8f4f 	dsb	sy
}
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	e000ed04 	.word	0xe000ed04

08000990 <BSP_init>:

//============================================================================
// BSP functions...

void BSP_init(UART_HandleTypeDef _hlpuart1) {
 8000990:	b084      	sub	sp, #16
 8000992:	b580      	push	{r7, lr}
 8000994:	af00      	add	r7, sp, #0
 8000996:	f107 0c08 	add.w	ip, r7, #8
 800099a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	lpuart = _hlpuart1;
 800099e:	4b07      	ldr	r3, [pc, #28]	@ (80009bc <BSP_init+0x2c>)
 80009a0:	4618      	mov	r0, r3
 80009a2:	f107 0308 	add.w	r3, r7, #8
 80009a6:	2294      	movs	r2, #148	@ 0x94
 80009a8:	4619      	mov	r1, r3
 80009aa:	f003 fd21 	bl	80043f0 <memcpy>
}
 80009ae:	bf00      	nop
 80009b0:	46bd      	mov	sp, r7
 80009b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80009b6:	b004      	add	sp, #16
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	200000b4 	.word	0x200000b4

080009c0 <BSP_start>:
//............................................................................
void BSP_start(void) {
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b084      	sub	sp, #16
 80009c4:	af04      	add	r7, sp, #16
    // initialize event pools
    static QF_MPOOL_EL(QEvt) smlPoolSto[10];
    QF_poolInit(smlPoolSto, sizeof(smlPoolSto), sizeof(smlPoolSto[0]));
 80009c6:	2208      	movs	r2, #8
 80009c8:	2150      	movs	r1, #80	@ 0x50
 80009ca:	480c      	ldr	r0, [pc, #48]	@ (80009fc <BSP_start+0x3c>)
 80009cc:	f002 fc52 	bl	8003274 <QF_poolInit>

    // initialize publish-subscribe
    static QSubscrList subscrSto[MAX_PUB_SIG];
    QActive_psInit(subscrSto, Q_DIM(subscrSto));
 80009d0:	2106      	movs	r1, #6
 80009d2:	480b      	ldr	r0, [pc, #44]	@ (8000a00 <BSP_start+0x40>)
 80009d4:	f002 fe36 	bl	8003644 <QActive_psInit>

    // instantiate and start AOs/threads...

    static QEvt const *blinkyQueueSto[10];
    Blinky_ctor();
 80009d8:	f7ff fdf2 	bl	80005c0 <Blinky_ctor>
    QACTIVE_START(AO_Blinky,
 80009dc:	4b09      	ldr	r3, [pc, #36]	@ (8000a04 <BSP_start+0x44>)
 80009de:	6818      	ldr	r0, [r3, #0]
 80009e0:	2300      	movs	r3, #0
 80009e2:	9302      	str	r3, [sp, #8]
 80009e4:	2300      	movs	r3, #0
 80009e6:	9301      	str	r3, [sp, #4]
 80009e8:	2300      	movs	r3, #0
 80009ea:	9300      	str	r3, [sp, #0]
 80009ec:	230a      	movs	r3, #10
 80009ee:	4a06      	ldr	r2, [pc, #24]	@ (8000a08 <BSP_start+0x48>)
 80009f0:	2101      	movs	r1, #1
 80009f2:	f003 fc69 	bl	80042c8 <QActive_start_>
        blinkyQueueSto,               	// event queue storage
        Q_DIM(blinkyQueueSto),       	// queue length [events]
        (void *)0, 0U,               	// no stack storage
        (void *)0);             	// no initialization param

}
 80009f6:	bf00      	nop
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	20000148 	.word	0x20000148
 8000a00:	20000198 	.word	0x20000198
 8000a04:	08004ce0 	.word	0x08004ce0
 8000a08:	200001c8 	.word	0x200001c8

08000a0c <BSP_BtnEvt>:
//............................................................................
void BSP_BtnEvt(void){
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
	static QEvt const btnEvt = QEVT_INITIALIZER(TOGGLE_SIG);

	QF_PUBLISH(&btnEvt, 0);
 8000a10:	2200      	movs	r2, #0
 8000a12:	2100      	movs	r1, #0
 8000a14:	4802      	ldr	r0, [pc, #8]	@ (8000a20 <BSP_BtnEvt+0x14>)
 8000a16:	f002 fe47 	bl	80036a8 <QActive_publish_>
}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	08004ce4 	.word	0x08004ce4

08000a24 <BSP_blinkyStart>:
//............................................................................
//............................................................................

void BSP_blinkyStart(void){
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b0b2      	sub	sp, #200	@ 0xc8
 8000a28:	af00      	add	r7, sp, #0
	char msg[200];
	sprintf(msg, "Start\r\n");
 8000a2a:	463b      	mov	r3, r7
 8000a2c:	4909      	ldr	r1, [pc, #36]	@ (8000a54 <BSP_blinkyStart+0x30>)
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f003 fc92 	bl	8004358 <siprintf>
	HAL_UART_Transmit(&lpuart, (uint8_t *)msg, strlen(msg), 2000);
 8000a34:	463b      	mov	r3, r7
 8000a36:	4618      	mov	r0, r3
 8000a38:	f7ff fbf2 	bl	8000220 <strlen>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	b29a      	uxth	r2, r3
 8000a40:	4639      	mov	r1, r7
 8000a42:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000a46:	4804      	ldr	r0, [pc, #16]	@ (8000a58 <BSP_blinkyStart+0x34>)
 8000a48:	f000 ffda 	bl	8001a00 <HAL_UART_Transmit>
}
 8000a4c:	bf00      	nop
 8000a4e:	37c8      	adds	r7, #200	@ 0xc8
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	08004cac 	.word	0x08004cac
 8000a58:	200000b4 	.word	0x200000b4

08000a5c <BSP_blinkyStop>:
//............................................................................
void BSP_blinkyStop(void){
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b0b2      	sub	sp, #200	@ 0xc8
 8000a60:	af00      	add	r7, sp, #0
	char msg[200];
	sprintf(msg, "Stop\r\n");
 8000a62:	463b      	mov	r3, r7
 8000a64:	4909      	ldr	r1, [pc, #36]	@ (8000a8c <BSP_blinkyStop+0x30>)
 8000a66:	4618      	mov	r0, r3
 8000a68:	f003 fc76 	bl	8004358 <siprintf>
	HAL_UART_Transmit(&lpuart, (uint8_t *)msg, strlen(msg), 2000);
 8000a6c:	463b      	mov	r3, r7
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f7ff fbd6 	bl	8000220 <strlen>
 8000a74:	4603      	mov	r3, r0
 8000a76:	b29a      	uxth	r2, r3
 8000a78:	4639      	mov	r1, r7
 8000a7a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000a7e:	4804      	ldr	r0, [pc, #16]	@ (8000a90 <BSP_blinkyStop+0x34>)
 8000a80:	f000 ffbe 	bl	8001a00 <HAL_UART_Transmit>
}
 8000a84:	bf00      	nop
 8000a86:	37c8      	adds	r7, #200	@ 0xc8
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	08004cb4 	.word	0x08004cb4
 8000a90:	200000b4 	.word	0x200000b4

08000a94 <BSP_ledOn>:
//............................................................................
void BSP_ledOn(void) {
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
    GPIOA->BSRR = (1U << LD4_PIN);  // turn LED on
 8000a98:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000a9c:	2220      	movs	r2, #32
 8000a9e:	619a      	str	r2, [r3, #24]
}
 8000aa0:	bf00      	nop
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr

08000aaa <BSP_ledOff>:
//............................................................................
void BSP_ledOff(void) {
 8000aaa:	b480      	push	{r7}
 8000aac:	af00      	add	r7, sp, #0
    GPIOA->BSRR = (1U << (LD4_PIN + 16U));  // turn LED off
 8000aae:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000ab2:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000ab6:	619a      	str	r2, [r3, #24]
}
 8000ab8:	bf00      	nop
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
	...

08000ac4 <QF_onStartup>:
    Q_UNUSED_PAR(result);
}

//============================================================================
// QF callbacks...
void QF_onStartup(void) {
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
    // set up the SysTick timer to fire at BSP_TICKS_PER_SEC rate
    SysTick_Config(SystemCoreClock / BSP_TICKS_PER_SEC);
 8000ac8:	4b0e      	ldr	r3, [pc, #56]	@ (8000b04 <QF_onStartup+0x40>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a0e      	ldr	r2, [pc, #56]	@ (8000b08 <QF_onStartup+0x44>)
 8000ace:	fba2 2303 	umull	r2, r3, r2, r3
 8000ad2:	095b      	lsrs	r3, r3, #5
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f7ff fedb 	bl	8000890 <SysTick_Config>

    // assign all priority bits for preemption-prio. and none to sub-prio.
    NVIC_SetPriorityGrouping(0U);
 8000ada:	2000      	movs	r0, #0
 8000adc:	f7ff fe6c 	bl	80007b8 <__NVIC_SetPriorityGrouping>

    // set priorities of ALL ISRs used in the system, see NOTE1
    NVIC_SetPriority(USART2_IRQn,    0); // kernel UNAWARE interrupt
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	2026      	movs	r0, #38	@ 0x26
 8000ae4:	f7ff feaa 	bl	800083c <__NVIC_SetPriority>
    //NVIC_SetPriority(EXTI0_1_IRQn,   QF_AWARE_ISR_CMSIS_PRI + 0U);
    NVIC_SetPriority(SysTick_IRQn,   QF_AWARE_ISR_CMSIS_PRI + 1U);
 8000ae8:	2104      	movs	r1, #4
 8000aea:	f04f 30ff 	mov.w	r0, #4294967295
 8000aee:	f7ff fea5 	bl	800083c <__NVIC_SetPriority>
    // ...
    NVIC_SetPriority(EXTI15_10_IRQn, QF_AWARE_ISR_CMSIS_PRI + 1U);
 8000af2:	2104      	movs	r1, #4
 8000af4:	2028      	movs	r0, #40	@ 0x28
 8000af6:	f7ff fea1 	bl	800083c <__NVIC_SetPriority>

    // enable IRQs...
    NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000afa:	2028      	movs	r0, #40	@ 0x28
 8000afc:	f7ff fe80 	bl	8000800 <__NVIC_EnableIRQ>

#ifdef Q_SPY
    NVIC_EnableIRQ(USART2_IRQn); // UART2 interrupt used for QS-RX
#endif
}
 8000b00:	bf00      	nop
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	20000000 	.word	0x20000000
 8000b08:	51eb851f 	.word	0x51eb851f

08000b0c <QK_onIdle>:
//............................................................................
void QF_onCleanup(void) {

}
//............................................................................
void QK_onIdle(void) {
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
    // The trick with BOOT(0) is it gets the part to run the System Loader
    // instead of your broken code. When done disconnect BOOT0, and start over.
    //
    //__WFI(); // Wait-For-Interrupt
#endif
}
 8000b10:	bf00      	nop
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
	...

08000b1c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000b20:	4b05      	ldr	r3, [pc, #20]	@ (8000b38 <LL_RCC_HSI_Enable+0x1c>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a04      	ldr	r2, [pc, #16]	@ (8000b38 <LL_RCC_HSI_Enable+0x1c>)
 8000b26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b2a:	6013      	str	r3, [r2, #0]
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	40021000 	.word	0x40021000

08000b3c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8000b40:	4b07      	ldr	r3, [pc, #28]	@ (8000b60 <LL_RCC_HSI_IsReady+0x24>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000b48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000b4c:	d101      	bne.n	8000b52 <LL_RCC_HSI_IsReady+0x16>
 8000b4e:	2301      	movs	r3, #1
 8000b50:	e000      	b.n	8000b54 <LL_RCC_HSI_IsReady+0x18>
 8000b52:	2300      	movs	r3, #0
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	40021000 	.word	0x40021000

08000b64 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8000b6c:	4b07      	ldr	r3, [pc, #28]	@ (8000b8c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	061b      	lsls	r3, r3, #24
 8000b78:	4904      	ldr	r1, [pc, #16]	@ (8000b8c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000b7a:	4313      	orrs	r3, r2
 8000b7c:	604b      	str	r3, [r1, #4]
}
 8000b7e:	bf00      	nop
 8000b80:	370c      	adds	r7, #12
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	40021000 	.word	0x40021000

08000b90 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000b98:	4b06      	ldr	r3, [pc, #24]	@ (8000bb4 <LL_RCC_SetSysClkSource+0x24>)
 8000b9a:	689b      	ldr	r3, [r3, #8]
 8000b9c:	f023 0203 	bic.w	r2, r3, #3
 8000ba0:	4904      	ldr	r1, [pc, #16]	@ (8000bb4 <LL_RCC_SetSysClkSource+0x24>)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	608b      	str	r3, [r1, #8]
}
 8000ba8:	bf00      	nop
 8000baa:	370c      	adds	r7, #12
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr
 8000bb4:	40021000 	.word	0x40021000

08000bb8 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000bbc:	4b04      	ldr	r3, [pc, #16]	@ (8000bd0 <LL_RCC_GetSysClkSource+0x18>)
 8000bbe:	689b      	ldr	r3, [r3, #8]
 8000bc0:	f003 030c 	and.w	r3, r3, #12
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	40021000 	.word	0x40021000

08000bd4 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000bdc:	4b06      	ldr	r3, [pc, #24]	@ (8000bf8 <LL_RCC_SetAHBPrescaler+0x24>)
 8000bde:	689b      	ldr	r3, [r3, #8]
 8000be0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000be4:	4904      	ldr	r1, [pc, #16]	@ (8000bf8 <LL_RCC_SetAHBPrescaler+0x24>)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	4313      	orrs	r3, r2
 8000bea:	608b      	str	r3, [r1, #8]
}
 8000bec:	bf00      	nop
 8000bee:	370c      	adds	r7, #12
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr
 8000bf8:	40021000 	.word	0x40021000

08000bfc <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000c04:	4b06      	ldr	r3, [pc, #24]	@ (8000c20 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000c06:	689b      	ldr	r3, [r3, #8]
 8000c08:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8000c0c:	4904      	ldr	r1, [pc, #16]	@ (8000c20 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4313      	orrs	r3, r2
 8000c12:	608b      	str	r3, [r1, #8]
}
 8000c14:	bf00      	nop
 8000c16:	370c      	adds	r7, #12
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr
 8000c20:	40021000 	.word	0x40021000

08000c24 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000c2c:	4b06      	ldr	r3, [pc, #24]	@ (8000c48 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000c2e:	689b      	ldr	r3, [r3, #8]
 8000c30:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8000c34:	4904      	ldr	r1, [pc, #16]	@ (8000c48 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	608b      	str	r3, [r1, #8]
}
 8000c3c:	bf00      	nop
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr
 8000c48:	40021000 	.word	0x40021000

08000c4c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000c50:	4b05      	ldr	r3, [pc, #20]	@ (8000c68 <LL_RCC_PLL_Enable+0x1c>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a04      	ldr	r2, [pc, #16]	@ (8000c68 <LL_RCC_PLL_Enable+0x1c>)
 8000c56:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000c5a:	6013      	str	r3, [r2, #0]
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	40021000 	.word	0x40021000

08000c6c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8000c70:	4b07      	ldr	r3, [pc, #28]	@ (8000c90 <LL_RCC_PLL_IsReady+0x24>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000c78:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8000c7c:	d101      	bne.n	8000c82 <LL_RCC_PLL_IsReady+0x16>
 8000c7e:	2301      	movs	r3, #1
 8000c80:	e000      	b.n	8000c84 <LL_RCC_PLL_IsReady+0x18>
 8000c82:	2300      	movs	r3, #0
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	40021000 	.word	0x40021000

08000c94 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b085      	sub	sp, #20
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	60f8      	str	r0, [r7, #12]
 8000c9c:	60b9      	str	r1, [r7, #8]
 8000c9e:	607a      	str	r2, [r7, #4]
 8000ca0:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 8000ca2:	4b0a      	ldr	r3, [pc, #40]	@ (8000ccc <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000ca4:	68da      	ldr	r2, [r3, #12]
 8000ca6:	4b0a      	ldr	r3, [pc, #40]	@ (8000cd0 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8000ca8:	4013      	ands	r3, r2
 8000caa:	68f9      	ldr	r1, [r7, #12]
 8000cac:	68ba      	ldr	r2, [r7, #8]
 8000cae:	4311      	orrs	r1, r2
 8000cb0:	687a      	ldr	r2, [r7, #4]
 8000cb2:	0212      	lsls	r2, r2, #8
 8000cb4:	4311      	orrs	r1, r2
 8000cb6:	683a      	ldr	r2, [r7, #0]
 8000cb8:	430a      	orrs	r2, r1
 8000cba:	4904      	ldr	r1, [pc, #16]	@ (8000ccc <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 8000cc0:	bf00      	nop
 8000cc2:	3714      	adds	r7, #20
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	40021000 	.word	0x40021000
 8000cd0:	f9ff800c 	.word	0xf9ff800c

08000cd4 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8000cd8:	4b05      	ldr	r3, [pc, #20]	@ (8000cf0 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8000cda:	68db      	ldr	r3, [r3, #12]
 8000cdc:	4a04      	ldr	r2, [pc, #16]	@ (8000cf0 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8000cde:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000ce2:	60d3      	str	r3, [r2, #12]
}
 8000ce4:	bf00      	nop
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	40021000 	.word	0x40021000

08000cf4 <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000cfc:	4b06      	ldr	r3, [pc, #24]	@ (8000d18 <LL_FLASH_SetLatency+0x24>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f023 020f 	bic.w	r2, r3, #15
 8000d04:	4904      	ldr	r1, [pc, #16]	@ (8000d18 <LL_FLASH_SetLatency+0x24>)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	600b      	str	r3, [r1, #0]
}
 8000d0c:	bf00      	nop
 8000d0e:	370c      	adds	r7, #12
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr
 8000d18:	40022000 	.word	0x40022000

08000d1c <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000d20:	4b04      	ldr	r3, [pc, #16]	@ (8000d34 <LL_FLASH_GetLatency+0x18>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f003 030f 	and.w	r3, r3, #15
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	40022000 	.word	0x40022000

08000d38 <LL_PWR_EnableRange1BoostMode>:
  * @brief  Enable main regulator voltage range 1 boost mode
  * @rmtoll CR5          R1MODE        LL_PWR_EnableRange1BoostMode
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableRange1BoostMode(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000d3c:	4b06      	ldr	r3, [pc, #24]	@ (8000d58 <LL_PWR_EnableRange1BoostMode+0x20>)
 8000d3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d42:	4a05      	ldr	r2, [pc, #20]	@ (8000d58 <LL_PWR_EnableRange1BoostMode+0x20>)
 8000d44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000d48:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
}
 8000d4c:	bf00      	nop
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	40007000 	.word	0x40007000

08000d5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d5c:	b590      	push	{r4, r7, lr}
 8000d5e:	b0d5      	sub	sp, #340	@ 0x154
 8000d60:	af22      	add	r7, sp, #136	@ 0x88
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d62:	f000 fa5e 	bl	8001222 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d66:	f000 f831 	bl	8000dcc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d6a:	f000 f8d1 	bl	8000f10 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000d6e:	f000 f885 	bl	8000e7c <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

  char msg[200];
  sprintf(msg, "Blinky example with interrupts\r\n");
 8000d72:	463b      	mov	r3, r7
 8000d74:	4913      	ldr	r1, [pc, #76]	@ (8000dc4 <main+0x68>)
 8000d76:	4618      	mov	r0, r3
 8000d78:	f003 faee 	bl	8004358 <siprintf>
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)msg, strlen(msg), 2000);
 8000d7c:	463b      	mov	r3, r7
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff fa4e 	bl	8000220 <strlen>
 8000d84:	4603      	mov	r3, r0
 8000d86:	b29a      	uxth	r2, r3
 8000d88:	4639      	mov	r1, r7
 8000d8a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000d8e:	480e      	ldr	r0, [pc, #56]	@ (8000dc8 <main+0x6c>)
 8000d90:	f000 fe36 	bl	8001a00 <HAL_UART_Transmit>

  QF_init();       			// Initialize the framework and the underlying RT kernel
 8000d94:	f003 fa2e 	bl	80041f4 <QF_init>
  BSP_init(hlpuart1);      	// Initialize the BSP
 8000d98:	4c0b      	ldr	r4, [pc, #44]	@ (8000dc8 <main+0x6c>)
 8000d9a:	4668      	mov	r0, sp
 8000d9c:	f104 0310 	add.w	r3, r4, #16
 8000da0:	2284      	movs	r2, #132	@ 0x84
 8000da2:	4619      	mov	r1, r3
 8000da4:	f003 fb24 	bl	80043f0 <memcpy>
 8000da8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000dac:	f7ff fdf0 	bl	8000990 <BSP_init>
  BSP_start();     			// Start the AOs/Threads
 8000db0:	f7ff fe06 	bl	80009c0 <BSP_start>

  return QF_run(); 			// run the QF application (endless loop)
 8000db4:	f003 fa6a 	bl	800428c <QF_run>
 8000db8:	4603      	mov	r3, r0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  //}
  /* USER CODE END 3 */
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	37cc      	adds	r7, #204	@ 0xcc
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd90      	pop	{r4, r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	08004cbc 	.word	0x08004cbc
 8000dc8:	200001f0 	.word	0x200001f0

08000dcc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_4);
 8000dd2:	2004      	movs	r0, #4
 8000dd4:	f7ff ff8e 	bl	8000cf4 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_4)
 8000dd8:	bf00      	nop
 8000dda:	f7ff ff9f 	bl	8000d1c <LL_FLASH_GetLatency>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b04      	cmp	r3, #4
 8000de2:	d1fa      	bne.n	8000dda <SystemClock_Config+0xe>
  {
  }
  LL_PWR_EnableRange1BoostMode();
 8000de4:	f7ff ffa8 	bl	8000d38 <LL_PWR_EnableRange1BoostMode>
  LL_RCC_HSI_Enable();
 8000de8:	f7ff fe98 	bl	8000b1c <LL_RCC_HSI_Enable>
   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000dec:	bf00      	nop
 8000dee:	f7ff fea5 	bl	8000b3c <LL_RCC_HSI_IsReady>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b01      	cmp	r3, #1
 8000df6:	d1fa      	bne.n	8000dee <SystemClock_Config+0x22>
  {
  }

  LL_RCC_HSI_SetCalibTrimming(64);
 8000df8:	2040      	movs	r0, #64	@ 0x40
 8000dfa:	f7ff feb3 	bl	8000b64 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_4, 85, LL_RCC_PLLR_DIV_2);
 8000dfe:	2300      	movs	r3, #0
 8000e00:	2255      	movs	r2, #85	@ 0x55
 8000e02:	2130      	movs	r1, #48	@ 0x30
 8000e04:	2002      	movs	r0, #2
 8000e06:	f7ff ff45 	bl	8000c94 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_EnableDomain_SYS();
 8000e0a:	f7ff ff63 	bl	8000cd4 <LL_RCC_PLL_EnableDomain_SYS>
  LL_RCC_PLL_Enable();
 8000e0e:	f7ff ff1d 	bl	8000c4c <LL_RCC_PLL_Enable>
   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000e12:	bf00      	nop
 8000e14:	f7ff ff2a 	bl	8000c6c <LL_RCC_PLL_IsReady>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d1fa      	bne.n	8000e14 <SystemClock_Config+0x48>
  {
  }

  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000e1e:	2003      	movs	r0, #3
 8000e20:	f7ff feb6 	bl	8000b90 <LL_RCC_SetSysClkSource>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_2);
 8000e24:	2080      	movs	r0, #128	@ 0x80
 8000e26:	f7ff fed5 	bl	8000bd4 <LL_RCC_SetAHBPrescaler>
   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000e2a:	bf00      	nop
 8000e2c:	f7ff fec4 	bl	8000bb8 <LL_RCC_GetSysClkSource>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b0c      	cmp	r3, #12
 8000e34:	d1fa      	bne.n	8000e2c <SystemClock_Config+0x60>
  {
  }

  /* Insure 1us transition state at intermediate medium speed clock*/
  for (__IO uint32_t i = (170 >> 1); i !=0; i--);
 8000e36:	2355      	movs	r3, #85	@ 0x55
 8000e38:	607b      	str	r3, [r7, #4]
 8000e3a:	e002      	b.n	8000e42 <SystemClock_Config+0x76>
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	3b01      	subs	r3, #1
 8000e40:	607b      	str	r3, [r7, #4]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d1f9      	bne.n	8000e3c <SystemClock_Config+0x70>

  /* Set AHB prescaler*/
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000e48:	2000      	movs	r0, #0
 8000e4a:	f7ff fec3 	bl	8000bd4 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000e4e:	2000      	movs	r0, #0
 8000e50:	f7ff fed4 	bl	8000bfc <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000e54:	2000      	movs	r0, #0
 8000e56:	f7ff fee5 	bl	8000c24 <LL_RCC_SetAPB2Prescaler>
  LL_SetSystemCoreClock(170000000);
 8000e5a:	4807      	ldr	r0, [pc, #28]	@ (8000e78 <SystemClock_Config+0xac>)
 8000e5c:	f001 fc4c 	bl	80026f8 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8000e60:	2000      	movs	r0, #0
 8000e62:	f000 f9f7 	bl	8001254 <HAL_InitTick>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000e6c:	f000 f8bc 	bl	8000fe8 <Error_Handler>
  }
}
 8000e70:	bf00      	nop
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	0a21fe80 	.word	0x0a21fe80

08000e7c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000e80:	4b21      	ldr	r3, [pc, #132]	@ (8000f08 <MX_LPUART1_UART_Init+0x8c>)
 8000e82:	4a22      	ldr	r2, [pc, #136]	@ (8000f0c <MX_LPUART1_UART_Init+0x90>)
 8000e84:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 921600;
 8000e86:	4b20      	ldr	r3, [pc, #128]	@ (8000f08 <MX_LPUART1_UART_Init+0x8c>)
 8000e88:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8000e8c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e8e:	4b1e      	ldr	r3, [pc, #120]	@ (8000f08 <MX_LPUART1_UART_Init+0x8c>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000e94:	4b1c      	ldr	r3, [pc, #112]	@ (8000f08 <MX_LPUART1_UART_Init+0x8c>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000e9a:	4b1b      	ldr	r3, [pc, #108]	@ (8000f08 <MX_LPUART1_UART_Init+0x8c>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000ea0:	4b19      	ldr	r3, [pc, #100]	@ (8000f08 <MX_LPUART1_UART_Init+0x8c>)
 8000ea2:	220c      	movs	r2, #12
 8000ea4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ea6:	4b18      	ldr	r3, [pc, #96]	@ (8000f08 <MX_LPUART1_UART_Init+0x8c>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000eac:	4b16      	ldr	r3, [pc, #88]	@ (8000f08 <MX_LPUART1_UART_Init+0x8c>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000eb2:	4b15      	ldr	r3, [pc, #84]	@ (8000f08 <MX_LPUART1_UART_Init+0x8c>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000eb8:	4b13      	ldr	r3, [pc, #76]	@ (8000f08 <MX_LPUART1_UART_Init+0x8c>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000ebe:	4812      	ldr	r0, [pc, #72]	@ (8000f08 <MX_LPUART1_UART_Init+0x8c>)
 8000ec0:	f000 fd4e 	bl	8001960 <HAL_UART_Init>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000eca:	f000 f88d 	bl	8000fe8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ece:	2100      	movs	r1, #0
 8000ed0:	480d      	ldr	r0, [pc, #52]	@ (8000f08 <MX_LPUART1_UART_Init+0x8c>)
 8000ed2:	f001 fb47 	bl	8002564 <HAL_UARTEx_SetTxFifoThreshold>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000edc:	f000 f884 	bl	8000fe8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	4809      	ldr	r0, [pc, #36]	@ (8000f08 <MX_LPUART1_UART_Init+0x8c>)
 8000ee4:	f001 fb7c 	bl	80025e0 <HAL_UARTEx_SetRxFifoThreshold>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000eee:	f000 f87b 	bl	8000fe8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000ef2:	4805      	ldr	r0, [pc, #20]	@ (8000f08 <MX_LPUART1_UART_Init+0x8c>)
 8000ef4:	f001 fafd 	bl	80024f2 <HAL_UARTEx_DisableFifoMode>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000efe:	f000 f873 	bl	8000fe8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000f02:	bf00      	nop
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	200001f0 	.word	0x200001f0
 8000f0c:	40008000 	.word	0x40008000

08000f10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b08a      	sub	sp, #40	@ 0x28
 8000f14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f16:	f107 0314 	add.w	r3, r7, #20
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	601a      	str	r2, [r3, #0]
 8000f1e:	605a      	str	r2, [r3, #4]
 8000f20:	609a      	str	r2, [r3, #8]
 8000f22:	60da      	str	r2, [r3, #12]
 8000f24:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f26:	4b2e      	ldr	r3, [pc, #184]	@ (8000fe0 <MX_GPIO_Init+0xd0>)
 8000f28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f2a:	4a2d      	ldr	r2, [pc, #180]	@ (8000fe0 <MX_GPIO_Init+0xd0>)
 8000f2c:	f043 0304 	orr.w	r3, r3, #4
 8000f30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f32:	4b2b      	ldr	r3, [pc, #172]	@ (8000fe0 <MX_GPIO_Init+0xd0>)
 8000f34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f36:	f003 0304 	and.w	r3, r3, #4
 8000f3a:	613b      	str	r3, [r7, #16]
 8000f3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f3e:	4b28      	ldr	r3, [pc, #160]	@ (8000fe0 <MX_GPIO_Init+0xd0>)
 8000f40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f42:	4a27      	ldr	r2, [pc, #156]	@ (8000fe0 <MX_GPIO_Init+0xd0>)
 8000f44:	f043 0320 	orr.w	r3, r3, #32
 8000f48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f4a:	4b25      	ldr	r3, [pc, #148]	@ (8000fe0 <MX_GPIO_Init+0xd0>)
 8000f4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f4e:	f003 0320 	and.w	r3, r3, #32
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f56:	4b22      	ldr	r3, [pc, #136]	@ (8000fe0 <MX_GPIO_Init+0xd0>)
 8000f58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f5a:	4a21      	ldr	r2, [pc, #132]	@ (8000fe0 <MX_GPIO_Init+0xd0>)
 8000f5c:	f043 0301 	orr.w	r3, r3, #1
 8000f60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f62:	4b1f      	ldr	r3, [pc, #124]	@ (8000fe0 <MX_GPIO_Init+0xd0>)
 8000f64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f66:	f003 0301 	and.w	r3, r3, #1
 8000f6a:	60bb      	str	r3, [r7, #8]
 8000f6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6e:	4b1c      	ldr	r3, [pc, #112]	@ (8000fe0 <MX_GPIO_Init+0xd0>)
 8000f70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f72:	4a1b      	ldr	r2, [pc, #108]	@ (8000fe0 <MX_GPIO_Init+0xd0>)
 8000f74:	f043 0302 	orr.w	r3, r3, #2
 8000f78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f7a:	4b19      	ldr	r3, [pc, #100]	@ (8000fe0 <MX_GPIO_Init+0xd0>)
 8000f7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f7e:	f003 0302 	and.w	r3, r3, #2
 8000f82:	607b      	str	r3, [r7, #4]
 8000f84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f86:	2200      	movs	r2, #0
 8000f88:	2120      	movs	r1, #32
 8000f8a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f8e:	f000 fc0d 	bl	80017ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f92:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f98:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fa2:	f107 0314 	add.w	r3, r7, #20
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	480e      	ldr	r0, [pc, #56]	@ (8000fe4 <MX_GPIO_Init+0xd4>)
 8000faa:	f000 fa7d 	bl	80014a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000fae:	2320      	movs	r3, #32
 8000fb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000fbe:	f107 0314 	add.w	r3, r7, #20
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fc8:	f000 fa6e 	bl	80014a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	2100      	movs	r1, #0
 8000fd0:	2028      	movs	r0, #40	@ 0x28
 8000fd2:	f000 fa42 	bl	800145a <HAL_NVIC_SetPriority>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fd6:	bf00      	nop
 8000fd8:	3728      	adds	r7, #40	@ 0x28
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40021000 	.word	0x40021000
 8000fe4:	48000800 	.word	0x48000800

08000fe8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fec:	b672      	cpsid	i
}
 8000fee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ff0:	bf00      	nop
 8000ff2:	e7fd      	b.n	8000ff0 <Error_Handler+0x8>

08000ff4 <LL_RCC_SetLPUARTClockSource>:
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8000ffc:	4b07      	ldr	r3, [pc, #28]	@ (800101c <LL_RCC_SetLPUARTClockSource+0x28>)
 8000ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001002:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8001006:	4905      	ldr	r1, [pc, #20]	@ (800101c <LL_RCC_SetLPUARTClockSource+0x28>)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	4313      	orrs	r3, r2
 800100c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8001010:	bf00      	nop
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	40021000 	.word	0x40021000

08001020 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001026:	4b0f      	ldr	r3, [pc, #60]	@ (8001064 <HAL_MspInit+0x44>)
 8001028:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800102a:	4a0e      	ldr	r2, [pc, #56]	@ (8001064 <HAL_MspInit+0x44>)
 800102c:	f043 0301 	orr.w	r3, r3, #1
 8001030:	6613      	str	r3, [r2, #96]	@ 0x60
 8001032:	4b0c      	ldr	r3, [pc, #48]	@ (8001064 <HAL_MspInit+0x44>)
 8001034:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001036:	f003 0301 	and.w	r3, r3, #1
 800103a:	607b      	str	r3, [r7, #4]
 800103c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800103e:	4b09      	ldr	r3, [pc, #36]	@ (8001064 <HAL_MspInit+0x44>)
 8001040:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001042:	4a08      	ldr	r2, [pc, #32]	@ (8001064 <HAL_MspInit+0x44>)
 8001044:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001048:	6593      	str	r3, [r2, #88]	@ 0x58
 800104a:	4b06      	ldr	r3, [pc, #24]	@ (8001064 <HAL_MspInit+0x44>)
 800104c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800104e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001052:	603b      	str	r3, [r7, #0]
 8001054:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001056:	f000 fbd9 	bl	800180c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800105a:	bf00      	nop
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40021000 	.word	0x40021000

08001068 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b08a      	sub	sp, #40	@ 0x28
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001070:	f107 0314 	add.w	r3, r7, #20
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	605a      	str	r2, [r3, #4]
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	60da      	str	r2, [r3, #12]
 800107e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a19      	ldr	r2, [pc, #100]	@ (80010ec <HAL_UART_MspInit+0x84>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d12b      	bne.n	80010e2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    LL_RCC_SetLPUARTClockSource(LL_RCC_LPUART1_CLKSOURCE_PCLK1);
 800108a:	2000      	movs	r0, #0
 800108c:	f7ff ffb2 	bl	8000ff4 <LL_RCC_SetLPUARTClockSource>

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001090:	4b17      	ldr	r3, [pc, #92]	@ (80010f0 <HAL_UART_MspInit+0x88>)
 8001092:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001094:	4a16      	ldr	r2, [pc, #88]	@ (80010f0 <HAL_UART_MspInit+0x88>)
 8001096:	f043 0301 	orr.w	r3, r3, #1
 800109a:	65d3      	str	r3, [r2, #92]	@ 0x5c
 800109c:	4b14      	ldr	r3, [pc, #80]	@ (80010f0 <HAL_UART_MspInit+0x88>)
 800109e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80010a0:	f003 0301 	and.w	r3, r3, #1
 80010a4:	613b      	str	r3, [r7, #16]
 80010a6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a8:	4b11      	ldr	r3, [pc, #68]	@ (80010f0 <HAL_UART_MspInit+0x88>)
 80010aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ac:	4a10      	ldr	r2, [pc, #64]	@ (80010f0 <HAL_UART_MspInit+0x88>)
 80010ae:	f043 0301 	orr.w	r3, r3, #1
 80010b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010b4:	4b0e      	ldr	r3, [pc, #56]	@ (80010f0 <HAL_UART_MspInit+0x88>)
 80010b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010b8:	f003 0301 	and.w	r3, r3, #1
 80010bc:	60fb      	str	r3, [r7, #12]
 80010be:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80010c0:	230c      	movs	r3, #12
 80010c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c4:	2302      	movs	r3, #2
 80010c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c8:	2300      	movs	r3, #0
 80010ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010cc:	2300      	movs	r3, #0
 80010ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80010d0:	230c      	movs	r3, #12
 80010d2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d4:	f107 0314 	add.w	r3, r7, #20
 80010d8:	4619      	mov	r1, r3
 80010da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010de:	f000 f9e3 	bl	80014a8 <HAL_GPIO_Init>

  /* USER CODE END LPUART1_MspInit 1 */

  }

}
 80010e2:	bf00      	nop
 80010e4:	3728      	adds	r7, #40	@ 0x28
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40008000 	.word	0x40008000
 80010f0:	40021000 	.word	0x40021000

080010f4 <HardFault_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010f8:	bf00      	nop
 80010fa:	e7fd      	b.n	80010f8 <HardFault_Handler+0x4>

080010fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001100:	bf00      	nop
 8001102:	e7fd      	b.n	8001100 <MemManage_Handler+0x4>

08001104 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001108:	bf00      	nop
 800110a:	e7fd      	b.n	8001108 <BusFault_Handler+0x4>

0800110c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001110:	bf00      	nop
 8001112:	e7fd      	b.n	8001110 <UsageFault_Handler+0x4>

08001114 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001118:	bf00      	nop
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr

08001122 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001122:	b480      	push	{r7}
 8001124:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001126:	bf00      	nop
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr

08001130 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001134:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001138:	f000 fb50 	bl	80017dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800113c:	bf00      	nop
 800113e:	bd80      	pop	{r7, pc}

08001140 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b086      	sub	sp, #24
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001148:	4a14      	ldr	r2, [pc, #80]	@ (800119c <_sbrk+0x5c>)
 800114a:	4b15      	ldr	r3, [pc, #84]	@ (80011a0 <_sbrk+0x60>)
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001154:	4b13      	ldr	r3, [pc, #76]	@ (80011a4 <_sbrk+0x64>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d102      	bne.n	8001162 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800115c:	4b11      	ldr	r3, [pc, #68]	@ (80011a4 <_sbrk+0x64>)
 800115e:	4a12      	ldr	r2, [pc, #72]	@ (80011a8 <_sbrk+0x68>)
 8001160:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001162:	4b10      	ldr	r3, [pc, #64]	@ (80011a4 <_sbrk+0x64>)
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4413      	add	r3, r2
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	429a      	cmp	r2, r3
 800116e:	d207      	bcs.n	8001180 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001170:	f003 f912 	bl	8004398 <__errno>
 8001174:	4603      	mov	r3, r0
 8001176:	220c      	movs	r2, #12
 8001178:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800117a:	f04f 33ff 	mov.w	r3, #4294967295
 800117e:	e009      	b.n	8001194 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001180:	4b08      	ldr	r3, [pc, #32]	@ (80011a4 <_sbrk+0x64>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001186:	4b07      	ldr	r3, [pc, #28]	@ (80011a4 <_sbrk+0x64>)
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4413      	add	r3, r2
 800118e:	4a05      	ldr	r2, [pc, #20]	@ (80011a4 <_sbrk+0x64>)
 8001190:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001192:	68fb      	ldr	r3, [r7, #12]
}
 8001194:	4618      	mov	r0, r3
 8001196:	3718      	adds	r7, #24
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	20008000 	.word	0x20008000
 80011a0:	00000400 	.word	0x00000400
 80011a4:	20000284 	.word	0x20000284
 80011a8:	200004e0 	.word	0x200004e0

080011ac <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80011b0:	4b06      	ldr	r3, [pc, #24]	@ (80011cc <SystemInit+0x20>)
 80011b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011b6:	4a05      	ldr	r2, [pc, #20]	@ (80011cc <SystemInit+0x20>)
 80011b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011c0:	bf00      	nop
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	e000ed00 	.word	0xe000ed00

080011d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80011d0:	480d      	ldr	r0, [pc, #52]	@ (8001208 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80011d2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80011d4:	f7ff ffea 	bl	80011ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011d8:	480c      	ldr	r0, [pc, #48]	@ (800120c <LoopForever+0x6>)
  ldr r1, =_edata
 80011da:	490d      	ldr	r1, [pc, #52]	@ (8001210 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001214 <LoopForever+0xe>)
  movs r3, #0
 80011de:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80011e0:	e002      	b.n	80011e8 <LoopCopyDataInit>

080011e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011e6:	3304      	adds	r3, #4

080011e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011ec:	d3f9      	bcc.n	80011e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001218 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011f0:	4c0a      	ldr	r4, [pc, #40]	@ (800121c <LoopForever+0x16>)
  movs r3, #0
 80011f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011f4:	e001      	b.n	80011fa <LoopFillZerobss>

080011f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011f8:	3204      	adds	r2, #4

080011fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011fc:	d3fb      	bcc.n	80011f6 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80011fe:	f003 f8d1 	bl	80043a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001202:	f7ff fdab 	bl	8000d5c <main>

08001206 <LoopForever>:

LoopForever:
    b LoopForever
 8001206:	e7fe      	b.n	8001206 <LoopForever>
  ldr   r0, =_estack
 8001208:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800120c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001210:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001214:	08004dc8 	.word	0x08004dc8
  ldr r2, =_sbss
 8001218:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800121c:	200004e0 	.word	0x200004e0

08001220 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001220:	e7fe      	b.n	8001220 <ADC1_2_IRQHandler>

08001222 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001222:	b580      	push	{r7, lr}
 8001224:	b082      	sub	sp, #8
 8001226:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001228:	2300      	movs	r3, #0
 800122a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800122c:	2003      	movs	r0, #3
 800122e:	f000 f909 	bl	8001444 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001232:	2000      	movs	r0, #0
 8001234:	f000 f80e 	bl	8001254 <HAL_InitTick>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d002      	beq.n	8001244 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	71fb      	strb	r3, [r7, #7]
 8001242:	e001      	b.n	8001248 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001244:	f7ff feec 	bl	8001020 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001248:	79fb      	ldrb	r3, [r7, #7]

}
 800124a:	4618      	mov	r0, r3
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
	...

08001254 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800125c:	2300      	movs	r3, #0
 800125e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001260:	4b16      	ldr	r3, [pc, #88]	@ (80012bc <HAL_InitTick+0x68>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d022      	beq.n	80012ae <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001268:	4b15      	ldr	r3, [pc, #84]	@ (80012c0 <HAL_InitTick+0x6c>)
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	4b13      	ldr	r3, [pc, #76]	@ (80012bc <HAL_InitTick+0x68>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001274:	fbb1 f3f3 	udiv	r3, r1, r3
 8001278:	fbb2 f3f3 	udiv	r3, r2, r3
 800127c:	4618      	mov	r0, r3
 800127e:	f000 f906 	bl	800148e <HAL_SYSTICK_Config>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d10f      	bne.n	80012a8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2b0f      	cmp	r3, #15
 800128c:	d809      	bhi.n	80012a2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800128e:	2200      	movs	r2, #0
 8001290:	6879      	ldr	r1, [r7, #4]
 8001292:	f04f 30ff 	mov.w	r0, #4294967295
 8001296:	f000 f8e0 	bl	800145a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800129a:	4a0a      	ldr	r2, [pc, #40]	@ (80012c4 <HAL_InitTick+0x70>)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6013      	str	r3, [r2, #0]
 80012a0:	e007      	b.n	80012b2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	73fb      	strb	r3, [r7, #15]
 80012a6:	e004      	b.n	80012b2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80012a8:	2301      	movs	r3, #1
 80012aa:	73fb      	strb	r3, [r7, #15]
 80012ac:	e001      	b.n	80012b2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80012b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3710      	adds	r7, #16
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	20000008 	.word	0x20000008
 80012c0:	20000000 	.word	0x20000000
 80012c4:	20000004 	.word	0x20000004

080012c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  return uwTick;
 80012cc:	4b03      	ldr	r3, [pc, #12]	@ (80012dc <HAL_GetTick+0x14>)
 80012ce:	681b      	ldr	r3, [r3, #0]
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	20000288 	.word	0x20000288

080012e0 <__NVIC_SetPriorityGrouping>:
{
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f003 0307 	and.w	r3, r3, #7
 80012ee:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001324 <__NVIC_SetPriorityGrouping+0x44>)
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012f6:	68ba      	ldr	r2, [r7, #8]
 80012f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012fc:	4013      	ands	r3, r2
 80012fe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001308:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800130c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001310:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001312:	4a04      	ldr	r2, [pc, #16]	@ (8001324 <__NVIC_SetPriorityGrouping+0x44>)
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	60d3      	str	r3, [r2, #12]
}
 8001318:	bf00      	nop
 800131a:	3714      	adds	r7, #20
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr
 8001324:	e000ed00 	.word	0xe000ed00

08001328 <__NVIC_GetPriorityGrouping>:
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800132c:	4b04      	ldr	r3, [pc, #16]	@ (8001340 <__NVIC_GetPriorityGrouping+0x18>)
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	0a1b      	lsrs	r3, r3, #8
 8001332:	f003 0307 	and.w	r3, r3, #7
}
 8001336:	4618      	mov	r0, r3
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr
 8001340:	e000ed00 	.word	0xe000ed00

08001344 <__NVIC_SetPriority>:
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	6039      	str	r1, [r7, #0]
 800134e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001354:	2b00      	cmp	r3, #0
 8001356:	db0a      	blt.n	800136e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	b2da      	uxtb	r2, r3
 800135c:	490c      	ldr	r1, [pc, #48]	@ (8001390 <__NVIC_SetPriority+0x4c>)
 800135e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001362:	0112      	lsls	r2, r2, #4
 8001364:	b2d2      	uxtb	r2, r2
 8001366:	440b      	add	r3, r1
 8001368:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800136c:	e00a      	b.n	8001384 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	b2da      	uxtb	r2, r3
 8001372:	4908      	ldr	r1, [pc, #32]	@ (8001394 <__NVIC_SetPriority+0x50>)
 8001374:	79fb      	ldrb	r3, [r7, #7]
 8001376:	f003 030f 	and.w	r3, r3, #15
 800137a:	3b04      	subs	r3, #4
 800137c:	0112      	lsls	r2, r2, #4
 800137e:	b2d2      	uxtb	r2, r2
 8001380:	440b      	add	r3, r1
 8001382:	761a      	strb	r2, [r3, #24]
}
 8001384:	bf00      	nop
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr
 8001390:	e000e100 	.word	0xe000e100
 8001394:	e000ed00 	.word	0xe000ed00

08001398 <NVIC_EncodePriority>:
{
 8001398:	b480      	push	{r7}
 800139a:	b089      	sub	sp, #36	@ 0x24
 800139c:	af00      	add	r7, sp, #0
 800139e:	60f8      	str	r0, [r7, #12]
 80013a0:	60b9      	str	r1, [r7, #8]
 80013a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	f003 0307 	and.w	r3, r3, #7
 80013aa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	f1c3 0307 	rsb	r3, r3, #7
 80013b2:	2b04      	cmp	r3, #4
 80013b4:	bf28      	it	cs
 80013b6:	2304      	movcs	r3, #4
 80013b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	3304      	adds	r3, #4
 80013be:	2b06      	cmp	r3, #6
 80013c0:	d902      	bls.n	80013c8 <NVIC_EncodePriority+0x30>
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	3b03      	subs	r3, #3
 80013c6:	e000      	b.n	80013ca <NVIC_EncodePriority+0x32>
 80013c8:	2300      	movs	r3, #0
 80013ca:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013cc:	f04f 32ff 	mov.w	r2, #4294967295
 80013d0:	69bb      	ldr	r3, [r7, #24]
 80013d2:	fa02 f303 	lsl.w	r3, r2, r3
 80013d6:	43da      	mvns	r2, r3
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	401a      	ands	r2, r3
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013e0:	f04f 31ff 	mov.w	r1, #4294967295
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	fa01 f303 	lsl.w	r3, r1, r3
 80013ea:	43d9      	mvns	r1, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f0:	4313      	orrs	r3, r2
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3724      	adds	r7, #36	@ 0x24
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
	...

08001400 <SysTick_Config>:
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	3b01      	subs	r3, #1
 800140c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001410:	d301      	bcc.n	8001416 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001412:	2301      	movs	r3, #1
 8001414:	e00f      	b.n	8001436 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001416:	4a0a      	ldr	r2, [pc, #40]	@ (8001440 <SysTick_Config+0x40>)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	3b01      	subs	r3, #1
 800141c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800141e:	210f      	movs	r1, #15
 8001420:	f04f 30ff 	mov.w	r0, #4294967295
 8001424:	f7ff ff8e 	bl	8001344 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001428:	4b05      	ldr	r3, [pc, #20]	@ (8001440 <SysTick_Config+0x40>)
 800142a:	2200      	movs	r2, #0
 800142c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800142e:	4b04      	ldr	r3, [pc, #16]	@ (8001440 <SysTick_Config+0x40>)
 8001430:	2207      	movs	r2, #7
 8001432:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001434:	2300      	movs	r3, #0
}
 8001436:	4618      	mov	r0, r3
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	e000e010 	.word	0xe000e010

08001444 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f7ff ff47 	bl	80012e0 <__NVIC_SetPriorityGrouping>
}
 8001452:	bf00      	nop
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}

0800145a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800145a:	b580      	push	{r7, lr}
 800145c:	b086      	sub	sp, #24
 800145e:	af00      	add	r7, sp, #0
 8001460:	4603      	mov	r3, r0
 8001462:	60b9      	str	r1, [r7, #8]
 8001464:	607a      	str	r2, [r7, #4]
 8001466:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001468:	f7ff ff5e 	bl	8001328 <__NVIC_GetPriorityGrouping>
 800146c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	68b9      	ldr	r1, [r7, #8]
 8001472:	6978      	ldr	r0, [r7, #20]
 8001474:	f7ff ff90 	bl	8001398 <NVIC_EncodePriority>
 8001478:	4602      	mov	r2, r0
 800147a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800147e:	4611      	mov	r1, r2
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff ff5f 	bl	8001344 <__NVIC_SetPriority>
}
 8001486:	bf00      	nop
 8001488:	3718      	adds	r7, #24
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}

0800148e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	b082      	sub	sp, #8
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f7ff ffb2 	bl	8001400 <SysTick_Config>
 800149c:	4603      	mov	r3, r0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
	...

080014a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b087      	sub	sp, #28
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80014b2:	2300      	movs	r3, #0
 80014b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80014b6:	e15a      	b.n	800176e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	2101      	movs	r1, #1
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	fa01 f303 	lsl.w	r3, r1, r3
 80014c4:	4013      	ands	r3, r2
 80014c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	f000 814c 	beq.w	8001768 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f003 0303 	and.w	r3, r3, #3
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d005      	beq.n	80014e8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d130      	bne.n	800154a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	2203      	movs	r2, #3
 80014f4:	fa02 f303 	lsl.w	r3, r2, r3
 80014f8:	43db      	mvns	r3, r3
 80014fa:	693a      	ldr	r2, [r7, #16]
 80014fc:	4013      	ands	r3, r2
 80014fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	68da      	ldr	r2, [r3, #12]
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	fa02 f303 	lsl.w	r3, r2, r3
 800150c:	693a      	ldr	r2, [r7, #16]
 800150e:	4313      	orrs	r3, r2
 8001510:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	693a      	ldr	r2, [r7, #16]
 8001516:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800151e:	2201      	movs	r2, #1
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	43db      	mvns	r3, r3
 8001528:	693a      	ldr	r2, [r7, #16]
 800152a:	4013      	ands	r3, r2
 800152c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	091b      	lsrs	r3, r3, #4
 8001534:	f003 0201 	and.w	r2, r3, #1
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	fa02 f303 	lsl.w	r3, r2, r3
 800153e:	693a      	ldr	r2, [r7, #16]
 8001540:	4313      	orrs	r3, r2
 8001542:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f003 0303 	and.w	r3, r3, #3
 8001552:	2b03      	cmp	r3, #3
 8001554:	d017      	beq.n	8001586 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	68db      	ldr	r3, [r3, #12]
 800155a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	2203      	movs	r2, #3
 8001562:	fa02 f303 	lsl.w	r3, r2, r3
 8001566:	43db      	mvns	r3, r3
 8001568:	693a      	ldr	r2, [r7, #16]
 800156a:	4013      	ands	r3, r2
 800156c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	689a      	ldr	r2, [r3, #8]
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	fa02 f303 	lsl.w	r3, r2, r3
 800157a:	693a      	ldr	r2, [r7, #16]
 800157c:	4313      	orrs	r3, r2
 800157e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f003 0303 	and.w	r3, r3, #3
 800158e:	2b02      	cmp	r3, #2
 8001590:	d123      	bne.n	80015da <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	08da      	lsrs	r2, r3, #3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	3208      	adds	r2, #8
 800159a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800159e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	f003 0307 	and.w	r3, r3, #7
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	220f      	movs	r2, #15
 80015aa:	fa02 f303 	lsl.w	r3, r2, r3
 80015ae:	43db      	mvns	r3, r3
 80015b0:	693a      	ldr	r2, [r7, #16]
 80015b2:	4013      	ands	r3, r2
 80015b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	691a      	ldr	r2, [r3, #16]
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	f003 0307 	and.w	r3, r3, #7
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	fa02 f303 	lsl.w	r3, r2, r3
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	08da      	lsrs	r2, r3, #3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	3208      	adds	r2, #8
 80015d4:	6939      	ldr	r1, [r7, #16]
 80015d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	005b      	lsls	r3, r3, #1
 80015e4:	2203      	movs	r2, #3
 80015e6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ea:	43db      	mvns	r3, r3
 80015ec:	693a      	ldr	r2, [r7, #16]
 80015ee:	4013      	ands	r3, r2
 80015f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	f003 0203 	and.w	r2, r3, #3
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001602:	693a      	ldr	r2, [r7, #16]
 8001604:	4313      	orrs	r3, r2
 8001606:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	693a      	ldr	r2, [r7, #16]
 800160c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001616:	2b00      	cmp	r3, #0
 8001618:	f000 80a6 	beq.w	8001768 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800161c:	4b5b      	ldr	r3, [pc, #364]	@ (800178c <HAL_GPIO_Init+0x2e4>)
 800161e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001620:	4a5a      	ldr	r2, [pc, #360]	@ (800178c <HAL_GPIO_Init+0x2e4>)
 8001622:	f043 0301 	orr.w	r3, r3, #1
 8001626:	6613      	str	r3, [r2, #96]	@ 0x60
 8001628:	4b58      	ldr	r3, [pc, #352]	@ (800178c <HAL_GPIO_Init+0x2e4>)
 800162a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800162c:	f003 0301 	and.w	r3, r3, #1
 8001630:	60bb      	str	r3, [r7, #8]
 8001632:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001634:	4a56      	ldr	r2, [pc, #344]	@ (8001790 <HAL_GPIO_Init+0x2e8>)
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	089b      	lsrs	r3, r3, #2
 800163a:	3302      	adds	r3, #2
 800163c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001640:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	f003 0303 	and.w	r3, r3, #3
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	220f      	movs	r2, #15
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	43db      	mvns	r3, r3
 8001652:	693a      	ldr	r2, [r7, #16]
 8001654:	4013      	ands	r3, r2
 8001656:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800165e:	d01f      	beq.n	80016a0 <HAL_GPIO_Init+0x1f8>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	4a4c      	ldr	r2, [pc, #304]	@ (8001794 <HAL_GPIO_Init+0x2ec>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d019      	beq.n	800169c <HAL_GPIO_Init+0x1f4>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	4a4b      	ldr	r2, [pc, #300]	@ (8001798 <HAL_GPIO_Init+0x2f0>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d013      	beq.n	8001698 <HAL_GPIO_Init+0x1f0>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	4a4a      	ldr	r2, [pc, #296]	@ (800179c <HAL_GPIO_Init+0x2f4>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d00d      	beq.n	8001694 <HAL_GPIO_Init+0x1ec>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	4a49      	ldr	r2, [pc, #292]	@ (80017a0 <HAL_GPIO_Init+0x2f8>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d007      	beq.n	8001690 <HAL_GPIO_Init+0x1e8>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	4a48      	ldr	r2, [pc, #288]	@ (80017a4 <HAL_GPIO_Init+0x2fc>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d101      	bne.n	800168c <HAL_GPIO_Init+0x1e4>
 8001688:	2305      	movs	r3, #5
 800168a:	e00a      	b.n	80016a2 <HAL_GPIO_Init+0x1fa>
 800168c:	2306      	movs	r3, #6
 800168e:	e008      	b.n	80016a2 <HAL_GPIO_Init+0x1fa>
 8001690:	2304      	movs	r3, #4
 8001692:	e006      	b.n	80016a2 <HAL_GPIO_Init+0x1fa>
 8001694:	2303      	movs	r3, #3
 8001696:	e004      	b.n	80016a2 <HAL_GPIO_Init+0x1fa>
 8001698:	2302      	movs	r3, #2
 800169a:	e002      	b.n	80016a2 <HAL_GPIO_Init+0x1fa>
 800169c:	2301      	movs	r3, #1
 800169e:	e000      	b.n	80016a2 <HAL_GPIO_Init+0x1fa>
 80016a0:	2300      	movs	r3, #0
 80016a2:	697a      	ldr	r2, [r7, #20]
 80016a4:	f002 0203 	and.w	r2, r2, #3
 80016a8:	0092      	lsls	r2, r2, #2
 80016aa:	4093      	lsls	r3, r2
 80016ac:	693a      	ldr	r2, [r7, #16]
 80016ae:	4313      	orrs	r3, r2
 80016b0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016b2:	4937      	ldr	r1, [pc, #220]	@ (8001790 <HAL_GPIO_Init+0x2e8>)
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	089b      	lsrs	r3, r3, #2
 80016b8:	3302      	adds	r3, #2
 80016ba:	693a      	ldr	r2, [r7, #16]
 80016bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016c0:	4b39      	ldr	r3, [pc, #228]	@ (80017a8 <HAL_GPIO_Init+0x300>)
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	43db      	mvns	r3, r3
 80016ca:	693a      	ldr	r2, [r7, #16]
 80016cc:	4013      	ands	r3, r2
 80016ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d003      	beq.n	80016e4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80016dc:	693a      	ldr	r2, [r7, #16]
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80016e4:	4a30      	ldr	r2, [pc, #192]	@ (80017a8 <HAL_GPIO_Init+0x300>)
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80016ea:	4b2f      	ldr	r3, [pc, #188]	@ (80017a8 <HAL_GPIO_Init+0x300>)
 80016ec:	68db      	ldr	r3, [r3, #12]
 80016ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	43db      	mvns	r3, r3
 80016f4:	693a      	ldr	r2, [r7, #16]
 80016f6:	4013      	ands	r3, r2
 80016f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d003      	beq.n	800170e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001706:	693a      	ldr	r2, [r7, #16]
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	4313      	orrs	r3, r2
 800170c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800170e:	4a26      	ldr	r2, [pc, #152]	@ (80017a8 <HAL_GPIO_Init+0x300>)
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001714:	4b24      	ldr	r3, [pc, #144]	@ (80017a8 <HAL_GPIO_Init+0x300>)
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	43db      	mvns	r3, r3
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	4013      	ands	r3, r2
 8001722:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800172c:	2b00      	cmp	r3, #0
 800172e:	d003      	beq.n	8001738 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001730:	693a      	ldr	r2, [r7, #16]
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	4313      	orrs	r3, r2
 8001736:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001738:	4a1b      	ldr	r2, [pc, #108]	@ (80017a8 <HAL_GPIO_Init+0x300>)
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800173e:	4b1a      	ldr	r3, [pc, #104]	@ (80017a8 <HAL_GPIO_Init+0x300>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	43db      	mvns	r3, r3
 8001748:	693a      	ldr	r2, [r7, #16]
 800174a:	4013      	ands	r3, r2
 800174c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d003      	beq.n	8001762 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800175a:	693a      	ldr	r2, [r7, #16]
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	4313      	orrs	r3, r2
 8001760:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001762:	4a11      	ldr	r2, [pc, #68]	@ (80017a8 <HAL_GPIO_Init+0x300>)
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	3301      	adds	r3, #1
 800176c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	fa22 f303 	lsr.w	r3, r2, r3
 8001778:	2b00      	cmp	r3, #0
 800177a:	f47f ae9d 	bne.w	80014b8 <HAL_GPIO_Init+0x10>
  }
}
 800177e:	bf00      	nop
 8001780:	bf00      	nop
 8001782:	371c      	adds	r7, #28
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr
 800178c:	40021000 	.word	0x40021000
 8001790:	40010000 	.word	0x40010000
 8001794:	48000400 	.word	0x48000400
 8001798:	48000800 	.word	0x48000800
 800179c:	48000c00 	.word	0x48000c00
 80017a0:	48001000 	.word	0x48001000
 80017a4:	48001400 	.word	0x48001400
 80017a8:	40010400 	.word	0x40010400

080017ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	460b      	mov	r3, r1
 80017b6:	807b      	strh	r3, [r7, #2]
 80017b8:	4613      	mov	r3, r2
 80017ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017bc:	787b      	ldrb	r3, [r7, #1]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d003      	beq.n	80017ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017c2:	887a      	ldrh	r2, [r7, #2]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017c8:	e002      	b.n	80017d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017ca:	887a      	ldrh	r2, [r7, #2]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80017d0:	bf00      	nop
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	4603      	mov	r3, r0
 80017e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80017e6:	4b08      	ldr	r3, [pc, #32]	@ (8001808 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017e8:	695a      	ldr	r2, [r3, #20]
 80017ea:	88fb      	ldrh	r3, [r7, #6]
 80017ec:	4013      	ands	r3, r2
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d006      	beq.n	8001800 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80017f2:	4a05      	ldr	r2, [pc, #20]	@ (8001808 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017f4:	88fb      	ldrh	r3, [r7, #6]
 80017f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80017f8:	88fb      	ldrh	r3, [r7, #6]
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7ff f88e 	bl	800091c <HAL_GPIO_EXTI_Callback>
  }
}
 8001800:	bf00      	nop
 8001802:	3708      	adds	r7, #8
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	40010400 	.word	0x40010400

0800180c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001810:	4b05      	ldr	r3, [pc, #20]	@ (8001828 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	4a04      	ldr	r2, [pc, #16]	@ (8001828 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001816:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800181a:	6093      	str	r3, [r2, #8]
}
 800181c:	bf00      	nop
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	40007000 	.word	0x40007000

0800182c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800182c:	b480      	push	{r7}
 800182e:	b087      	sub	sp, #28
 8001830:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001832:	4b2c      	ldr	r3, [pc, #176]	@ (80018e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	f003 030c 	and.w	r3, r3, #12
 800183a:	2b04      	cmp	r3, #4
 800183c:	d102      	bne.n	8001844 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800183e:	4b2a      	ldr	r3, [pc, #168]	@ (80018e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001840:	613b      	str	r3, [r7, #16]
 8001842:	e047      	b.n	80018d4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001844:	4b27      	ldr	r3, [pc, #156]	@ (80018e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	f003 030c 	and.w	r3, r3, #12
 800184c:	2b08      	cmp	r3, #8
 800184e:	d102      	bne.n	8001856 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001850:	4b26      	ldr	r3, [pc, #152]	@ (80018ec <HAL_RCC_GetSysClockFreq+0xc0>)
 8001852:	613b      	str	r3, [r7, #16]
 8001854:	e03e      	b.n	80018d4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001856:	4b23      	ldr	r3, [pc, #140]	@ (80018e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	f003 030c 	and.w	r3, r3, #12
 800185e:	2b0c      	cmp	r3, #12
 8001860:	d136      	bne.n	80018d0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001862:	4b20      	ldr	r3, [pc, #128]	@ (80018e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001864:	68db      	ldr	r3, [r3, #12]
 8001866:	f003 0303 	and.w	r3, r3, #3
 800186a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800186c:	4b1d      	ldr	r3, [pc, #116]	@ (80018e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	091b      	lsrs	r3, r3, #4
 8001872:	f003 030f 	and.w	r3, r3, #15
 8001876:	3301      	adds	r3, #1
 8001878:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2b03      	cmp	r3, #3
 800187e:	d10c      	bne.n	800189a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001880:	4a1a      	ldr	r2, [pc, #104]	@ (80018ec <HAL_RCC_GetSysClockFreq+0xc0>)
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	fbb2 f3f3 	udiv	r3, r2, r3
 8001888:	4a16      	ldr	r2, [pc, #88]	@ (80018e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800188a:	68d2      	ldr	r2, [r2, #12]
 800188c:	0a12      	lsrs	r2, r2, #8
 800188e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001892:	fb02 f303 	mul.w	r3, r2, r3
 8001896:	617b      	str	r3, [r7, #20]
      break;
 8001898:	e00c      	b.n	80018b4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800189a:	4a13      	ldr	r2, [pc, #76]	@ (80018e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	fbb2 f3f3 	udiv	r3, r2, r3
 80018a2:	4a10      	ldr	r2, [pc, #64]	@ (80018e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80018a4:	68d2      	ldr	r2, [r2, #12]
 80018a6:	0a12      	lsrs	r2, r2, #8
 80018a8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80018ac:	fb02 f303 	mul.w	r3, r2, r3
 80018b0:	617b      	str	r3, [r7, #20]
      break;
 80018b2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80018b4:	4b0b      	ldr	r3, [pc, #44]	@ (80018e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	0e5b      	lsrs	r3, r3, #25
 80018ba:	f003 0303 	and.w	r3, r3, #3
 80018be:	3301      	adds	r3, #1
 80018c0:	005b      	lsls	r3, r3, #1
 80018c2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80018c4:	697a      	ldr	r2, [r7, #20]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80018cc:	613b      	str	r3, [r7, #16]
 80018ce:	e001      	b.n	80018d4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80018d0:	2300      	movs	r3, #0
 80018d2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80018d4:	693b      	ldr	r3, [r7, #16]
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	371c      	adds	r7, #28
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	40021000 	.word	0x40021000
 80018e8:	00f42400 	.word	0x00f42400
 80018ec:	016e3600 	.word	0x016e3600

080018f0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018f4:	4b03      	ldr	r3, [pc, #12]	@ (8001904 <HAL_RCC_GetHCLKFreq+0x14>)
 80018f6:	681b      	ldr	r3, [r3, #0]
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	20000000 	.word	0x20000000

08001908 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800190c:	f7ff fff0 	bl	80018f0 <HAL_RCC_GetHCLKFreq>
 8001910:	4602      	mov	r2, r0
 8001912:	4b06      	ldr	r3, [pc, #24]	@ (800192c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	0a1b      	lsrs	r3, r3, #8
 8001918:	f003 0307 	and.w	r3, r3, #7
 800191c:	4904      	ldr	r1, [pc, #16]	@ (8001930 <HAL_RCC_GetPCLK1Freq+0x28>)
 800191e:	5ccb      	ldrb	r3, [r1, r3]
 8001920:	f003 031f 	and.w	r3, r3, #31
 8001924:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001928:	4618      	mov	r0, r3
 800192a:	bd80      	pop	{r7, pc}
 800192c:	40021000 	.word	0x40021000
 8001930:	08004ce8 	.word	0x08004ce8

08001934 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001938:	f7ff ffda 	bl	80018f0 <HAL_RCC_GetHCLKFreq>
 800193c:	4602      	mov	r2, r0
 800193e:	4b06      	ldr	r3, [pc, #24]	@ (8001958 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	0adb      	lsrs	r3, r3, #11
 8001944:	f003 0307 	and.w	r3, r3, #7
 8001948:	4904      	ldr	r1, [pc, #16]	@ (800195c <HAL_RCC_GetPCLK2Freq+0x28>)
 800194a:	5ccb      	ldrb	r3, [r1, r3]
 800194c:	f003 031f 	and.w	r3, r3, #31
 8001950:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001954:	4618      	mov	r0, r3
 8001956:	bd80      	pop	{r7, pc}
 8001958:	40021000 	.word	0x40021000
 800195c:	08004ce8 	.word	0x08004ce8

08001960 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d101      	bne.n	8001972 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e042      	b.n	80019f8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001978:	2b00      	cmp	r3, #0
 800197a:	d106      	bne.n	800198a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2200      	movs	r2, #0
 8001980:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f7ff fb6f 	bl	8001068 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2224      	movs	r2, #36	@ 0x24
 800198e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f022 0201 	bic.w	r2, r2, #1
 80019a0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d002      	beq.n	80019b0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f000 fb82 	bl	80020b4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f000 f8b3 	bl	8001b1c <UART_SetConfig>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d101      	bne.n	80019c0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e01b      	b.n	80019f8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	685a      	ldr	r2, [r3, #4]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80019ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	689a      	ldr	r2, [r3, #8]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80019de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f042 0201 	orr.w	r2, r2, #1
 80019ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f000 fc01 	bl	80021f8 <UART_CheckIdleState>
 80019f6:	4603      	mov	r3, r0
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3708      	adds	r7, #8
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b08a      	sub	sp, #40	@ 0x28
 8001a04:	af02      	add	r7, sp, #8
 8001a06:	60f8      	str	r0, [r7, #12]
 8001a08:	60b9      	str	r1, [r7, #8]
 8001a0a:	603b      	str	r3, [r7, #0]
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a16:	2b20      	cmp	r3, #32
 8001a18:	d17b      	bne.n	8001b12 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d002      	beq.n	8001a26 <HAL_UART_Transmit+0x26>
 8001a20:	88fb      	ldrh	r3, [r7, #6]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d101      	bne.n	8001a2a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e074      	b.n	8001b14 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	2221      	movs	r2, #33	@ 0x21
 8001a36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001a3a:	f7ff fc45 	bl	80012c8 <HAL_GetTick>
 8001a3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	88fa      	ldrh	r2, [r7, #6]
 8001a44:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	88fa      	ldrh	r2, [r7, #6]
 8001a4c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001a58:	d108      	bne.n	8001a6c <HAL_UART_Transmit+0x6c>
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	691b      	ldr	r3, [r3, #16]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d104      	bne.n	8001a6c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001a62:	2300      	movs	r3, #0
 8001a64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	61bb      	str	r3, [r7, #24]
 8001a6a:	e003      	b.n	8001a74 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001a70:	2300      	movs	r3, #0
 8001a72:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001a74:	e030      	b.n	8001ad8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	9300      	str	r3, [sp, #0]
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	2180      	movs	r1, #128	@ 0x80
 8001a80:	68f8      	ldr	r0, [r7, #12]
 8001a82:	f000 fc63 	bl	800234c <UART_WaitOnFlagUntilTimeout>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d005      	beq.n	8001a98 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2220      	movs	r2, #32
 8001a90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8001a94:	2303      	movs	r3, #3
 8001a96:	e03d      	b.n	8001b14 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d10b      	bne.n	8001ab6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	881b      	ldrh	r3, [r3, #0]
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001aac:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	3302      	adds	r3, #2
 8001ab2:	61bb      	str	r3, [r7, #24]
 8001ab4:	e007      	b.n	8001ac6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	781a      	ldrb	r2, [r3, #0]
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8001ac0:	69fb      	ldr	r3, [r7, #28]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	3b01      	subs	r3, #1
 8001ad0:	b29a      	uxth	r2, r3
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8001ade:	b29b      	uxth	r3, r3
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d1c8      	bne.n	8001a76 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	9300      	str	r3, [sp, #0]
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	2200      	movs	r2, #0
 8001aec:	2140      	movs	r1, #64	@ 0x40
 8001aee:	68f8      	ldr	r0, [r7, #12]
 8001af0:	f000 fc2c 	bl	800234c <UART_WaitOnFlagUntilTimeout>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d005      	beq.n	8001b06 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2220      	movs	r2, #32
 8001afe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e006      	b.n	8001b14 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2220      	movs	r2, #32
 8001b0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	e000      	b.n	8001b14 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8001b12:	2302      	movs	r3, #2
  }
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3720      	adds	r7, #32
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001b1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b20:	b08c      	sub	sp, #48	@ 0x30
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001b26:	2300      	movs	r3, #0
 8001b28:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	689a      	ldr	r2, [r3, #8]
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	691b      	ldr	r3, [r3, #16]
 8001b34:	431a      	orrs	r2, r3
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	695b      	ldr	r3, [r3, #20]
 8001b3a:	431a      	orrs	r2, r3
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	69db      	ldr	r3, [r3, #28]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	4bab      	ldr	r3, [pc, #684]	@ (8001df8 <UART_SetConfig+0x2dc>)
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	697a      	ldr	r2, [r7, #20]
 8001b50:	6812      	ldr	r2, [r2, #0]
 8001b52:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001b54:	430b      	orrs	r3, r1
 8001b56:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	68da      	ldr	r2, [r3, #12]
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	430a      	orrs	r2, r1
 8001b6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	699b      	ldr	r3, [r3, #24]
 8001b72:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4aa0      	ldr	r2, [pc, #640]	@ (8001dfc <UART_SetConfig+0x2e0>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d004      	beq.n	8001b88 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	6a1b      	ldr	r3, [r3, #32]
 8001b82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b84:	4313      	orrs	r3, r2
 8001b86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8001b92:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8001b96:	697a      	ldr	r2, [r7, #20]
 8001b98:	6812      	ldr	r2, [r2, #0]
 8001b9a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001b9c:	430b      	orrs	r3, r1
 8001b9e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ba6:	f023 010f 	bic.w	r1, r3, #15
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	430a      	orrs	r2, r1
 8001bb4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a91      	ldr	r2, [pc, #580]	@ (8001e00 <UART_SetConfig+0x2e4>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d125      	bne.n	8001c0c <UART_SetConfig+0xf0>
 8001bc0:	4b90      	ldr	r3, [pc, #576]	@ (8001e04 <UART_SetConfig+0x2e8>)
 8001bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bc6:	f003 0303 	and.w	r3, r3, #3
 8001bca:	2b03      	cmp	r3, #3
 8001bcc:	d81a      	bhi.n	8001c04 <UART_SetConfig+0xe8>
 8001bce:	a201      	add	r2, pc, #4	@ (adr r2, 8001bd4 <UART_SetConfig+0xb8>)
 8001bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bd4:	08001be5 	.word	0x08001be5
 8001bd8:	08001bf5 	.word	0x08001bf5
 8001bdc:	08001bed 	.word	0x08001bed
 8001be0:	08001bfd 	.word	0x08001bfd
 8001be4:	2301      	movs	r3, #1
 8001be6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001bea:	e0d6      	b.n	8001d9a <UART_SetConfig+0x27e>
 8001bec:	2302      	movs	r3, #2
 8001bee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001bf2:	e0d2      	b.n	8001d9a <UART_SetConfig+0x27e>
 8001bf4:	2304      	movs	r3, #4
 8001bf6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001bfa:	e0ce      	b.n	8001d9a <UART_SetConfig+0x27e>
 8001bfc:	2308      	movs	r3, #8
 8001bfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001c02:	e0ca      	b.n	8001d9a <UART_SetConfig+0x27e>
 8001c04:	2310      	movs	r3, #16
 8001c06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001c0a:	e0c6      	b.n	8001d9a <UART_SetConfig+0x27e>
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a7d      	ldr	r2, [pc, #500]	@ (8001e08 <UART_SetConfig+0x2ec>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d138      	bne.n	8001c88 <UART_SetConfig+0x16c>
 8001c16:	4b7b      	ldr	r3, [pc, #492]	@ (8001e04 <UART_SetConfig+0x2e8>)
 8001c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c1c:	f003 030c 	and.w	r3, r3, #12
 8001c20:	2b0c      	cmp	r3, #12
 8001c22:	d82d      	bhi.n	8001c80 <UART_SetConfig+0x164>
 8001c24:	a201      	add	r2, pc, #4	@ (adr r2, 8001c2c <UART_SetConfig+0x110>)
 8001c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c2a:	bf00      	nop
 8001c2c:	08001c61 	.word	0x08001c61
 8001c30:	08001c81 	.word	0x08001c81
 8001c34:	08001c81 	.word	0x08001c81
 8001c38:	08001c81 	.word	0x08001c81
 8001c3c:	08001c71 	.word	0x08001c71
 8001c40:	08001c81 	.word	0x08001c81
 8001c44:	08001c81 	.word	0x08001c81
 8001c48:	08001c81 	.word	0x08001c81
 8001c4c:	08001c69 	.word	0x08001c69
 8001c50:	08001c81 	.word	0x08001c81
 8001c54:	08001c81 	.word	0x08001c81
 8001c58:	08001c81 	.word	0x08001c81
 8001c5c:	08001c79 	.word	0x08001c79
 8001c60:	2300      	movs	r3, #0
 8001c62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001c66:	e098      	b.n	8001d9a <UART_SetConfig+0x27e>
 8001c68:	2302      	movs	r3, #2
 8001c6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001c6e:	e094      	b.n	8001d9a <UART_SetConfig+0x27e>
 8001c70:	2304      	movs	r3, #4
 8001c72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001c76:	e090      	b.n	8001d9a <UART_SetConfig+0x27e>
 8001c78:	2308      	movs	r3, #8
 8001c7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001c7e:	e08c      	b.n	8001d9a <UART_SetConfig+0x27e>
 8001c80:	2310      	movs	r3, #16
 8001c82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001c86:	e088      	b.n	8001d9a <UART_SetConfig+0x27e>
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a5f      	ldr	r2, [pc, #380]	@ (8001e0c <UART_SetConfig+0x2f0>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d125      	bne.n	8001cde <UART_SetConfig+0x1c2>
 8001c92:	4b5c      	ldr	r3, [pc, #368]	@ (8001e04 <UART_SetConfig+0x2e8>)
 8001c94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c98:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001c9c:	2b30      	cmp	r3, #48	@ 0x30
 8001c9e:	d016      	beq.n	8001cce <UART_SetConfig+0x1b2>
 8001ca0:	2b30      	cmp	r3, #48	@ 0x30
 8001ca2:	d818      	bhi.n	8001cd6 <UART_SetConfig+0x1ba>
 8001ca4:	2b20      	cmp	r3, #32
 8001ca6:	d00a      	beq.n	8001cbe <UART_SetConfig+0x1a2>
 8001ca8:	2b20      	cmp	r3, #32
 8001caa:	d814      	bhi.n	8001cd6 <UART_SetConfig+0x1ba>
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d002      	beq.n	8001cb6 <UART_SetConfig+0x19a>
 8001cb0:	2b10      	cmp	r3, #16
 8001cb2:	d008      	beq.n	8001cc6 <UART_SetConfig+0x1aa>
 8001cb4:	e00f      	b.n	8001cd6 <UART_SetConfig+0x1ba>
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001cbc:	e06d      	b.n	8001d9a <UART_SetConfig+0x27e>
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001cc4:	e069      	b.n	8001d9a <UART_SetConfig+0x27e>
 8001cc6:	2304      	movs	r3, #4
 8001cc8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001ccc:	e065      	b.n	8001d9a <UART_SetConfig+0x27e>
 8001cce:	2308      	movs	r3, #8
 8001cd0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001cd4:	e061      	b.n	8001d9a <UART_SetConfig+0x27e>
 8001cd6:	2310      	movs	r3, #16
 8001cd8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001cdc:	e05d      	b.n	8001d9a <UART_SetConfig+0x27e>
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a4b      	ldr	r2, [pc, #300]	@ (8001e10 <UART_SetConfig+0x2f4>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d125      	bne.n	8001d34 <UART_SetConfig+0x218>
 8001ce8:	4b46      	ldr	r3, [pc, #280]	@ (8001e04 <UART_SetConfig+0x2e8>)
 8001cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cee:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001cf2:	2bc0      	cmp	r3, #192	@ 0xc0
 8001cf4:	d016      	beq.n	8001d24 <UART_SetConfig+0x208>
 8001cf6:	2bc0      	cmp	r3, #192	@ 0xc0
 8001cf8:	d818      	bhi.n	8001d2c <UART_SetConfig+0x210>
 8001cfa:	2b80      	cmp	r3, #128	@ 0x80
 8001cfc:	d00a      	beq.n	8001d14 <UART_SetConfig+0x1f8>
 8001cfe:	2b80      	cmp	r3, #128	@ 0x80
 8001d00:	d814      	bhi.n	8001d2c <UART_SetConfig+0x210>
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d002      	beq.n	8001d0c <UART_SetConfig+0x1f0>
 8001d06:	2b40      	cmp	r3, #64	@ 0x40
 8001d08:	d008      	beq.n	8001d1c <UART_SetConfig+0x200>
 8001d0a:	e00f      	b.n	8001d2c <UART_SetConfig+0x210>
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001d12:	e042      	b.n	8001d9a <UART_SetConfig+0x27e>
 8001d14:	2302      	movs	r3, #2
 8001d16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001d1a:	e03e      	b.n	8001d9a <UART_SetConfig+0x27e>
 8001d1c:	2304      	movs	r3, #4
 8001d1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001d22:	e03a      	b.n	8001d9a <UART_SetConfig+0x27e>
 8001d24:	2308      	movs	r3, #8
 8001d26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001d2a:	e036      	b.n	8001d9a <UART_SetConfig+0x27e>
 8001d2c:	2310      	movs	r3, #16
 8001d2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001d32:	e032      	b.n	8001d9a <UART_SetConfig+0x27e>
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a30      	ldr	r2, [pc, #192]	@ (8001dfc <UART_SetConfig+0x2e0>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d12a      	bne.n	8001d94 <UART_SetConfig+0x278>
 8001d3e:	4b31      	ldr	r3, [pc, #196]	@ (8001e04 <UART_SetConfig+0x2e8>)
 8001d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d44:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001d48:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8001d4c:	d01a      	beq.n	8001d84 <UART_SetConfig+0x268>
 8001d4e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8001d52:	d81b      	bhi.n	8001d8c <UART_SetConfig+0x270>
 8001d54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001d58:	d00c      	beq.n	8001d74 <UART_SetConfig+0x258>
 8001d5a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001d5e:	d815      	bhi.n	8001d8c <UART_SetConfig+0x270>
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d003      	beq.n	8001d6c <UART_SetConfig+0x250>
 8001d64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d68:	d008      	beq.n	8001d7c <UART_SetConfig+0x260>
 8001d6a:	e00f      	b.n	8001d8c <UART_SetConfig+0x270>
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001d72:	e012      	b.n	8001d9a <UART_SetConfig+0x27e>
 8001d74:	2302      	movs	r3, #2
 8001d76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001d7a:	e00e      	b.n	8001d9a <UART_SetConfig+0x27e>
 8001d7c:	2304      	movs	r3, #4
 8001d7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001d82:	e00a      	b.n	8001d9a <UART_SetConfig+0x27e>
 8001d84:	2308      	movs	r3, #8
 8001d86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001d8a:	e006      	b.n	8001d9a <UART_SetConfig+0x27e>
 8001d8c:	2310      	movs	r3, #16
 8001d8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001d92:	e002      	b.n	8001d9a <UART_SetConfig+0x27e>
 8001d94:	2310      	movs	r3, #16
 8001d96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a17      	ldr	r2, [pc, #92]	@ (8001dfc <UART_SetConfig+0x2e0>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	f040 80a8 	bne.w	8001ef6 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8001da6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001daa:	2b08      	cmp	r3, #8
 8001dac:	d834      	bhi.n	8001e18 <UART_SetConfig+0x2fc>
 8001dae:	a201      	add	r2, pc, #4	@ (adr r2, 8001db4 <UART_SetConfig+0x298>)
 8001db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001db4:	08001dd9 	.word	0x08001dd9
 8001db8:	08001e19 	.word	0x08001e19
 8001dbc:	08001de1 	.word	0x08001de1
 8001dc0:	08001e19 	.word	0x08001e19
 8001dc4:	08001de7 	.word	0x08001de7
 8001dc8:	08001e19 	.word	0x08001e19
 8001dcc:	08001e19 	.word	0x08001e19
 8001dd0:	08001e19 	.word	0x08001e19
 8001dd4:	08001def 	.word	0x08001def
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001dd8:	f7ff fd96 	bl	8001908 <HAL_RCC_GetPCLK1Freq>
 8001ddc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8001dde:	e021      	b.n	8001e24 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001de0:	4b0c      	ldr	r3, [pc, #48]	@ (8001e14 <UART_SetConfig+0x2f8>)
 8001de2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8001de4:	e01e      	b.n	8001e24 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001de6:	f7ff fd21 	bl	800182c <HAL_RCC_GetSysClockFreq>
 8001dea:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8001dec:	e01a      	b.n	8001e24 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001dee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001df2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8001df4:	e016      	b.n	8001e24 <UART_SetConfig+0x308>
 8001df6:	bf00      	nop
 8001df8:	cfff69f3 	.word	0xcfff69f3
 8001dfc:	40008000 	.word	0x40008000
 8001e00:	40013800 	.word	0x40013800
 8001e04:	40021000 	.word	0x40021000
 8001e08:	40004400 	.word	0x40004400
 8001e0c:	40004800 	.word	0x40004800
 8001e10:	40004c00 	.word	0x40004c00
 8001e14:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8001e22:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8001e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	f000 812a 	beq.w	8002080 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e30:	4a9e      	ldr	r2, [pc, #632]	@ (80020ac <UART_SetConfig+0x590>)
 8001e32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001e36:	461a      	mov	r2, r3
 8001e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e3a:	fbb3 f3f2 	udiv	r3, r3, r2
 8001e3e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	685a      	ldr	r2, [r3, #4]
 8001e44:	4613      	mov	r3, r2
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	4413      	add	r3, r2
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d305      	bcc.n	8001e5c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8001e56:	69ba      	ldr	r2, [r7, #24]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d903      	bls.n	8001e64 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8001e62:	e10d      	b.n	8002080 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e66:	2200      	movs	r2, #0
 8001e68:	60bb      	str	r3, [r7, #8]
 8001e6a:	60fa      	str	r2, [r7, #12]
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e70:	4a8e      	ldr	r2, [pc, #568]	@ (80020ac <UART_SetConfig+0x590>)
 8001e72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	2200      	movs	r2, #0
 8001e7a:	603b      	str	r3, [r7, #0]
 8001e7c:	607a      	str	r2, [r7, #4]
 8001e7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001e82:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001e86:	f7fe fa23 	bl	80002d0 <__aeabi_uldivmod>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	4610      	mov	r0, r2
 8001e90:	4619      	mov	r1, r3
 8001e92:	f04f 0200 	mov.w	r2, #0
 8001e96:	f04f 0300 	mov.w	r3, #0
 8001e9a:	020b      	lsls	r3, r1, #8
 8001e9c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8001ea0:	0202      	lsls	r2, r0, #8
 8001ea2:	6979      	ldr	r1, [r7, #20]
 8001ea4:	6849      	ldr	r1, [r1, #4]
 8001ea6:	0849      	lsrs	r1, r1, #1
 8001ea8:	2000      	movs	r0, #0
 8001eaa:	460c      	mov	r4, r1
 8001eac:	4605      	mov	r5, r0
 8001eae:	eb12 0804 	adds.w	r8, r2, r4
 8001eb2:	eb43 0905 	adc.w	r9, r3, r5
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	469a      	mov	sl, r3
 8001ebe:	4693      	mov	fp, r2
 8001ec0:	4652      	mov	r2, sl
 8001ec2:	465b      	mov	r3, fp
 8001ec4:	4640      	mov	r0, r8
 8001ec6:	4649      	mov	r1, r9
 8001ec8:	f7fe fa02 	bl	80002d0 <__aeabi_uldivmod>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	460b      	mov	r3, r1
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8001ed4:	6a3b      	ldr	r3, [r7, #32]
 8001ed6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001eda:	d308      	bcc.n	8001eee <UART_SetConfig+0x3d2>
 8001edc:	6a3b      	ldr	r3, [r7, #32]
 8001ede:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001ee2:	d204      	bcs.n	8001eee <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	6a3a      	ldr	r2, [r7, #32]
 8001eea:	60da      	str	r2, [r3, #12]
 8001eec:	e0c8      	b.n	8002080 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8001ef4:	e0c4      	b.n	8002080 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	69db      	ldr	r3, [r3, #28]
 8001efa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001efe:	d167      	bne.n	8001fd0 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8001f00:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001f04:	2b08      	cmp	r3, #8
 8001f06:	d828      	bhi.n	8001f5a <UART_SetConfig+0x43e>
 8001f08:	a201      	add	r2, pc, #4	@ (adr r2, 8001f10 <UART_SetConfig+0x3f4>)
 8001f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f0e:	bf00      	nop
 8001f10:	08001f35 	.word	0x08001f35
 8001f14:	08001f3d 	.word	0x08001f3d
 8001f18:	08001f45 	.word	0x08001f45
 8001f1c:	08001f5b 	.word	0x08001f5b
 8001f20:	08001f4b 	.word	0x08001f4b
 8001f24:	08001f5b 	.word	0x08001f5b
 8001f28:	08001f5b 	.word	0x08001f5b
 8001f2c:	08001f5b 	.word	0x08001f5b
 8001f30:	08001f53 	.word	0x08001f53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001f34:	f7ff fce8 	bl	8001908 <HAL_RCC_GetPCLK1Freq>
 8001f38:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8001f3a:	e014      	b.n	8001f66 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8001f3c:	f7ff fcfa 	bl	8001934 <HAL_RCC_GetPCLK2Freq>
 8001f40:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8001f42:	e010      	b.n	8001f66 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001f44:	4b5a      	ldr	r3, [pc, #360]	@ (80020b0 <UART_SetConfig+0x594>)
 8001f46:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8001f48:	e00d      	b.n	8001f66 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001f4a:	f7ff fc6f 	bl	800182c <HAL_RCC_GetSysClockFreq>
 8001f4e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8001f50:	e009      	b.n	8001f66 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001f52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001f56:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8001f58:	e005      	b.n	8001f66 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8001f64:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8001f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	f000 8089 	beq.w	8002080 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f72:	4a4e      	ldr	r2, [pc, #312]	@ (80020ac <UART_SetConfig+0x590>)
 8001f74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001f78:	461a      	mov	r2, r3
 8001f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f7c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001f80:	005a      	lsls	r2, r3, #1
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	085b      	lsrs	r3, r3, #1
 8001f88:	441a      	add	r2, r3
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f92:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001f94:	6a3b      	ldr	r3, [r7, #32]
 8001f96:	2b0f      	cmp	r3, #15
 8001f98:	d916      	bls.n	8001fc8 <UART_SetConfig+0x4ac>
 8001f9a:	6a3b      	ldr	r3, [r7, #32]
 8001f9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fa0:	d212      	bcs.n	8001fc8 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001fa2:	6a3b      	ldr	r3, [r7, #32]
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	f023 030f 	bic.w	r3, r3, #15
 8001faa:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001fac:	6a3b      	ldr	r3, [r7, #32]
 8001fae:	085b      	lsrs	r3, r3, #1
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	f003 0307 	and.w	r3, r3, #7
 8001fb6:	b29a      	uxth	r2, r3
 8001fb8:	8bfb      	ldrh	r3, [r7, #30]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	8bfa      	ldrh	r2, [r7, #30]
 8001fc4:	60da      	str	r2, [r3, #12]
 8001fc6:	e05b      	b.n	8002080 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8001fce:	e057      	b.n	8002080 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8001fd0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001fd4:	2b08      	cmp	r3, #8
 8001fd6:	d828      	bhi.n	800202a <UART_SetConfig+0x50e>
 8001fd8:	a201      	add	r2, pc, #4	@ (adr r2, 8001fe0 <UART_SetConfig+0x4c4>)
 8001fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fde:	bf00      	nop
 8001fe0:	08002005 	.word	0x08002005
 8001fe4:	0800200d 	.word	0x0800200d
 8001fe8:	08002015 	.word	0x08002015
 8001fec:	0800202b 	.word	0x0800202b
 8001ff0:	0800201b 	.word	0x0800201b
 8001ff4:	0800202b 	.word	0x0800202b
 8001ff8:	0800202b 	.word	0x0800202b
 8001ffc:	0800202b 	.word	0x0800202b
 8002000:	08002023 	.word	0x08002023
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002004:	f7ff fc80 	bl	8001908 <HAL_RCC_GetPCLK1Freq>
 8002008:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800200a:	e014      	b.n	8002036 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800200c:	f7ff fc92 	bl	8001934 <HAL_RCC_GetPCLK2Freq>
 8002010:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002012:	e010      	b.n	8002036 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002014:	4b26      	ldr	r3, [pc, #152]	@ (80020b0 <UART_SetConfig+0x594>)
 8002016:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002018:	e00d      	b.n	8002036 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800201a:	f7ff fc07 	bl	800182c <HAL_RCC_GetSysClockFreq>
 800201e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002020:	e009      	b.n	8002036 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002022:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002026:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002028:	e005      	b.n	8002036 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800202a:	2300      	movs	r3, #0
 800202c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002034:	bf00      	nop
    }

    if (pclk != 0U)
 8002036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002038:	2b00      	cmp	r3, #0
 800203a:	d021      	beq.n	8002080 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002040:	4a1a      	ldr	r2, [pc, #104]	@ (80020ac <UART_SetConfig+0x590>)
 8002042:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002046:	461a      	mov	r2, r3
 8002048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800204a:	fbb3 f2f2 	udiv	r2, r3, r2
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	085b      	lsrs	r3, r3, #1
 8002054:	441a      	add	r2, r3
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	fbb2 f3f3 	udiv	r3, r2, r3
 800205e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002060:	6a3b      	ldr	r3, [r7, #32]
 8002062:	2b0f      	cmp	r3, #15
 8002064:	d909      	bls.n	800207a <UART_SetConfig+0x55e>
 8002066:	6a3b      	ldr	r3, [r7, #32]
 8002068:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800206c:	d205      	bcs.n	800207a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800206e:	6a3b      	ldr	r3, [r7, #32]
 8002070:	b29a      	uxth	r2, r3
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	60da      	str	r2, [r3, #12]
 8002078:	e002      	b.n	8002080 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	2201      	movs	r2, #1
 8002084:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	2201      	movs	r2, #1
 800208c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	2200      	movs	r2, #0
 8002094:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	2200      	movs	r2, #0
 800209a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800209c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3730      	adds	r7, #48	@ 0x30
 80020a4:	46bd      	mov	sp, r7
 80020a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80020aa:	bf00      	nop
 80020ac:	08004cf0 	.word	0x08004cf0
 80020b0:	00f42400 	.word	0x00f42400

080020b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020c0:	f003 0308 	and.w	r3, r3, #8
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d00a      	beq.n	80020de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	430a      	orrs	r2, r1
 80020dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d00a      	beq.n	8002100 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	430a      	orrs	r2, r1
 80020fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002104:	f003 0302 	and.w	r3, r3, #2
 8002108:	2b00      	cmp	r3, #0
 800210a:	d00a      	beq.n	8002122 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	430a      	orrs	r2, r1
 8002120:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002126:	f003 0304 	and.w	r3, r3, #4
 800212a:	2b00      	cmp	r3, #0
 800212c:	d00a      	beq.n	8002144 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	430a      	orrs	r2, r1
 8002142:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002148:	f003 0310 	and.w	r3, r3, #16
 800214c:	2b00      	cmp	r3, #0
 800214e:	d00a      	beq.n	8002166 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	430a      	orrs	r2, r1
 8002164:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800216a:	f003 0320 	and.w	r3, r3, #32
 800216e:	2b00      	cmp	r3, #0
 8002170:	d00a      	beq.n	8002188 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	430a      	orrs	r2, r1
 8002186:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800218c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002190:	2b00      	cmp	r3, #0
 8002192:	d01a      	beq.n	80021ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	430a      	orrs	r2, r1
 80021a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80021b2:	d10a      	bne.n	80021ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	430a      	orrs	r2, r1
 80021c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d00a      	beq.n	80021ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	430a      	orrs	r2, r1
 80021ea:	605a      	str	r2, [r3, #4]
  }
}
 80021ec:	bf00      	nop
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b098      	sub	sp, #96	@ 0x60
 80021fc:	af02      	add	r7, sp, #8
 80021fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002208:	f7ff f85e 	bl	80012c8 <HAL_GetTick>
 800220c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0308 	and.w	r3, r3, #8
 8002218:	2b08      	cmp	r3, #8
 800221a:	d12f      	bne.n	800227c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800221c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002220:	9300      	str	r3, [sp, #0]
 8002222:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002224:	2200      	movs	r2, #0
 8002226:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f000 f88e 	bl	800234c <UART_WaitOnFlagUntilTimeout>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d022      	beq.n	800227c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800223c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800223e:	e853 3f00 	ldrex	r3, [r3]
 8002242:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002244:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002246:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800224a:	653b      	str	r3, [r7, #80]	@ 0x50
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	461a      	mov	r2, r3
 8002252:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002254:	647b      	str	r3, [r7, #68]	@ 0x44
 8002256:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002258:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800225a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800225c:	e841 2300 	strex	r3, r2, [r1]
 8002260:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002262:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002264:	2b00      	cmp	r3, #0
 8002266:	d1e6      	bne.n	8002236 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2220      	movs	r2, #32
 800226c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e063      	b.n	8002344 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0304 	and.w	r3, r3, #4
 8002286:	2b04      	cmp	r3, #4
 8002288:	d149      	bne.n	800231e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800228a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800228e:	9300      	str	r3, [sp, #0]
 8002290:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002292:	2200      	movs	r2, #0
 8002294:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f000 f857 	bl	800234c <UART_WaitOnFlagUntilTimeout>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d03c      	beq.n	800231e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ac:	e853 3f00 	ldrex	r3, [r3]
 80022b0:	623b      	str	r3, [r7, #32]
   return(result);
 80022b2:	6a3b      	ldr	r3, [r7, #32]
 80022b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80022b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	461a      	mov	r2, r3
 80022c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80022c2:	633b      	str	r3, [r7, #48]	@ 0x30
 80022c4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80022c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80022ca:	e841 2300 	strex	r3, r2, [r1]
 80022ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80022d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d1e6      	bne.n	80022a4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	3308      	adds	r3, #8
 80022dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	e853 3f00 	ldrex	r3, [r3]
 80022e4:	60fb      	str	r3, [r7, #12]
   return(result);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	f023 0301 	bic.w	r3, r3, #1
 80022ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	3308      	adds	r3, #8
 80022f4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80022f6:	61fa      	str	r2, [r7, #28]
 80022f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022fa:	69b9      	ldr	r1, [r7, #24]
 80022fc:	69fa      	ldr	r2, [r7, #28]
 80022fe:	e841 2300 	strex	r3, r2, [r1]
 8002302:	617b      	str	r3, [r7, #20]
   return(result);
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d1e5      	bne.n	80022d6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2220      	movs	r2, #32
 800230e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e012      	b.n	8002344 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2220      	movs	r2, #32
 8002322:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2220      	movs	r2, #32
 800232a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2200      	movs	r2, #0
 8002338:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002342:	2300      	movs	r3, #0
}
 8002344:	4618      	mov	r0, r3
 8002346:	3758      	adds	r7, #88	@ 0x58
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}

0800234c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	60b9      	str	r1, [r7, #8]
 8002356:	603b      	str	r3, [r7, #0]
 8002358:	4613      	mov	r3, r2
 800235a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800235c:	e04f      	b.n	80023fe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002364:	d04b      	beq.n	80023fe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002366:	f7fe ffaf 	bl	80012c8 <HAL_GetTick>
 800236a:	4602      	mov	r2, r0
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	429a      	cmp	r2, r3
 8002374:	d302      	bcc.n	800237c <UART_WaitOnFlagUntilTimeout+0x30>
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d101      	bne.n	8002380 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	e04e      	b.n	800241e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0304 	and.w	r3, r3, #4
 800238a:	2b00      	cmp	r3, #0
 800238c:	d037      	beq.n	80023fe <UART_WaitOnFlagUntilTimeout+0xb2>
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	2b80      	cmp	r3, #128	@ 0x80
 8002392:	d034      	beq.n	80023fe <UART_WaitOnFlagUntilTimeout+0xb2>
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	2b40      	cmp	r3, #64	@ 0x40
 8002398:	d031      	beq.n	80023fe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	69db      	ldr	r3, [r3, #28]
 80023a0:	f003 0308 	and.w	r3, r3, #8
 80023a4:	2b08      	cmp	r3, #8
 80023a6:	d110      	bne.n	80023ca <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2208      	movs	r2, #8
 80023ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80023b0:	68f8      	ldr	r0, [r7, #12]
 80023b2:	f000 f838 	bl	8002426 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2208      	movs	r2, #8
 80023ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2200      	movs	r2, #0
 80023c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e029      	b.n	800241e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	69db      	ldr	r3, [r3, #28]
 80023d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80023d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80023d8:	d111      	bne.n	80023fe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80023e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80023e4:	68f8      	ldr	r0, [r7, #12]
 80023e6:	f000 f81e 	bl	8002426 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2220      	movs	r2, #32
 80023ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2200      	movs	r2, #0
 80023f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e00f      	b.n	800241e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	69da      	ldr	r2, [r3, #28]
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	4013      	ands	r3, r2
 8002408:	68ba      	ldr	r2, [r7, #8]
 800240a:	429a      	cmp	r2, r3
 800240c:	bf0c      	ite	eq
 800240e:	2301      	moveq	r3, #1
 8002410:	2300      	movne	r3, #0
 8002412:	b2db      	uxtb	r3, r3
 8002414:	461a      	mov	r2, r3
 8002416:	79fb      	ldrb	r3, [r7, #7]
 8002418:	429a      	cmp	r2, r3
 800241a:	d0a0      	beq.n	800235e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800241c:	2300      	movs	r3, #0
}
 800241e:	4618      	mov	r0, r3
 8002420:	3710      	adds	r7, #16
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002426:	b480      	push	{r7}
 8002428:	b095      	sub	sp, #84	@ 0x54
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002434:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002436:	e853 3f00 	ldrex	r3, [r3]
 800243a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800243c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800243e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002442:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	461a      	mov	r2, r3
 800244a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800244c:	643b      	str	r3, [r7, #64]	@ 0x40
 800244e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002450:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002452:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002454:	e841 2300 	strex	r3, r2, [r1]
 8002458:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800245a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800245c:	2b00      	cmp	r3, #0
 800245e:	d1e6      	bne.n	800242e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	3308      	adds	r3, #8
 8002466:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002468:	6a3b      	ldr	r3, [r7, #32]
 800246a:	e853 3f00 	ldrex	r3, [r3]
 800246e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002476:	f023 0301 	bic.w	r3, r3, #1
 800247a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	3308      	adds	r3, #8
 8002482:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002484:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002486:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002488:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800248a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800248c:	e841 2300 	strex	r3, r2, [r1]
 8002490:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002494:	2b00      	cmp	r3, #0
 8002496:	d1e3      	bne.n	8002460 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800249c:	2b01      	cmp	r3, #1
 800249e:	d118      	bne.n	80024d2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	e853 3f00 	ldrex	r3, [r3]
 80024ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	f023 0310 	bic.w	r3, r3, #16
 80024b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	461a      	mov	r2, r3
 80024bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024be:	61bb      	str	r3, [r7, #24]
 80024c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024c2:	6979      	ldr	r1, [r7, #20]
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	e841 2300 	strex	r3, r2, [r1]
 80024ca:	613b      	str	r3, [r7, #16]
   return(result);
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d1e6      	bne.n	80024a0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2220      	movs	r2, #32
 80024d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2200      	movs	r2, #0
 80024e4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80024e6:	bf00      	nop
 80024e8:	3754      	adds	r7, #84	@ 0x54
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr

080024f2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80024f2:	b480      	push	{r7}
 80024f4:	b085      	sub	sp, #20
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8002500:	2b01      	cmp	r3, #1
 8002502:	d101      	bne.n	8002508 <HAL_UARTEx_DisableFifoMode+0x16>
 8002504:	2302      	movs	r3, #2
 8002506:	e027      	b.n	8002558 <HAL_UARTEx_DisableFifoMode+0x66>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2224      	movs	r2, #36	@ 0x24
 8002514:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f022 0201 	bic.w	r2, r2, #1
 800252e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8002536:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2200      	movs	r2, #0
 800253c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	68fa      	ldr	r2, [r7, #12]
 8002544:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2220      	movs	r2, #32
 800254a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2200      	movs	r2, #0
 8002552:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002556:	2300      	movs	r3, #0
}
 8002558:	4618      	mov	r0, r3
 800255a:	3714      	adds	r7, #20
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8002574:	2b01      	cmp	r3, #1
 8002576:	d101      	bne.n	800257c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002578:	2302      	movs	r3, #2
 800257a:	e02d      	b.n	80025d8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2224      	movs	r2, #36	@ 0x24
 8002588:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f022 0201 	bic.w	r2, r2, #1
 80025a2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	683a      	ldr	r2, [r7, #0]
 80025b4:	430a      	orrs	r2, r1
 80025b6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	f000 f84f 	bl	800265c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	68fa      	ldr	r2, [r7, #12]
 80025c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2220      	movs	r2, #32
 80025ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80025d6:	2300      	movs	r3, #0
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3710      	adds	r7, #16
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}

080025e0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d101      	bne.n	80025f8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80025f4:	2302      	movs	r3, #2
 80025f6:	e02d      	b.n	8002654 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2201      	movs	r2, #1
 80025fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2224      	movs	r2, #36	@ 0x24
 8002604:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f022 0201 	bic.w	r2, r2, #1
 800261e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	683a      	ldr	r2, [r7, #0]
 8002630:	430a      	orrs	r2, r1
 8002632:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f000 f811 	bl	800265c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	68fa      	ldr	r2, [r7, #12]
 8002640:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2220      	movs	r2, #32
 8002646:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002652:	2300      	movs	r3, #0
}
 8002654:	4618      	mov	r0, r3
 8002656:	3710      	adds	r7, #16
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}

0800265c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800265c:	b480      	push	{r7}
 800265e:	b085      	sub	sp, #20
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002668:	2b00      	cmp	r3, #0
 800266a:	d108      	bne.n	800267e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2201      	movs	r2, #1
 8002678:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800267c:	e031      	b.n	80026e2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800267e:	2308      	movs	r3, #8
 8002680:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8002682:	2308      	movs	r3, #8
 8002684:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	0e5b      	lsrs	r3, r3, #25
 800268e:	b2db      	uxtb	r3, r3
 8002690:	f003 0307 	and.w	r3, r3, #7
 8002694:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	0f5b      	lsrs	r3, r3, #29
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	f003 0307 	and.w	r3, r3, #7
 80026a4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80026a6:	7bbb      	ldrb	r3, [r7, #14]
 80026a8:	7b3a      	ldrb	r2, [r7, #12]
 80026aa:	4911      	ldr	r1, [pc, #68]	@ (80026f0 <UARTEx_SetNbDataToProcess+0x94>)
 80026ac:	5c8a      	ldrb	r2, [r1, r2]
 80026ae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80026b2:	7b3a      	ldrb	r2, [r7, #12]
 80026b4:	490f      	ldr	r1, [pc, #60]	@ (80026f4 <UARTEx_SetNbDataToProcess+0x98>)
 80026b6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80026b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80026bc:	b29a      	uxth	r2, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80026c4:	7bfb      	ldrb	r3, [r7, #15]
 80026c6:	7b7a      	ldrb	r2, [r7, #13]
 80026c8:	4909      	ldr	r1, [pc, #36]	@ (80026f0 <UARTEx_SetNbDataToProcess+0x94>)
 80026ca:	5c8a      	ldrb	r2, [r1, r2]
 80026cc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80026d0:	7b7a      	ldrb	r2, [r7, #13]
 80026d2:	4908      	ldr	r1, [pc, #32]	@ (80026f4 <UARTEx_SetNbDataToProcess+0x98>)
 80026d4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80026d6:	fb93 f3f2 	sdiv	r3, r3, r2
 80026da:	b29a      	uxth	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80026e2:	bf00      	nop
 80026e4:	3714      	adds	r7, #20
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	08004d08 	.word	0x08004d08
 80026f4:	08004d10 	.word	0x08004d10

080026f8 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002700:	4a04      	ldr	r2, [pc, #16]	@ (8002714 <LL_SetSystemCoreClock+0x1c>)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6013      	str	r3, [r2, #0]
}
 8002706:	bf00      	nop
 8002708:	370c      	adds	r7, #12
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	20000000 	.word	0x20000000

08002718 <QF_int_disable_>:
// On ARMv7-M and higher, interrupts are disabled *selectively* with the
// BASEPRI register.
// Additionally, the function also asserts that the interrupts are
// NOT disabled upon the entry to the function.
__attribute__ ((naked, weak)) void QF_int_disable_(void) {
__asm volatile (
 8002718:	f3ef 8011 	mrs	r0, BASEPRI
 800271c:	213f      	movs	r1, #63	@ 0x3f
 800271e:	f381 8811 	msr	BASEPRI, r1
 8002722:	2800      	cmp	r0, #0
 8002724:	d100      	bne.n	8002728 <QF_int_disable_error>
 8002726:	4770      	bx	lr

08002728 <QF_int_disable_error>:
 8002728:	4802      	ldr	r0, [pc, #8]	@ (8002734 <QF_int_disable_error+0xc>)
 800272a:	2164      	movs	r1, #100	@ 0x64
 800272c:	4a02      	ldr	r2, [pc, #8]	@ (8002738 <QF_int_disable_error+0x10>)
 800272e:	4710      	bx	r2
    "  LDR     r0,=QF_port_module_ \n"
    "  MOVS    r1,#100          \n"
    "  LDR     r2,=Q_onError    \n"
    "  BX      r2               \n"
    );
}
 8002730:	bf00      	nop
 8002732:	0000      	.short	0x0000
 8002734:	08004d18 	.word	0x08004d18
 8002738:	080008d5 	.word	0x080008d5

0800273c <QF_int_enable_>:
// On ARMv6-M, interrupts are enabled with the PRIMASK register.
// On ARMv7-M and higher, interrupts are enabled with the BASEPRI register.
// Additionally, the function also asserts that the interrupts ARE
// disabled upon the entry to the function.
__attribute__ ((naked, weak)) void QF_int_enable_(void) {
__asm volatile (
 800273c:	f3ef 8011 	mrs	r0, BASEPRI
 8002740:	2800      	cmp	r0, #0
 8002742:	d003      	beq.n	800274c <QF_int_enable_error>
 8002744:	2100      	movs	r1, #0
 8002746:	f381 8811 	msr	BASEPRI, r1
 800274a:	4770      	bx	lr

0800274c <QF_int_enable_error>:
 800274c:	4802      	ldr	r0, [pc, #8]	@ (8002758 <QF_int_enable_error+0xc>)
 800274e:	2165      	movs	r1, #101	@ 0x65
 8002750:	4a02      	ldr	r2, [pc, #8]	@ (800275c <QF_int_enable_error+0x10>)
 8002752:	4710      	bx	r2
    "  LDR     r0,=QF_port_module_ \n"
    "  MOVS    r1,#101          \n"
    "  LDR     r2,=Q_onError    \n"
    "  BX      r2               \n"
    );
}
 8002754:	bf00      	nop
 8002756:	0000      	.short	0x0000
 8002758:	08004d18 	.word	0x08004d18
 800275c:	080008d5 	.word	0x080008d5

08002760 <QF_crit_entry_>:
// NOT disabled upon the entry to the function.
//
// NOTE:
// The assertion means that this critical section CANNOT nest.
__attribute__ ((naked, weak)) void QF_crit_entry_(void) {
__asm volatile (
 8002760:	f3ef 8011 	mrs	r0, BASEPRI
 8002764:	213f      	movs	r1, #63	@ 0x3f
 8002766:	f381 8811 	msr	BASEPRI, r1
 800276a:	2800      	cmp	r0, #0
 800276c:	d100      	bne.n	8002770 <QF_crit_entry_error>
 800276e:	4770      	bx	lr

08002770 <QF_crit_entry_error>:
 8002770:	4802      	ldr	r0, [pc, #8]	@ (800277c <QF_crit_entry_error+0xc>)
 8002772:	216e      	movs	r1, #110	@ 0x6e
 8002774:	4a02      	ldr	r2, [pc, #8]	@ (8002780 <QF_crit_entry_error+0x10>)
 8002776:	4710      	bx	r2
    "  LDR     r0,=QF_port_module_ \n"
    "  MOVS    r1,#110          \n"
    "  LDR     r2,=Q_onError    \n"
    "  BX      r2               \n"
    );
}
 8002778:	bf00      	nop
 800277a:	0000      	.short	0x0000
 800277c:	08004d18 	.word	0x08004d18
 8002780:	080008d5 	.word	0x080008d5

08002784 <QF_crit_exit_>:
// disabled upon the entry to the function.
//
// NOTE:
// The assertion means that this critical section CANNOT nest.
__attribute__ ((naked, weak)) void QF_crit_exit_(void) {
__asm volatile (
 8002784:	f3ef 8011 	mrs	r0, BASEPRI
 8002788:	2800      	cmp	r0, #0
 800278a:	d003      	beq.n	8002794 <QF_crit_exit_error>
 800278c:	2100      	movs	r1, #0
 800278e:	f381 8811 	msr	BASEPRI, r1
 8002792:	4770      	bx	lr

08002794 <QF_crit_exit_error>:
 8002794:	4802      	ldr	r0, [pc, #8]	@ (80027a0 <QF_crit_exit_error+0xc>)
 8002796:	216f      	movs	r1, #111	@ 0x6f
 8002798:	4a02      	ldr	r2, [pc, #8]	@ (80027a4 <QF_crit_exit_error+0x10>)
 800279a:	4710      	bx	r2
    "  LDR     r0,=QF_port_module_ \n"
    "  MOVS    r1,#111          \n"
    "  LDR     r2,=Q_onError    \n"
    "  BX      r2               \n"
    );
}
 800279c:	bf00      	nop
 800279e:	0000      	.short	0x0000
 80027a0:	08004d18 	.word	0x08004d18
 80027a4:	080008d5 	.word	0x080008d5

080027a8 <QK_init>:
// application programmer forgets to explicitly set priorities of all
// "kernel aware" interrupts.
//
// The interrupt priorities established in QK_init() can be later
// changed by the application-level code.
void QK_init(void) {
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0

#if (__ARM_ARCH != 6)   //--------- if ARMv7-M and higher...

    // SCB_SYSPRI[2]:  SysTick
    SCB_SYSPRI[2] = (SCB_SYSPRI[2] | (QF_BASEPRI << 24U));
 80027ae:	4b18      	ldr	r3, [pc, #96]	@ (8002810 <QK_init+0x68>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a17      	ldr	r2, [pc, #92]	@ (8002810 <QK_init+0x68>)
 80027b4:	f043 537c 	orr.w	r3, r3, #1056964608	@ 0x3f000000
 80027b8:	6013      	str	r3, [r2, #0]

    // set all 240 possible IRQ priories to QF_BASEPRI...
    for (uint_fast8_t n = 0U; n < (240U/sizeof(uint32_t)); ++n) {
 80027ba:	2300      	movs	r3, #0
 80027bc:	607b      	str	r3, [r7, #4]
 80027be:	e00b      	b.n	80027d8 <QK_init+0x30>
        NVIC_IP[n] = (QF_BASEPRI << 24U) | (QF_BASEPRI << 16U)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 80027c8:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 80027cc:	f04f 323f 	mov.w	r2, #1061109567	@ 0x3f3f3f3f
 80027d0:	601a      	str	r2, [r3, #0]
    for (uint_fast8_t n = 0U; n < (240U/sizeof(uint32_t)); ++n) {
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	3301      	adds	r3, #1
 80027d6:	607b      	str	r3, [r7, #4]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2b3b      	cmp	r3, #59	@ 0x3b
 80027dc:	d9f0      	bls.n	80027c0 <QK_init+0x18>
    }

#endif                  //--------- ARMv7-M or higher

    // SCB_SYSPRI[2]: PendSV set to priority 0xFF (lowest)
    SCB_SYSPRI[2] = (SCB_SYSPRI[2] | (0xFFU << 16U));
 80027de:	4b0c      	ldr	r3, [pc, #48]	@ (8002810 <QK_init+0x68>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a0b      	ldr	r2, [pc, #44]	@ (8002810 <QK_init+0x68>)
 80027e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80027e8:	6013      	str	r3, [r2, #0]
    NVIC_EN[QK_USE_IRQ_NUM >> 5U] = (1U << (QK_USE_IRQ_NUM & 0x1FU));
#endif                  //--------- QK IRQ specified

#ifdef __ARM_FP         //--------- if VFP available...
    // make sure that the FPU is enabled by setting CP10 & CP11 Full Access
    SCB_CPACR = (SCB_CPACR | ((3UL << 20U) | (3UL << 22U)));
 80027ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002814 <QK_init+0x6c>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a09      	ldr	r2, [pc, #36]	@ (8002814 <QK_init+0x6c>)
 80027f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80027f4:	6013      	str	r3, [r2, #0]

    // FPU automatic state preservation (ASPEN) lazy stacking (LSPEN)
    FPU_FPCCR = (FPU_FPCCR | (1U << 30U) | (1U << 31U));
 80027f6:	4b08      	ldr	r3, [pc, #32]	@ (8002818 <QK_init+0x70>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a07      	ldr	r2, [pc, #28]	@ (8002818 <QK_init+0x70>)
 80027fc:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8002800:	6013      	str	r3, [r2, #0]
#endif                  //--------- VFP available
}
 8002802:	bf00      	nop
 8002804:	370c      	adds	r7, #12
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	e000ed20 	.word	0xe000ed20
 8002814:	e000ed88 	.word	0xe000ed88
 8002818:	e000ef34 	.word	0xe000ef34

0800281c <PendSV_Handler>:
// The inline GNU assembler does not accept mnemonics MOVS, LSRS and ADDS,
// but for ARMv6-M the mnemonics MOV, LSR and ADD always set the condition
// flags in the PSR.
__attribute__ ((naked, optimize("-fno-stack-protector")))
void PendSV_Handler(void) {
__asm volatile (
 800281c:	b501      	push	{r0, lr}
 800281e:	480c      	ldr	r0, [pc, #48]	@ (8002850 <PendSV_Handler+0x34>)
 8002820:	4780      	blx	r0
 8002822:	4a0c      	ldr	r2, [pc, #48]	@ (8002854 <PendSV_Handler+0x38>)
 8002824:	f04f 0101 	mov.w	r1, #1
 8002828:	ea4f 61c1 	mov.w	r1, r1, lsl #27
 800282c:	6011      	str	r1, [r2, #0]
 800282e:	ea4f 03d1 	mov.w	r3, r1, lsr #3
 8002832:	4a09      	ldr	r2, [pc, #36]	@ (8002858 <PendSV_Handler+0x3c>)
 8002834:	f1a2 0201 	sub.w	r2, r2, #1
 8002838:	4908      	ldr	r1, [pc, #32]	@ (800285c <PendSV_Handler+0x40>)
 800283a:	b088      	sub	sp, #32
 800283c:	a805      	add	r0, sp, #20
 800283e:	c00e      	stmia	r0!, {r1, r2, r3}
 8002840:	f04f 0006 	mov.w	r0, #6
 8002844:	ea6f 0000 	mvn.w	r0, r0
 8002848:	f3bf 8f4f 	dsb	sy
 800284c:	4700      	bx	r0
#if (__ARM_ARCH != 6)   //--------- if ARMv7-M and higher...
    "  DSB                      \n" // ARM Erratum 838869
#endif                  //--------- ARMv7-M and higher
    "  BX      r0               \n" // exception-return to the QK activator
    );
}
 800284e:	bf00      	nop
 8002850:	08002719 	.word	0x08002719
 8002854:	e000ed04 	.word	0xe000ed04
 8002858:	08004005 	.word	0x08004005
 800285c:	08002861 	.word	0x08002861

08002860 <QK_thread_ret>:
//
// NOTE: QK_thread_ret does not execute in the PendSV context!
// NOTE: QK_thread_ret is entered with interrupts DISABLED.
__attribute__ ((naked, used, optimize("-fno-stack-protector")))
void QK_thread_ret(void) {
__asm volatile (
 8002860:	f3ef 8014 	mrs	r0, CONTROL
 8002864:	f020 0004 	bic.w	r0, r0, #4
 8002868:	f380 8814 	msr	CONTROL, r0
 800286c:	f3bf 8f6f 	isb	sy
 8002870:	4803      	ldr	r0, [pc, #12]	@ (8002880 <QK_thread_ret+0x20>)
 8002872:	f04f 0101 	mov.w	r1, #1
 8002876:	ea4f 71c1 	mov.w	r1, r1, lsl #31
 800287a:	6001      	str	r1, [r0, #0]
 800287c:	e7fe      	b.n	800287c <QK_thread_ret+0x1c>
#endif                  //--------- use IRQ

    // NOTE! interrupts are still disabled when NMI is used
    "  B       .                \n" // wait for preemption by NMI/IRQ
    );
}
 800287e:	bf00      	nop
 8002880:	e000ed04 	.word	0xe000ed04

08002884 <NMI_Handler>:
__attribute__ ((naked, optimize("-fno-stack-protector")))
#ifndef QK_USE_IRQ_NUM  //--------- IRQ NOT defined, use NMI by default

// NOTE: The NMI_Handler() is entered with interrupts still DISABLED!
void NMI_Handler(void) {
__asm volatile (
 8002884:	4802      	ldr	r0, [pc, #8]	@ (8002890 <NMI_Handler+0xc>)
 8002886:	4780      	blx	r0
// NOTE: The IRQ Handler is entered with interrupts already ENABLED
void QK_USE_IRQ_HANDLER(void) {
#endif                  //--------- use IRQ

  // ...continue here from either NMI_Handler() or IRQ_Handler()
__asm volatile (
 8002888:	b008      	add	sp, #32
 800288a:	bd01      	pop	{r0, pc}
    "  ADD     sp,sp,#(8*4)     \n" // remove one 8-register exception frame
    "  POP     {r0,pc}          \n" // pop stack aligner and EXC_RETURN to pc
    );
}
 800288c:	bf00      	nop
 800288e:	0000      	.short	0x0000
 8002890:	0800273d 	.word	0x0800273d

08002894 <QEvt_verify_>:
}

// private:

//! @private @memberof QEvt
static inline bool QEvt_verify_(QEvt const * const me) {
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
    return (me != (QEvt const *)0)
           && ((me->evtTag_ & 0xF0U) == QEVT_MARKER);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d007      	beq.n	80028b2 <QEvt_verify_+0x1e>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	78db      	ldrb	r3, [r3, #3]
 80028a6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80028aa:	2be0      	cmp	r3, #224	@ 0xe0
 80028ac:	d101      	bne.n	80028b2 <QEvt_verify_+0x1e>
 80028ae:	2301      	movs	r3, #1
 80028b0:	e000      	b.n	80028b4 <QEvt_verify_+0x20>
 80028b2:	2300      	movs	r3, #0
 80028b4:	f003 0301 	and.w	r3, r3, #1
 80028b8:	b2db      	uxtb	r3, r3
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	370c      	adds	r7, #12
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
	...

080028c8 <QHsm_ctor>:

//${QEP::QHsm::ctor} .........................................................
//! @protected @memberof QHsm
void QHsm_ctor(QHsm * const me,
    QStateHandler const initial)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	6039      	str	r1, [r7, #0]
    #ifdef Q_SPY
        ,&QHsm_getStateHandler_
    #endif
    };
    // do not call the QAsm_ctor() here
    me->super.vptr      = &vtable;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4a06      	ldr	r2, [pc, #24]	@ (80028f0 <QHsm_ctor+0x28>)
 80028d6:	601a      	str	r2, [r3, #0]
    me->super.state.fun = Q_STATE_CAST(&QHsm_top);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	4a06      	ldr	r2, [pc, #24]	@ (80028f4 <QHsm_ctor+0x2c>)
 80028dc:	605a      	str	r2, [r3, #4]
    me->super.temp.fun  = initial;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	683a      	ldr	r2, [r7, #0]
 80028e2:	609a      	str	r2, [r3, #8]
}
 80028e4:	bf00      	nop
 80028e6:	370c      	adds	r7, #12
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr
 80028f0:	08004d38 	.word	0x08004d38
 80028f4:	08002f11 	.word	0x08002f11

080028f8 <QHsm_init_>:
//! @private @memberof QHsm
void QHsm_init_(
    QAsm * const me,
    void const * const e,
    uint_fast8_t const qsId)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b08e      	sub	sp, #56	@ 0x38
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	607a      	str	r2, [r7, #4]
    }
    #else
    Q_UNUSED_PAR(qsId);
    #endif

    QStateHandler t = me->state.fun;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	637b      	str	r3, [r7, #52]	@ 0x34

    QF_CRIT_ENTRY();
 800290a:	f7ff ff29 	bl	8002760 <QF_crit_entry_>
    Q_REQUIRE_INCRIT(200, (me->vptr != (struct QAsmVtable *)0)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d007      	beq.n	8002926 <QHsm_init_+0x2e>
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d003      	beq.n	8002926 <QHsm_init_+0x2e>
 800291e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002920:	4a45      	ldr	r2, [pc, #276]	@ (8002a38 <QHsm_init_+0x140>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d003      	beq.n	800292e <QHsm_init_+0x36>
 8002926:	21c8      	movs	r1, #200	@ 0xc8
 8002928:	4844      	ldr	r0, [pc, #272]	@ (8002a3c <QHsm_init_+0x144>)
 800292a:	f7fd ffd3 	bl	80008d4 <Q_onError>
                      && (me->temp.fun != Q_STATE_CAST(0))
                      && (t == Q_STATE_CAST(&QHsm_top)));
    QF_CRIT_EXIT();
 800292e:	f7ff ff29 	bl	8002784 <QF_crit_exit_>

    // execute the top-most initial tran.
    QState r = (*me->temp.fun)(me, Q_EVT_CAST(QEvt));
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	68b9      	ldr	r1, [r7, #8]
 8002938:	68f8      	ldr	r0, [r7, #12]
 800293a:	4798      	blx	r3
 800293c:	4603      	mov	r3, r0
 800293e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

    QF_CRIT_ENTRY();
 8002942:	f7ff ff0d 	bl	8002760 <QF_crit_entry_>
    // the top-most initial tran. must be taken
    Q_ASSERT_INCRIT(210, r == Q_RET_TRAN);
 8002946:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800294a:	2b08      	cmp	r3, #8
 800294c:	d003      	beq.n	8002956 <QHsm_init_+0x5e>
 800294e:	21d2      	movs	r1, #210	@ 0xd2
 8002950:	483a      	ldr	r0, [pc, #232]	@ (8002a3c <QHsm_init_+0x144>)
 8002952:	f7fd ffbf 	bl	80008d4 <Q_onError>
        QS_FUN_PRE_(t);            // the source state
        QS_FUN_PRE_(me->temp.fun); // the target of the initial tran.
    QS_END_PRE_()
    QS_MEM_APP();

    QF_CRIT_EXIT();
 8002956:	f7ff ff15 	bl	8002784 <QF_crit_exit_>

    // drill down into the state hierarchy with initial transitions...
    int_fast8_t limit = QHSM_MAX_NEST_DEPTH_; // loop hard limit
 800295a:	2306      	movs	r3, #6
 800295c:	633b      	str	r3, [r7, #48]	@ 0x30
    do {
        QStateHandler path[QHSM_MAX_NEST_DEPTH_]; // tran entry path array
        int_fast8_t ip = 0; // tran entry path index
 800295e:	2300      	movs	r3, #0
 8002960:	62fb      	str	r3, [r7, #44]	@ 0x2c

        path[0] = me->temp.fun;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	613b      	str	r3, [r7, #16]
        (void)QHSM_RESERVED_EVT_(me->temp.fun, Q_EMPTY_SIG);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	4934      	ldr	r1, [pc, #208]	@ (8002a40 <QHsm_init_+0x148>)
 800296e:	68f8      	ldr	r0, [r7, #12]
 8002970:	4798      	blx	r3
        while ((me->temp.fun != t) && (ip < (QHSM_MAX_NEST_DEPTH_ - 1))) {
 8002972:	e00f      	b.n	8002994 <QHsm_init_+0x9c>
            ++ip;
 8002974:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002976:	3301      	adds	r3, #1
 8002978:	62fb      	str	r3, [r7, #44]	@ 0x2c
            path[ip] = me->temp.fun;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	689a      	ldr	r2, [r3, #8]
 800297e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	3338      	adds	r3, #56	@ 0x38
 8002984:	443b      	add	r3, r7
 8002986:	f843 2c28 	str.w	r2, [r3, #-40]
            (void)QHSM_RESERVED_EVT_(me->temp.fun, Q_EMPTY_SIG);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	492c      	ldr	r1, [pc, #176]	@ (8002a40 <QHsm_init_+0x148>)
 8002990:	68f8      	ldr	r0, [r7, #12]
 8002992:	4798      	blx	r3
        while ((me->temp.fun != t) && (ip < (QHSM_MAX_NEST_DEPTH_ - 1))) {
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800299a:	429a      	cmp	r2, r3
 800299c:	d002      	beq.n	80029a4 <QHsm_init_+0xac>
 800299e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029a0:	2b04      	cmp	r3, #4
 80029a2:	dde7      	ble.n	8002974 <QHsm_init_+0x7c>
        }
        QF_CRIT_ENTRY();
 80029a4:	f7ff fedc 	bl	8002760 <QF_crit_entry_>
        // The initial transition source state must be reached
        // Too many state nesting levels or "malformed" HSM.
        Q_ASSERT_INCRIT(220, me->temp.fun == t);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d003      	beq.n	80029ba <QHsm_init_+0xc2>
 80029b2:	21dc      	movs	r1, #220	@ 0xdc
 80029b4:	4821      	ldr	r0, [pc, #132]	@ (8002a3c <QHsm_init_+0x144>)
 80029b6:	f7fd ff8d 	bl	80008d4 <Q_onError>
        QF_CRIT_EXIT();
 80029ba:	f7ff fee3 	bl	8002784 <QF_crit_exit_>

        me->temp.fun = path[0];
 80029be:	693a      	ldr	r2, [r7, #16]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	609a      	str	r2, [r3, #8]

        // retrace the entry path in reverse (desired) order...
        do {
            // enter path[ip]
            if (QHSM_RESERVED_EVT_(path[ip], Q_ENTRY_SIG)
 80029c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	3338      	adds	r3, #56	@ 0x38
 80029ca:	443b      	add	r3, r7
 80029cc:	f853 3c28 	ldr.w	r3, [r3, #-40]
 80029d0:	491c      	ldr	r1, [pc, #112]	@ (8002a44 <QHsm_init_+0x14c>)
 80029d2:	68f8      	ldr	r0, [r7, #12]
 80029d4:	4798      	blx	r3
                == Q_RET_HANDLED)
            {
                QS_STATE_ENTRY_(path[ip], qsId);
            }
            --ip;
 80029d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029d8:	3b01      	subs	r3, #1
 80029da:	62fb      	str	r3, [r7, #44]	@ 0x2c
        } while (ip >= 0);
 80029dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029de:	2b00      	cmp	r3, #0
 80029e0:	daf0      	bge.n	80029c4 <QHsm_init_+0xcc>

        t = path[0]; // current state becomes the new source
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	637b      	str	r3, [r7, #52]	@ 0x34

        r = QHSM_RESERVED_EVT_(t, Q_INIT_SIG); // execute initial tran.
 80029e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029e8:	4917      	ldr	r1, [pc, #92]	@ (8002a48 <QHsm_init_+0x150>)
 80029ea:	68f8      	ldr	r0, [r7, #12]
 80029ec:	4798      	blx	r3
 80029ee:	4603      	mov	r3, r0
 80029f0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
            QS_MEM_APP();
            QS_CRIT_EXIT();
        }
    #endif // Q_SPY

        --limit;
 80029f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029f6:	3b01      	subs	r3, #1
 80029f8:	633b      	str	r3, [r7, #48]	@ 0x30
    } while ((r == Q_RET_TRAN) && (limit > 0));
 80029fa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80029fe:	2b08      	cmp	r3, #8
 8002a00:	d102      	bne.n	8002a08 <QHsm_init_+0x110>
 8002a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	dcaa      	bgt.n	800295e <QHsm_init_+0x66>

    QF_CRIT_ENTRY();
 8002a08:	f7ff feaa 	bl	8002760 <QF_crit_entry_>
    // Loop limit must not be reached.
    // Too many state nesting levels or likely "malformed" HSM
    Q_ENSURE_INCRIT(290, limit > 0);
 8002a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	dc04      	bgt.n	8002a1c <QHsm_init_+0x124>
 8002a12:	f44f 7191 	mov.w	r1, #290	@ 0x122
 8002a16:	4809      	ldr	r0, [pc, #36]	@ (8002a3c <QHsm_init_+0x144>)
 8002a18:	f7fd ff5c 	bl	80008d4 <Q_onError>
        QS_OBJ_PRE_(me);   // this state machine object
        QS_FUN_PRE_(t);    // the new active state
    QS_END_PRE_()
    QS_MEM_APP();

    QF_CRIT_EXIT();
 8002a1c:	f7ff feb2 	bl	8002784 <QF_crit_exit_>

    me->state.fun = t;   // change the current active state
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002a24:	605a      	str	r2, [r3, #4]
    #ifndef Q_UNSAFE
    me->temp.uint = ~me->state.uint;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	43da      	mvns	r2, r3
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	609a      	str	r2, [r3, #8]
    #endif
}
 8002a30:	bf00      	nop
 8002a32:	3738      	adds	r7, #56	@ 0x38
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	08002f11 	.word	0x08002f11
 8002a3c:	08004d20 	.word	0x08004d20
 8002a40:	08004d28 	.word	0x08004d28
 8002a44:	08004d2c 	.word	0x08004d2c
 8002a48:	08004d34 	.word	0x08004d34

08002a4c <QHsm_dispatch_>:
//! @private @memberof QHsm
void QHsm_dispatch_(
    QAsm * const me,
    QEvt const * const e,
    uint_fast8_t const qsId)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b090      	sub	sp, #64	@ 0x40
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	60b9      	str	r1, [r7, #8]
 8002a56:	607a      	str	r2, [r7, #4]
    #ifndef Q_SPY
    Q_UNUSED_PAR(qsId);
    #endif

    QStateHandler s = me->state.fun;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    QStateHandler t = s;
 8002a5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a60:	63fb      	str	r3, [r7, #60]	@ 0x3c
    QF_CRIT_STAT

    QF_CRIT_ENTRY();
 8002a62:	f7ff fe7d 	bl	8002760 <QF_crit_entry_>
    Q_REQUIRE_INCRIT(300, (s != Q_STATE_CAST(0))
 8002a66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d006      	beq.n	8002a7a <QHsm_dispatch_+0x2e>
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	685a      	ldr	r2, [r3, #4]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	43db      	mvns	r3, r3
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d004      	beq.n	8002a84 <QHsm_dispatch_+0x38>
 8002a7a:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8002a7e:	4874      	ldr	r0, [pc, #464]	@ (8002c50 <QHsm_dispatch_+0x204>)
 8002a80:	f7fd ff28 	bl	80008d4 <Q_onError>
        && (me->state.uint == (uintptr_t)(~me->temp.uint)));
    Q_REQUIRE_INCRIT(302, QEvt_verify_(e));
 8002a84:	68b8      	ldr	r0, [r7, #8]
 8002a86:	f7ff ff05 	bl	8002894 <QEvt_verify_>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d104      	bne.n	8002a9a <QHsm_dispatch_+0x4e>
 8002a90:	f44f 7197 	mov.w	r1, #302	@ 0x12e
 8002a94:	486e      	ldr	r0, [pc, #440]	@ (8002c50 <QHsm_dispatch_+0x204>)
 8002a96:	f7fd ff1d 	bl	80008d4 <Q_onError>
        QS_OBJ_PRE_(me);     // this state machine object
        QS_FUN_PRE_(s);      // the current state
    QS_END_PRE_()
    QS_MEM_APP();

    QF_CRIT_EXIT();
 8002a9a:	f7ff fe73 	bl	8002784 <QF_crit_exit_>

    // process the event hierarchically...
    QState r;
    me->temp.fun = s;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002aa2:	609a      	str	r2, [r3, #8]
    int_fast8_t limit = QHSM_MAX_NEST_DEPTH_; // loop hard limit
 8002aa4:	2306      	movs	r3, #6
 8002aa6:	637b      	str	r3, [r7, #52]	@ 0x34
    do {
        s = me->temp.fun;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	62fb      	str	r3, [r7, #44]	@ 0x2c
        r = (*s)(me, e); // invoke state handler s
 8002aae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ab0:	68b9      	ldr	r1, [r7, #8]
 8002ab2:	68f8      	ldr	r0, [r7, #12]
 8002ab4:	4798      	blx	r3
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

        if (r == Q_RET_UNHANDLED) { // unhandled due to a guard?
 8002abc:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d106      	bne.n	8002ad2 <QHsm_dispatch_+0x86>
                QS_FUN_PRE_(s);      // the current state
            QS_END_PRE_()
            QS_MEM_APP();
            QS_CRIT_EXIT();

            r = QHSM_RESERVED_EVT_(s, Q_EMPTY_SIG); // superstate of s
 8002ac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ac6:	4963      	ldr	r1, [pc, #396]	@ (8002c54 <QHsm_dispatch_+0x208>)
 8002ac8:	68f8      	ldr	r0, [r7, #12]
 8002aca:	4798      	blx	r3
 8002acc:	4603      	mov	r3, r0
 8002ace:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
        }

        --limit;
 8002ad2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ad4:	3b01      	subs	r3, #1
 8002ad6:	637b      	str	r3, [r7, #52]	@ 0x34
    } while ((r == Q_RET_SUPER) && (limit > 0));
 8002ad8:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d102      	bne.n	8002ae6 <QHsm_dispatch_+0x9a>
 8002ae0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	dce0      	bgt.n	8002aa8 <QHsm_dispatch_+0x5c>

    QF_CRIT_ENTRY();
 8002ae6:	f7ff fe3b 	bl	8002760 <QF_crit_entry_>
    Q_ASSERT_INCRIT(310, limit > 0);
 8002aea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	dc04      	bgt.n	8002afa <QHsm_dispatch_+0xae>
 8002af0:	f44f 719b 	mov.w	r1, #310	@ 0x136
 8002af4:	4856      	ldr	r0, [pc, #344]	@ (8002c50 <QHsm_dispatch_+0x204>)
 8002af6:	f7fd feed 	bl	80008d4 <Q_onError>
    QF_CRIT_EXIT();
 8002afa:	f7ff fe43 	bl	8002784 <QF_crit_exit_>

    if (r >= Q_RET_TRAN) { // regular tran. taken?
 8002afe:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8002b02:	2b07      	cmp	r3, #7
 8002b04:	f240 8098 	bls.w	8002c38 <QHsm_dispatch_+0x1ec>
        QStateHandler path[QHSM_MAX_NEST_DEPTH_];

        path[0] = me->temp.fun; // tran. target
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	617b      	str	r3, [r7, #20]
        path[1] = t; // current state
 8002b0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b10:	61bb      	str	r3, [r7, #24]
        path[2] = s; // tran. source
 8002b12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b14:	61fb      	str	r3, [r7, #28]

        // exit current state to tran. source s...
        limit = QHSM_MAX_NEST_DEPTH_; // loop hard limit
 8002b16:	2306      	movs	r3, #6
 8002b18:	637b      	str	r3, [r7, #52]	@ 0x34
        for (; (t != s) && (limit > 0); t = me->temp.fun) {
 8002b1a:	e010      	b.n	8002b3e <QHsm_dispatch_+0xf2>
            // exit from t
            if (QHSM_RESERVED_EVT_(t, Q_EXIT_SIG) == Q_RET_HANDLED) {
 8002b1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b1e:	494e      	ldr	r1, [pc, #312]	@ (8002c58 <QHsm_dispatch_+0x20c>)
 8002b20:	68f8      	ldr	r0, [r7, #12]
 8002b22:	4798      	blx	r3
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b03      	cmp	r3, #3
 8002b28:	d103      	bne.n	8002b32 <QHsm_dispatch_+0xe6>
                QS_STATE_EXIT_(t, qsId);
                // find superstate of t
                (void)QHSM_RESERVED_EVT_(t, Q_EMPTY_SIG);
 8002b2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b2c:	4949      	ldr	r1, [pc, #292]	@ (8002c54 <QHsm_dispatch_+0x208>)
 8002b2e:	68f8      	ldr	r0, [r7, #12]
 8002b30:	4798      	blx	r3
            }
            --limit;
 8002b32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b34:	3b01      	subs	r3, #1
 8002b36:	637b      	str	r3, [r7, #52]	@ 0x34
        for (; (t != s) && (limit > 0); t = me->temp.fun) {
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b3e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002b40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d002      	beq.n	8002b4c <QHsm_dispatch_+0x100>
 8002b46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	dce7      	bgt.n	8002b1c <QHsm_dispatch_+0xd0>
        }
        QF_CRIT_ENTRY();
 8002b4c:	f7ff fe08 	bl	8002760 <QF_crit_entry_>
        Q_ASSERT_INCRIT(320, limit > 0);
 8002b50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	dc04      	bgt.n	8002b60 <QHsm_dispatch_+0x114>
 8002b56:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8002b5a:	483d      	ldr	r0, [pc, #244]	@ (8002c50 <QHsm_dispatch_+0x204>)
 8002b5c:	f7fd feba 	bl	80008d4 <Q_onError>
        QF_CRIT_EXIT();
 8002b60:	f7ff fe10 	bl	8002784 <QF_crit_exit_>

        int_fast8_t ip = QHsm_tran_(me, path, qsId); // take the tran.
 8002b64:	f107 0314 	add.w	r3, r7, #20
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	68f8      	ldr	r0, [r7, #12]
 8002b6e:	f000 f8cb 	bl	8002d08 <QHsm_tran_>
 8002b72:	6338      	str	r0, [r7, #48]	@ 0x30
            QS_CRIT_EXIT();
        }
    #endif // Q_SPY

        // execute state entry actions in the desired order...
        for (; ip >= 0; --ip) {
 8002b74:	e00b      	b.n	8002b8e <QHsm_dispatch_+0x142>
            // enter path[ip]
            if (QHSM_RESERVED_EVT_(path[ip], Q_ENTRY_SIG)
 8002b76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	3340      	adds	r3, #64	@ 0x40
 8002b7c:	443b      	add	r3, r7
 8002b7e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002b82:	4936      	ldr	r1, [pc, #216]	@ (8002c5c <QHsm_dispatch_+0x210>)
 8002b84:	68f8      	ldr	r0, [r7, #12]
 8002b86:	4798      	blx	r3
        for (; ip >= 0; --ip) {
 8002b88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	daf0      	bge.n	8002b76 <QHsm_dispatch_+0x12a>
                == Q_RET_HANDLED)
            {
                QS_STATE_ENTRY_(path[ip], qsId);
            }
        }
        t = path[0];      // stick the target into register
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        me->temp.fun = t; // update the next state
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002b9c:	609a      	str	r2, [r3, #8]

        // drill into the target hierarchy...
        while (QHSM_RESERVED_EVT_(t, Q_INIT_SIG) == Q_RET_TRAN) {
 8002b9e:	e044      	b.n	8002c2a <QHsm_dispatch_+0x1de>
                QS_FUN_PRE_(me->temp.fun); // the target of the tran.
            QS_END_PRE_()
            QS_MEM_APP();
            QS_CRIT_EXIT();

            ip = 0;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	633b      	str	r3, [r7, #48]	@ 0x30
            path[0] = me->temp.fun;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	617b      	str	r3, [r7, #20]

            // find superstate
            (void)QHSM_RESERVED_EVT_(me->temp.fun, Q_EMPTY_SIG);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	4929      	ldr	r1, [pc, #164]	@ (8002c54 <QHsm_dispatch_+0x208>)
 8002bb0:	68f8      	ldr	r0, [r7, #12]
 8002bb2:	4798      	blx	r3

            while ((me->temp.fun != t) && (ip < (QHSM_MAX_NEST_DEPTH_ - 1))) {
 8002bb4:	e00f      	b.n	8002bd6 <QHsm_dispatch_+0x18a>
                ++ip;
 8002bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bb8:	3301      	adds	r3, #1
 8002bba:	633b      	str	r3, [r7, #48]	@ 0x30
                path[ip] = me->temp.fun;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	689a      	ldr	r2, [r3, #8]
 8002bc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	3340      	adds	r3, #64	@ 0x40
 8002bc6:	443b      	add	r3, r7
 8002bc8:	f843 2c2c 	str.w	r2, [r3, #-44]
                // find superstate
                (void)QHSM_RESERVED_EVT_(me->temp.fun, Q_EMPTY_SIG);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	4920      	ldr	r1, [pc, #128]	@ (8002c54 <QHsm_dispatch_+0x208>)
 8002bd2:	68f8      	ldr	r0, [r7, #12]
 8002bd4:	4798      	blx	r3
            while ((me->temp.fun != t) && (ip < (QHSM_MAX_NEST_DEPTH_ - 1))) {
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d002      	beq.n	8002be6 <QHsm_dispatch_+0x19a>
 8002be0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002be2:	2b04      	cmp	r3, #4
 8002be4:	dde7      	ble.n	8002bb6 <QHsm_dispatch_+0x16a>
            }
            QF_CRIT_ENTRY();
 8002be6:	f7ff fdbb 	bl	8002760 <QF_crit_entry_>
            // The initial transition source state must be reached.
            // Too many state nesting levels or "malformed" HSM.
            Q_ASSERT_INCRIT(330, me->temp.fun == t);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d004      	beq.n	8002bfe <QHsm_dispatch_+0x1b2>
 8002bf4:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 8002bf8:	4815      	ldr	r0, [pc, #84]	@ (8002c50 <QHsm_dispatch_+0x204>)
 8002bfa:	f7fd fe6b 	bl	80008d4 <Q_onError>
            QF_CRIT_EXIT();
 8002bfe:	f7ff fdc1 	bl	8002784 <QF_crit_exit_>

            me->temp.fun = path[0];
 8002c02:	697a      	ldr	r2, [r7, #20]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	609a      	str	r2, [r3, #8]

            // retrace the entry path in reverse (correct) order...
            do {
                // enter path[ip]
                if (QHSM_RESERVED_EVT_(path[ip], Q_ENTRY_SIG)
 8002c08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	3340      	adds	r3, #64	@ 0x40
 8002c0e:	443b      	add	r3, r7
 8002c10:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002c14:	4911      	ldr	r1, [pc, #68]	@ (8002c5c <QHsm_dispatch_+0x210>)
 8002c16:	68f8      	ldr	r0, [r7, #12]
 8002c18:	4798      	blx	r3
                    == Q_RET_HANDLED)
                {
                    QS_STATE_ENTRY_(path[ip], qsId);
                }
                --ip;
 8002c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c1c:	3b01      	subs	r3, #1
 8002c1e:	633b      	str	r3, [r7, #48]	@ 0x30
            } while (ip >= 0);
 8002c20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	daf0      	bge.n	8002c08 <QHsm_dispatch_+0x1bc>

            t = path[0]; // current state becomes the new source
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        while (QHSM_RESERVED_EVT_(t, Q_INIT_SIG) == Q_RET_TRAN) {
 8002c2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c2c:	490c      	ldr	r1, [pc, #48]	@ (8002c60 <QHsm_dispatch_+0x214>)
 8002c2e:	68f8      	ldr	r0, [r7, #12]
 8002c30:	4798      	blx	r3
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b08      	cmp	r3, #8
 8002c36:	d0b3      	beq.n	8002ba0 <QHsm_dispatch_+0x154>
        QS_MEM_APP();
        QS_CRIT_EXIT();
    }
    #endif // Q_SPY

    me->state.fun = t; // change the current active state
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002c3c:	605a      	str	r2, [r3, #4]
    #ifndef Q_UNSAFE
    me->temp.uint = ~me->state.uint;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	43da      	mvns	r2, r3
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	609a      	str	r2, [r3, #8]
    #endif
}
 8002c48:	bf00      	nop
 8002c4a:	3740      	adds	r7, #64	@ 0x40
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	08004d20 	.word	0x08004d20
 8002c54:	08004d28 	.word	0x08004d28
 8002c58:	08004d30 	.word	0x08004d30
 8002c5c:	08004d2c 	.word	0x08004d2c
 8002c60:	08004d34 	.word	0x08004d34

08002c64 <QHsm_isIn_>:
//${QEP::QHsm::isIn_} ........................................................
//! @private @memberof QHsm
bool QHsm_isIn_(
    QAsm * const me,
    QStateHandler const state)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b086      	sub	sp, #24
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	6039      	str	r1, [r7, #0]
    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 8002c6e:	f7ff fd77 	bl	8002760 <QF_crit_entry_>
    Q_REQUIRE_INCRIT(602, me->state.uint
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685a      	ldr	r2, [r3, #4]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	43db      	mvns	r3, r3
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d004      	beq.n	8002c8a <QHsm_isIn_+0x26>
 8002c80:	f240 215a 	movw	r1, #602	@ 0x25a
 8002c84:	481e      	ldr	r0, [pc, #120]	@ (8002d00 <QHsm_isIn_+0x9c>)
 8002c86:	f7fd fe25 	bl	80008d4 <Q_onError>
                      == (uintptr_t)(~me->temp.uint));
    QF_CRIT_EXIT();
 8002c8a:	f7ff fd7b 	bl	8002784 <QF_crit_exit_>

    bool inState = false; // assume that this HSM is not in 'state'
 8002c8e:	2300      	movs	r3, #0
 8002c90:	75fb      	strb	r3, [r7, #23]

    // scan the state hierarchy bottom-up
    QStateHandler s = me->state.fun;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	613b      	str	r3, [r7, #16]
    int_fast8_t limit = QHSM_MAX_NEST_DEPTH_ + 1; // loop hard limit
 8002c98:	2307      	movs	r3, #7
 8002c9a:	60fb      	str	r3, [r7, #12]
    QState r = Q_RET_SUPER;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	72fb      	strb	r3, [r7, #11]
    for (; (r != Q_RET_IGNORED) && (limit > 0); --limit) {
 8002ca0:	e012      	b.n	8002cc8 <QHsm_isIn_+0x64>
        if (s == state) { // do the states match?
 8002ca2:	693a      	ldr	r2, [r7, #16]
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d102      	bne.n	8002cb0 <QHsm_isIn_+0x4c>
            inState = true;  // 'true' means that match found
 8002caa:	2301      	movs	r3, #1
 8002cac:	75fb      	strb	r3, [r7, #23]
            break; // break out of the for-loop
 8002cae:	e011      	b.n	8002cd4 <QHsm_isIn_+0x70>
        }
        else {
            r = QHSM_RESERVED_EVT_(s, Q_EMPTY_SIG);
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	4914      	ldr	r1, [pc, #80]	@ (8002d04 <QHsm_isIn_+0xa0>)
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	4798      	blx	r3
 8002cb8:	4603      	mov	r3, r0
 8002cba:	72fb      	strb	r3, [r7, #11]
            s = me->temp.fun;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	613b      	str	r3, [r7, #16]
    for (; (r != Q_RET_IGNORED) && (limit > 0); --limit) {
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	3b01      	subs	r3, #1
 8002cc6:	60fb      	str	r3, [r7, #12]
 8002cc8:	7afb      	ldrb	r3, [r7, #11]
 8002cca:	2b04      	cmp	r3, #4
 8002ccc:	d002      	beq.n	8002cd4 <QHsm_isIn_+0x70>
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	dce6      	bgt.n	8002ca2 <QHsm_isIn_+0x3e>
        }
    }

    QF_CRIT_ENTRY();
 8002cd4:	f7ff fd44 	bl	8002760 <QF_crit_entry_>
    Q_ENSURE_INCRIT(690, limit > 0);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	dc04      	bgt.n	8002ce8 <QHsm_isIn_+0x84>
 8002cde:	f240 21b2 	movw	r1, #690	@ 0x2b2
 8002ce2:	4807      	ldr	r0, [pc, #28]	@ (8002d00 <QHsm_isIn_+0x9c>)
 8002ce4:	f7fd fdf6 	bl	80008d4 <Q_onError>
    QF_CRIT_EXIT();
 8002ce8:	f7ff fd4c 	bl	8002784 <QF_crit_exit_>

    #ifndef Q_UNSAFE
    me->temp.uint = ~me->state.uint;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	43da      	mvns	r2, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	609a      	str	r2, [r3, #8]
    #endif

    return inState; // return the status
 8002cf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3718      	adds	r7, #24
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	08004d20 	.word	0x08004d20
 8002d04:	08004d28 	.word	0x08004d28

08002d08 <QHsm_tran_>:
//! @private @memberof QHsm
int_fast8_t QHsm_tran_(
    QAsm * const me,
    QStateHandler * const path,
    uint_fast8_t const qsId)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b08a      	sub	sp, #40	@ 0x28
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	60b9      	str	r1, [r7, #8]
 8002d12:	607a      	str	r2, [r7, #4]
    #ifndef Q_SPY
    Q_UNUSED_PAR(qsId);
    #endif

    int_fast8_t ip = -1; // tran. entry path index
 8002d14:	f04f 33ff 	mov.w	r3, #4294967295
 8002d18:	627b      	str	r3, [r7, #36]	@ 0x24
    QStateHandler t = path[0];
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	623b      	str	r3, [r7, #32]
    QStateHandler const s = path[2];
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	613b      	str	r3, [r7, #16]
    QF_CRIT_STAT

    // (a) check source==target (tran. to self)...
    if (s == t) {
 8002d26:	693a      	ldr	r2, [r7, #16]
 8002d28:	6a3b      	ldr	r3, [r7, #32]
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d106      	bne.n	8002d3c <QHsm_tran_+0x34>
        // exit source s
        if (QHSM_RESERVED_EVT_(s, Q_EXIT_SIG) == Q_RET_HANDLED) {
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	4974      	ldr	r1, [pc, #464]	@ (8002f04 <QHsm_tran_+0x1fc>)
 8002d32:	68f8      	ldr	r0, [r7, #12]
 8002d34:	4798      	blx	r3
            QS_STATE_EXIT_(s, qsId);
        }
        ip = 0; // enter the target
 8002d36:	2300      	movs	r3, #0
 8002d38:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d3a:	e0d1      	b.n	8002ee0 <QHsm_tran_+0x1d8>
    }
    else {
        // find superstate of target
        (void)QHSM_RESERVED_EVT_(t, Q_EMPTY_SIG);
 8002d3c:	6a3b      	ldr	r3, [r7, #32]
 8002d3e:	4972      	ldr	r1, [pc, #456]	@ (8002f08 <QHsm_tran_+0x200>)
 8002d40:	68f8      	ldr	r0, [r7, #12]
 8002d42:	4798      	blx	r3

        t = me->temp.fun;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	623b      	str	r3, [r7, #32]

        // (b) check source==target->super...
        if (s == t) {
 8002d4a:	693a      	ldr	r2, [r7, #16]
 8002d4c:	6a3b      	ldr	r3, [r7, #32]
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d102      	bne.n	8002d58 <QHsm_tran_+0x50>
            ip = 0; // enter the target
 8002d52:	2300      	movs	r3, #0
 8002d54:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d56:	e0c3      	b.n	8002ee0 <QHsm_tran_+0x1d8>
        }
        else {
            // find superstate of src
            (void)QHSM_RESERVED_EVT_(s, Q_EMPTY_SIG);
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	496b      	ldr	r1, [pc, #428]	@ (8002f08 <QHsm_tran_+0x200>)
 8002d5c:	68f8      	ldr	r0, [r7, #12]
 8002d5e:	4798      	blx	r3

            // (c) check source->super==target->super...
            if (me->temp.fun == t) {
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	6a3a      	ldr	r2, [r7, #32]
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d106      	bne.n	8002d78 <QHsm_tran_+0x70>
                // exit source s
                if (QHSM_RESERVED_EVT_(s, Q_EXIT_SIG) == Q_RET_HANDLED) {
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	4965      	ldr	r1, [pc, #404]	@ (8002f04 <QHsm_tran_+0x1fc>)
 8002d6e:	68f8      	ldr	r0, [r7, #12]
 8002d70:	4798      	blx	r3
                    QS_STATE_EXIT_(s, qsId);
                }
                ip = 0; // enter the target
 8002d72:	2300      	movs	r3, #0
 8002d74:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d76:	e0b3      	b.n	8002ee0 <QHsm_tran_+0x1d8>
            }
            else {
                // (d) check source->super==target...
                if (me->temp.fun == path[0]) {
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	689a      	ldr	r2, [r3, #8]
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d104      	bne.n	8002d8e <QHsm_tran_+0x86>
                    // exit source s
                    if (QHSM_RESERVED_EVT_(s, Q_EXIT_SIG) == Q_RET_HANDLED) {
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	495f      	ldr	r1, [pc, #380]	@ (8002f04 <QHsm_tran_+0x1fc>)
 8002d88:	68f8      	ldr	r0, [r7, #12]
 8002d8a:	4798      	blx	r3
 8002d8c:	e0a8      	b.n	8002ee0 <QHsm_tran_+0x1d8>
                    }
                }
                else {
                    // (e) check rest of source==target->super->super..
                    // and store the entry path along the way
                    int_fast8_t iq = 0; // indicate that LCA was found
 8002d8e:	2300      	movs	r3, #0
 8002d90:	61fb      	str	r3, [r7, #28]
                    ip = 1; // enter target and its superstate
 8002d92:	2301      	movs	r3, #1
 8002d94:	627b      	str	r3, [r7, #36]	@ 0x24
                    path[1] = t;      // save the superstate of target
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	3304      	adds	r3, #4
 8002d9a:	6a3a      	ldr	r2, [r7, #32]
 8002d9c:	601a      	str	r2, [r3, #0]
                    t = me->temp.fun; // save source->super
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	623b      	str	r3, [r7, #32]

                    // find target->super->super...
                    QState r = QHSM_RESERVED_EVT_(path[1], Q_EMPTY_SIG);
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	3304      	adds	r3, #4
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4957      	ldr	r1, [pc, #348]	@ (8002f08 <QHsm_tran_+0x200>)
 8002dac:	68f8      	ldr	r0, [r7, #12]
 8002dae:	4798      	blx	r3
 8002db0:	4603      	mov	r3, r0
 8002db2:	76fb      	strb	r3, [r7, #27]
                    while ((r == Q_RET_SUPER)
 8002db4:	e01d      	b.n	8002df2 <QHsm_tran_+0xea>
                           && (ip < (QHSM_MAX_NEST_DEPTH_ - 1)))
                    {
                        ++ip;
 8002db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db8:	3301      	adds	r3, #1
 8002dba:	627b      	str	r3, [r7, #36]	@ 0x24
                        path[ip] = me->temp.fun; // store the entry path
 8002dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	68ba      	ldr	r2, [r7, #8]
 8002dc2:	4413      	add	r3, r2
 8002dc4:	68fa      	ldr	r2, [r7, #12]
 8002dc6:	6892      	ldr	r2, [r2, #8]
 8002dc8:	601a      	str	r2, [r3, #0]
                        if (me->temp.fun == s) { // is it the source?
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	693a      	ldr	r2, [r7, #16]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d107      	bne.n	8002de4 <QHsm_tran_+0xdc>
                            iq = 1; // indicate that the LCA found
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	61fb      	str	r3, [r7, #28]
                            --ip; // do not enter the source
 8002dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dda:	3b01      	subs	r3, #1
 8002ddc:	627b      	str	r3, [r7, #36]	@ 0x24
                            r = Q_RET_HANDLED; // terminate the loop
 8002dde:	2303      	movs	r3, #3
 8002de0:	76fb      	strb	r3, [r7, #27]
 8002de2:	e006      	b.n	8002df2 <QHsm_tran_+0xea>
                        }
                        else { // it is not the source, keep going up
                            r = QHSM_RESERVED_EVT_(me->temp.fun, Q_EMPTY_SIG);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	4947      	ldr	r1, [pc, #284]	@ (8002f08 <QHsm_tran_+0x200>)
 8002dea:	68f8      	ldr	r0, [r7, #12]
 8002dec:	4798      	blx	r3
 8002dee:	4603      	mov	r3, r0
 8002df0:	76fb      	strb	r3, [r7, #27]
                           && (ip < (QHSM_MAX_NEST_DEPTH_ - 1)))
 8002df2:	7efb      	ldrb	r3, [r7, #27]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d102      	bne.n	8002dfe <QHsm_tran_+0xf6>
 8002df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dfa:	2b04      	cmp	r3, #4
 8002dfc:	dddb      	ble.n	8002db6 <QHsm_tran_+0xae>
                        }
                    }
                    QF_CRIT_ENTRY();
 8002dfe:	f7ff fcaf 	bl	8002760 <QF_crit_entry_>
                    // Tran. source must be found within the nesting depth
                    // Too many state nesting levels or "malformed" HSM.
                    Q_ASSERT_INCRIT(510, r != Q_RET_SUPER);
 8002e02:	7efb      	ldrb	r3, [r7, #27]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d104      	bne.n	8002e12 <QHsm_tran_+0x10a>
 8002e08:	f44f 71ff 	mov.w	r1, #510	@ 0x1fe
 8002e0c:	483f      	ldr	r0, [pc, #252]	@ (8002f0c <QHsm_tran_+0x204>)
 8002e0e:	f7fd fd61 	bl	80008d4 <Q_onError>
                    QF_CRIT_EXIT();
 8002e12:	f7ff fcb7 	bl	8002784 <QF_crit_exit_>

                    // the LCA not found yet?
                    if (iq == 0) {
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d161      	bne.n	8002ee0 <QHsm_tran_+0x1d8>
                        // exit source s
                        if (QHSM_RESERVED_EVT_(s, Q_EXIT_SIG)
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	4939      	ldr	r1, [pc, #228]	@ (8002f04 <QHsm_tran_+0x1fc>)
 8002e20:	68f8      	ldr	r0, [r7, #12]
 8002e22:	4798      	blx	r3
                            QS_STATE_EXIT_(s, qsId);
                        }

                        // (f) check the rest of source->super
                        //                  == target->super->super...
                        iq = ip;
 8002e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e26:	61fb      	str	r3, [r7, #28]
                        r = Q_RET_IGNORED; // indicate that the LCA NOT found
 8002e28:	2304      	movs	r3, #4
 8002e2a:	76fb      	strb	r3, [r7, #27]
                        do {
                            if (t == path[iq]) { // is this the LCA?
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	68ba      	ldr	r2, [r7, #8]
 8002e32:	4413      	add	r3, r2
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	6a3a      	ldr	r2, [r7, #32]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d108      	bne.n	8002e4e <QHsm_tran_+0x146>
                                r = Q_RET_HANDLED; // indicate the LCA found
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	76fb      	strb	r3, [r7, #27]
                                ip = iq - 1; // do not enter the LCA
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	3b01      	subs	r3, #1
 8002e44:	627b      	str	r3, [r7, #36]	@ 0x24
                                iq = -1; // cause termination of the loop
 8002e46:	f04f 33ff 	mov.w	r3, #4294967295
 8002e4a:	61fb      	str	r3, [r7, #28]
 8002e4c:	e002      	b.n	8002e54 <QHsm_tran_+0x14c>
                            }
                            else {
                                --iq; // try lower superstate of target
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	3b01      	subs	r3, #1
 8002e52:	61fb      	str	r3, [r7, #28]
                            }
                        } while (iq >= 0);
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	dae8      	bge.n	8002e2c <QHsm_tran_+0x124>

                        // the LCA not found yet?
                        if (r != Q_RET_HANDLED) {
 8002e5a:	7efb      	ldrb	r3, [r7, #27]
 8002e5c:	2b03      	cmp	r3, #3
 8002e5e:	d03f      	beq.n	8002ee0 <QHsm_tran_+0x1d8>
                            // (g) check each source->super->...
                            // for each target->super...
                            r = Q_RET_IGNORED; // keep looping
 8002e60:	2304      	movs	r3, #4
 8002e62:	76fb      	strb	r3, [r7, #27]
                            int_fast8_t limit = QHSM_MAX_NEST_DEPTH_;
 8002e64:	2306      	movs	r3, #6
 8002e66:	617b      	str	r3, [r7, #20]
                            do {
                                // exit from t
                                if (QHSM_RESERVED_EVT_(t, Q_EXIT_SIG)
 8002e68:	6a3b      	ldr	r3, [r7, #32]
 8002e6a:	4926      	ldr	r1, [pc, #152]	@ (8002f04 <QHsm_tran_+0x1fc>)
 8002e6c:	68f8      	ldr	r0, [r7, #12]
 8002e6e:	4798      	blx	r3
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b03      	cmp	r3, #3
 8002e74:	d103      	bne.n	8002e7e <QHsm_tran_+0x176>
                                    == Q_RET_HANDLED)
                                {
                                    QS_STATE_EXIT_(t, qsId);
                                    // find superstate of t
                                    (void)QHSM_RESERVED_EVT_(t, Q_EMPTY_SIG);
 8002e76:	6a3b      	ldr	r3, [r7, #32]
 8002e78:	4923      	ldr	r1, [pc, #140]	@ (8002f08 <QHsm_tran_+0x200>)
 8002e7a:	68f8      	ldr	r0, [r7, #12]
 8002e7c:	4798      	blx	r3
                                }
                                t = me->temp.fun; // set to super of t
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	623b      	str	r3, [r7, #32]
                                iq = ip;
 8002e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e86:	61fb      	str	r3, [r7, #28]
                                do {
                                    // is this the LCA?
                                    if (t == path[iq]) {
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	68ba      	ldr	r2, [r7, #8]
 8002e8e:	4413      	add	r3, r2
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	6a3a      	ldr	r2, [r7, #32]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d108      	bne.n	8002eaa <QHsm_tran_+0x1a2>
                                        ip = iq - 1; // do not enter the LCA
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	3b01      	subs	r3, #1
 8002e9c:	627b      	str	r3, [r7, #36]	@ 0x24
                                        iq = -1;     // break out of inner loop
 8002e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8002ea2:	61fb      	str	r3, [r7, #28]
                                        r = Q_RET_HANDLED; // break outer loop
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	76fb      	strb	r3, [r7, #27]
 8002ea8:	e002      	b.n	8002eb0 <QHsm_tran_+0x1a8>
                                    }
                                    else {
                                        --iq;
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	3b01      	subs	r3, #1
 8002eae:	61fb      	str	r3, [r7, #28]
                                    }
                                } while (iq >= 0);
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	dae8      	bge.n	8002e88 <QHsm_tran_+0x180>

                                --limit;
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	3b01      	subs	r3, #1
 8002eba:	617b      	str	r3, [r7, #20]
                            } while ((r != Q_RET_HANDLED) && (limit > 0));
 8002ebc:	7efb      	ldrb	r3, [r7, #27]
 8002ebe:	2b03      	cmp	r3, #3
 8002ec0:	d002      	beq.n	8002ec8 <QHsm_tran_+0x1c0>
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	dccf      	bgt.n	8002e68 <QHsm_tran_+0x160>
                            QF_CRIT_ENTRY();
 8002ec8:	f7ff fc4a 	bl	8002760 <QF_crit_entry_>
                            Q_ASSERT_INCRIT(530, limit > 0);
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	dc04      	bgt.n	8002edc <QHsm_tran_+0x1d4>
 8002ed2:	f240 2112 	movw	r1, #530	@ 0x212
 8002ed6:	480d      	ldr	r0, [pc, #52]	@ (8002f0c <QHsm_tran_+0x204>)
 8002ed8:	f7fd fcfc 	bl	80008d4 <Q_onError>
                            QF_CRIT_EXIT();
 8002edc:	f7ff fc52 	bl	8002784 <QF_crit_exit_>
                    }
                }
            }
        }
    }
    QF_CRIT_ENTRY();
 8002ee0:	f7ff fc3e 	bl	8002760 <QF_crit_entry_>
    Q_ENSURE_INCRIT(590, ip < QHSM_MAX_NEST_DEPTH_);
 8002ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ee6:	2b05      	cmp	r3, #5
 8002ee8:	dd04      	ble.n	8002ef4 <QHsm_tran_+0x1ec>
 8002eea:	f240 214e 	movw	r1, #590	@ 0x24e
 8002eee:	4807      	ldr	r0, [pc, #28]	@ (8002f0c <QHsm_tran_+0x204>)
 8002ef0:	f7fd fcf0 	bl	80008d4 <Q_onError>
    QF_CRIT_EXIT();
 8002ef4:	f7ff fc46 	bl	8002784 <QF_crit_exit_>
    return ip;
 8002ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3728      	adds	r7, #40	@ 0x28
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	08004d30 	.word	0x08004d30
 8002f08:	08004d28 	.word	0x08004d28
 8002f0c:	08004d20 	.word	0x08004d20

08002f10 <QHsm_top>:

//${QEP::QHsm::top} ..........................................................
//! @protected @memberof QAsm
QState QHsm_top(QHsm const * const me,
    QEvt const * const e)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	6039      	str	r1, [r7, #0]
    Q_UNUSED_PAR(me);
    Q_UNUSED_PAR(e);
    return Q_RET_IGNORED; // the top state ignores all events
 8002f1a:	2304      	movs	r3, #4
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <QF_bzero_>:
//${QF::QF-pkg::bzero_} ......................................................
//! @static @private @memberof QF
void QF_bzero_(
    void * const start,
    uint_fast16_t const len)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b085      	sub	sp, #20
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
    uint8_t *ptr = (uint8_t *)start;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	60fb      	str	r3, [r7, #12]
    for (uint_fast16_t n = len; n > 0U; --n) {
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	60bb      	str	r3, [r7, #8]
 8002f3a:	e008      	b.n	8002f4e <QF_bzero_+0x26>
        *ptr = 0U;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	701a      	strb	r2, [r3, #0]
        ++ptr;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	3301      	adds	r3, #1
 8002f46:	60fb      	str	r3, [r7, #12]
    for (uint_fast16_t n = len; n > 0U; --n) {
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	3b01      	subs	r3, #1
 8002f4c:	60bb      	str	r3, [r7, #8]
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d1f3      	bne.n	8002f3c <QF_bzero_+0x14>
    }
}
 8002f54:	bf00      	nop
 8002f56:	bf00      	nop
 8002f58:	3714      	adds	r7, #20
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr

08002f62 <QEvt_verify_>:
static inline bool QEvt_verify_(QEvt const * const me) {
 8002f62:	b480      	push	{r7}
 8002f64:	b083      	sub	sp, #12
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	6078      	str	r0, [r7, #4]
           && ((me->evtTag_ & 0xF0U) == QEVT_MARKER);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d007      	beq.n	8002f80 <QEvt_verify_+0x1e>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	78db      	ldrb	r3, [r3, #3]
 8002f74:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f78:	2be0      	cmp	r3, #224	@ 0xe0
 8002f7a:	d101      	bne.n	8002f80 <QEvt_verify_+0x1e>
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e000      	b.n	8002f82 <QEvt_verify_+0x20>
 8002f80:	2300      	movs	r3, #0
 8002f82:	f003 0301 	and.w	r3, r3, #1
 8002f86:	b2db      	uxtb	r3, r3
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	370c      	adds	r7, #12
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr

08002f94 <QEvt_getPoolNum_>:

//! @private @memberof QEvt
static inline uint_fast8_t QEvt_getPoolNum_(QEvt const * const me) {
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
    return (uint_fast8_t)me->evtTag_ & 0x0FU;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	78db      	ldrb	r3, [r3, #3]
 8002fa0:	f003 030f 	and.w	r3, r3, #15
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr

08002fb0 <QPSet_insert>:
}

//! @public @memberof QPSet
static inline void QPSet_insert(QPSet * const me,
    uint_fast8_t const n)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	6039      	str	r1, [r7, #0]
    #if (QF_MAX_ACTIVE <= 32U)
    me->bits[0] = (me->bits[0] | ((QPSetBits)1U << (n - 1U)));
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	3b01      	subs	r3, #1
 8002fc2:	2101      	movs	r1, #1
 8002fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8002fc8:	431a      	orrs	r2, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	601a      	str	r2, [r3, #0]
    }
    else {
        me->bits[1] = (me->bits[1] | ((QPSetBits)1U << (n - 33U)));
    }
    #endif
}
 8002fce:	bf00      	nop
 8002fd0:	370c      	adds	r7, #12
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr

08002fda <QPSet_update_>:

#ifndef Q_UNSAFE
//! @private @memberof QPSet
static inline void QPSet_update_(QPSet const * const me,
    QPSet * const dis)
{
 8002fda:	b480      	push	{r7}
 8002fdc:	b083      	sub	sp, #12
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
 8002fe2:	6039      	str	r1, [r7, #0]
    dis->bits[0] = ~me->bits[0];
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	43da      	mvns	r2, r3
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	601a      	str	r2, [r3, #0]
    #if (QF_MAX_ACTIVE > 32U)
    dis->bits[1] = ~me->bits[1];
    #endif
}
 8002fee:	bf00      	nop
 8002ff0:	370c      	adds	r7, #12
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr

08002ffa <QEvt_refCtr_inc_>:
#define QTE_IS_LINKED      (1U << 7U)
#define QTE_WAS_DISARMED   (1U << 6U)
#define QTE_TICK_RATE      0x0FU

//! @private @memberof QEvt
static inline void QEvt_refCtr_inc_(QEvt const *me) {
 8002ffa:	b480      	push	{r7}
 8002ffc:	b083      	sub	sp, #12
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
    ++((QEvt *)me)->refCtr_;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	789b      	ldrb	r3, [r3, #2]
 8003006:	b2db      	uxtb	r3, r3
 8003008:	3301      	adds	r3, #1
 800300a:	b2da      	uxtb	r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	709a      	strb	r2, [r3, #2]
}
 8003010:	bf00      	nop
 8003012:	370c      	adds	r7, #12
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr

0800301c <QActive_post_>:
//! @private @memberof QActive
bool QActive_post_(QActive * const me,
    QEvt const * const e,
    uint_fast16_t const margin,
    void const * const sender)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b086      	sub	sp, #24
 8003020:	af00      	add	r7, sp, #0
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	607a      	str	r2, [r7, #4]
 8003028:	603b      	str	r3, [r7, #0]
    }
    #endif
    #endif

    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 800302a:	f7ff fb99 	bl	8002760 <QF_crit_entry_>
    QF_MEM_SYS();

    #ifndef Q_UNSAFE
    uint8_t const pcopy = (uint8_t)(~me->prio_dis);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003034:	43db      	mvns	r3, r3
 8003036:	75bb      	strb	r3, [r7, #22]
    Q_REQUIRE_INCRIT(102, (QEvt_verify_(e)) && (me->prio == pcopy));
 8003038:	68b8      	ldr	r0, [r7, #8]
 800303a:	f7ff ff92 	bl	8002f62 <QEvt_verify_>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d004      	beq.n	800304e <QActive_post_+0x32>
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	7b1b      	ldrb	r3, [r3, #12]
 8003048:	7dba      	ldrb	r2, [r7, #22]
 800304a:	429a      	cmp	r2, r3
 800304c:	d003      	beq.n	8003056 <QActive_post_+0x3a>
 800304e:	2166      	movs	r1, #102	@ 0x66
 8003050:	4840      	ldr	r0, [pc, #256]	@ (8003154 <QActive_post_+0x138>)
 8003052:	f7fd fc3f 	bl	80008d4 <Q_onError>
    #endif

    QEQueueCtr nFree = me->eQueue.nFree; // get volatile into temporary
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	7fdb      	ldrb	r3, [r3, #31]
 800305a:	757b      	strb	r3, [r7, #21]
    QS_TEST_PROBE_ID(1,
        nFree = 0U;
    )

    bool status;
    if (margin == QF_NO_MARGIN) {
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003062:	4293      	cmp	r3, r2
 8003064:	d10b      	bne.n	800307e <QActive_post_+0x62>
        if (nFree > 0U) {
 8003066:	7d7b      	ldrb	r3, [r7, #21]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d002      	beq.n	8003072 <QActive_post_+0x56>
            status = true; // can post
 800306c:	2301      	movs	r3, #1
 800306e:	75fb      	strb	r3, [r7, #23]
 8003070:	e00f      	b.n	8003092 <QActive_post_+0x76>
        }
        else {
            status = false; // cannot post
 8003072:	2300      	movs	r3, #0
 8003074:	75fb      	strb	r3, [r7, #23]
            Q_ERROR_INCRIT(190); // must be able to post the event
 8003076:	21be      	movs	r1, #190	@ 0xbe
 8003078:	4836      	ldr	r0, [pc, #216]	@ (8003154 <QActive_post_+0x138>)
 800307a:	f7fd fc2b 	bl	80008d4 <Q_onError>
        }
    }
    else if (nFree > (QEQueueCtr)margin) {
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	b2db      	uxtb	r3, r3
 8003082:	7d7a      	ldrb	r2, [r7, #21]
 8003084:	429a      	cmp	r2, r3
 8003086:	d902      	bls.n	800308e <QActive_post_+0x72>
        status = true; // can post
 8003088:	2301      	movs	r3, #1
 800308a:	75fb      	strb	r3, [r7, #23]
 800308c:	e001      	b.n	8003092 <QActive_post_+0x76>
    }
    else {
        status = false; // cannot post, but don't assert
 800308e:	2300      	movs	r3, #0
 8003090:	75fb      	strb	r3, [r7, #23]
    }

    // is it a mutable event?
    if (QEvt_getPoolNum_(e) != 0U) {
 8003092:	68b8      	ldr	r0, [r7, #8]
 8003094:	f7ff ff7e 	bl	8002f94 <QEvt_getPoolNum_>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d002      	beq.n	80030a4 <QActive_post_+0x88>
        QEvt_refCtr_inc_(e); // increment the reference counter
 800309e:	68b8      	ldr	r0, [r7, #8]
 80030a0:	f7ff ffab 	bl	8002ffa <QEvt_refCtr_inc_>
    }

    if (status) { // can post the event?
 80030a4:	7dfb      	ldrb	r3, [r7, #23]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d04a      	beq.n	8003140 <QActive_post_+0x124>

        --nFree; // one free entry just used up
 80030aa:	7d7b      	ldrb	r3, [r7, #21]
 80030ac:	3b01      	subs	r3, #1
 80030ae:	757b      	strb	r3, [r7, #21]
        me->eQueue.nFree = nFree; // update the original
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	7d7a      	ldrb	r2, [r7, #21]
 80030b4:	77da      	strb	r2, [r3, #31]
        if (me->eQueue.nMin > nFree) {
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030bc:	7d7a      	ldrb	r2, [r7, #21]
 80030be:	429a      	cmp	r2, r3
 80030c0:	d203      	bcs.n	80030ca <QActive_post_+0xae>
            me->eQueue.nMin = nFree; // increase minimum so far
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	7d7a      	ldrb	r2, [r7, #21]
 80030c6:	f883 2020 	strb.w	r2, [r3, #32]
        if (QS_LOC_CHECK_(me->prio)) {
            QS_onTestPost(sender, me, e, status);
        }
    #endif

        if (me->eQueue.frontEvt == (QEvt *)0) { // empty queue?
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	695b      	ldr	r3, [r3, #20]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d11a      	bne.n	8003108 <QActive_post_+0xec>
            me->eQueue.frontEvt = e; // deliver event directly
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	68ba      	ldr	r2, [r7, #8]
 80030d6:	615a      	str	r2, [r3, #20]
            }
            else {
                QACTIVE_EQUEUE_SIGNAL_(me); // signal the event queue
            }
    #else
            QACTIVE_EQUEUE_SIGNAL_(me); // signal the event queue
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	7b1b      	ldrb	r3, [r3, #12]
 80030dc:	4619      	mov	r1, r3
 80030de:	481e      	ldr	r0, [pc, #120]	@ (8003158 <QActive_post_+0x13c>)
 80030e0:	f7ff ff66 	bl	8002fb0 <QPSet_insert>
 80030e4:	491d      	ldr	r1, [pc, #116]	@ (800315c <QActive_post_+0x140>)
 80030e6:	481c      	ldr	r0, [pc, #112]	@ (8003158 <QActive_post_+0x13c>)
 80030e8:	f7ff ff77 	bl	8002fda <QPSet_update_>
#define QK_ISR_CONTEXT_()     (QK_get_IPSR() != 0U)

__attribute__((always_inline))
static inline uint32_t QK_get_IPSR(void) {
    uint32_t regIPSR;
    __asm volatile ("mrs %0,ipsr" : "=r" (regIPSR));
 80030ec:	f3ef 8305 	mrs	r3, IPSR
 80030f0:	613b      	str	r3, [r7, #16]
    return regIPSR;
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d120      	bne.n	800313a <QActive_post_+0x11e>
 80030f8:	f000 ff20 	bl	8003f3c <QK_sched_>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d01b      	beq.n	800313a <QActive_post_+0x11e>
 8003102:	f000 ff7f 	bl	8004004 <QK_activate_>
 8003106:	e018      	b.n	800313a <QActive_post_+0x11e>
    #endif
        }
        // queue is not empty, insert event into the ring-buffer
        else {
            // insert event into the ring buffer (FIFO)
            me->eQueue.ring[me->eQueue.head] = e;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	699a      	ldr	r2, [r3, #24]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	7f5b      	ldrb	r3, [r3, #29]
 8003110:	b2db      	uxtb	r3, r3
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	4413      	add	r3, r2
 8003116:	68ba      	ldr	r2, [r7, #8]
 8003118:	601a      	str	r2, [r3, #0]

            if (me->eQueue.head == 0U) { // need to wrap head?
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	7f5b      	ldrb	r3, [r3, #29]
 800311e:	b2db      	uxtb	r3, r3
 8003120:	2b00      	cmp	r3, #0
 8003122:	d103      	bne.n	800312c <QActive_post_+0x110>
                me->eQueue.head = me->eQueue.end; // wrap around
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	7f1a      	ldrb	r2, [r3, #28]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	775a      	strb	r2, [r3, #29]
            }
            --me->eQueue.head; // advance the head (counter clockwise)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	7f5b      	ldrb	r3, [r3, #29]
 8003130:	b2db      	uxtb	r3, r3
 8003132:	3b01      	subs	r3, #1
 8003134:	b2da      	uxtb	r2, r3
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	775a      	strb	r2, [r3, #29]
        }

        QF_MEM_APP();
        QF_CRIT_EXIT();
 800313a:	f7ff fb23 	bl	8002784 <QF_crit_exit_>
 800313e:	e004      	b.n	800314a <QActive_post_+0x12e>
            QS_onTestPost(sender, me, e, status);
        }
    #endif

        QF_MEM_APP();
        QF_CRIT_EXIT();
 8003140:	f7ff fb20 	bl	8002784 <QF_crit_exit_>

    #if (QF_MAX_EPOOL > 0U)
        QF_gc(e); // recycle the event to avoid a leak
 8003144:	68b8      	ldr	r0, [r7, #8]
 8003146:	f000 f8d7 	bl	80032f8 <QF_gc>
    #endif
    }

    return status;
 800314a:	7dfb      	ldrb	r3, [r7, #23]
}
 800314c:	4618      	mov	r0, r3
 800314e:	3718      	adds	r7, #24
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	08004d44 	.word	0x08004d44
 8003158:	2000036c 	.word	0x2000036c
 800315c:	20000384 	.word	0x20000384

08003160 <QActive_get_>:
//$enddef${QF::QActive::postLIFO_} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//$define${QF::QActive::get_} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${QF::QActive::get_} .......................................................
//! @private @memberof QActive
QEvt const * QActive_get_(QActive * const me) {
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 8003168:	f7ff fafa 	bl	8002760 <QF_crit_entry_>
    QF_MEM_SYS();

    QACTIVE_EQUEUE_WAIT_(me); // wait for event to arrive directly
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	695b      	ldr	r3, [r3, #20]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d104      	bne.n	800317e <QActive_get_+0x1e>
 8003174:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8003178:	4821      	ldr	r0, [pc, #132]	@ (8003200 <QActive_get_+0xa0>)
 800317a:	f7fd fbab 	bl	80008d4 <Q_onError>

    // always remove event from the front
    QEvt const * const e = me->eQueue.frontEvt;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	695b      	ldr	r3, [r3, #20]
 8003182:	60fb      	str	r3, [r7, #12]
    QEQueueCtr const nFree = me->eQueue.nFree + 1U; // get volatile into tmp
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	7fdb      	ldrb	r3, [r3, #31]
 8003188:	b2db      	uxtb	r3, r3
 800318a:	3301      	adds	r3, #1
 800318c:	72fb      	strb	r3, [r7, #11]
    me->eQueue.nFree = nFree; // update the # free
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	7afa      	ldrb	r2, [r7, #11]
 8003192:	77da      	strb	r2, [r3, #31]

    if (nFree <= me->eQueue.end) { // any events in the ring buffer?
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	7f1b      	ldrb	r3, [r3, #28]
 8003198:	7afa      	ldrb	r2, [r7, #11]
 800319a:	429a      	cmp	r2, r3
 800319c:	d81a      	bhi.n	80031d4 <QActive_get_+0x74>
        // remove event from the tail
        me->eQueue.frontEvt = me->eQueue.ring[me->eQueue.tail];
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	699a      	ldr	r2, [r3, #24]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	7f9b      	ldrb	r3, [r3, #30]
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	4413      	add	r3, r2
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	615a      	str	r2, [r3, #20]
        if (me->eQueue.tail == 0U) { // need to wrap the tail?
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	7f9b      	ldrb	r3, [r3, #30]
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d103      	bne.n	80031c4 <QActive_get_+0x64>
            me->eQueue.tail = me->eQueue.end; // wrap around
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	7f1a      	ldrb	r2, [r3, #28]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	779a      	strb	r2, [r3, #30]
        }
        --me->eQueue.tail;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	7f9b      	ldrb	r3, [r3, #30]
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	3b01      	subs	r3, #1
 80031cc:	b2da      	uxtb	r2, r3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	779a      	strb	r2, [r3, #30]
 80031d2:	e00d      	b.n	80031f0 <QActive_get_+0x90>
            QS_2U8_PRE_(QEvt_getPoolNum_(e), e->refCtr_); // poolNum & refCtr
            QS_EQC_PRE_(nFree);   // # free entries
        QS_END_PRE_()
    }
    else {
        me->eQueue.frontEvt = (QEvt *)0; // queue becomes empty
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	615a      	str	r2, [r3, #20]

        // all entries in the queue must be free (+1 for fronEvt)
        Q_ASSERT_INCRIT(310, nFree == (me->eQueue.end + 1U));
 80031da:	7afa      	ldrb	r2, [r7, #11]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	7f1b      	ldrb	r3, [r3, #28]
 80031e0:	3301      	adds	r3, #1
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d004      	beq.n	80031f0 <QActive_get_+0x90>
 80031e6:	f44f 719b 	mov.w	r1, #310	@ 0x136
 80031ea:	4805      	ldr	r0, [pc, #20]	@ (8003200 <QActive_get_+0xa0>)
 80031ec:	f7fd fb72 	bl	80008d4 <Q_onError>
            QS_2U8_PRE_(QEvt_getPoolNum_(e), e->refCtr_); // poolNum & refCtr
        QS_END_PRE_()
    }

    QF_MEM_APP();
    QF_CRIT_EXIT();
 80031f0:	f7ff fac8 	bl	8002784 <QF_crit_exit_>

    return e;
 80031f4:	68fb      	ldr	r3, [r7, #12]
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3710      	adds	r7, #16
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	08004d44 	.word	0x08004d44

08003204 <QEvt_verify_>:
static inline bool QEvt_verify_(QEvt const * const me) {
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
           && ((me->evtTag_ & 0xF0U) == QEVT_MARKER);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d007      	beq.n	8003222 <QEvt_verify_+0x1e>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	78db      	ldrb	r3, [r3, #3]
 8003216:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800321a:	2be0      	cmp	r3, #224	@ 0xe0
 800321c:	d101      	bne.n	8003222 <QEvt_verify_+0x1e>
 800321e:	2301      	movs	r3, #1
 8003220:	e000      	b.n	8003224 <QEvt_verify_+0x20>
 8003222:	2300      	movs	r3, #0
 8003224:	f003 0301 	and.w	r3, r3, #1
 8003228:	b2db      	uxtb	r3, r3
}
 800322a:	4618      	mov	r0, r3
 800322c:	370c      	adds	r7, #12
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr

08003236 <QEvt_getPoolNum_>:
static inline uint_fast8_t QEvt_getPoolNum_(QEvt const * const me) {
 8003236:	b480      	push	{r7}
 8003238:	b083      	sub	sp, #12
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
    return (uint_fast8_t)me->evtTag_ & 0x0FU;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	78db      	ldrb	r3, [r3, #3]
 8003242:	f003 030f 	and.w	r3, r3, #15
}
 8003246:	4618      	mov	r0, r3
 8003248:	370c      	adds	r7, #12
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr

08003252 <QEvt_refCtr_dec_>:

//! @private @memberof QEvt
static inline void QEvt_refCtr_dec_(QEvt const *me) {
 8003252:	b480      	push	{r7}
 8003254:	b083      	sub	sp, #12
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
    --((QEvt *)me)->refCtr_;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	789b      	ldrb	r3, [r3, #2]
 800325e:	b2db      	uxtb	r3, r3
 8003260:	3b01      	subs	r3, #1
 8003262:	b2da      	uxtb	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	709a      	strb	r2, [r3, #2]
}
 8003268:	bf00      	nop
 800326a:	370c      	adds	r7, #12
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr

08003274 <QF_poolInit>:
//! @static @public @memberof QF
void QF_poolInit(
    void * const poolSto,
    uint_fast32_t const poolSize,
    uint_fast16_t const evtSize)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b086      	sub	sp, #24
 8003278:	af00      	add	r7, sp, #0
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	60b9      	str	r1, [r7, #8]
 800327e:	607a      	str	r2, [r7, #4]
    uint_fast8_t const poolNum = QF_priv_.maxPool_;
 8003280:	4b1b      	ldr	r3, [pc, #108]	@ (80032f0 <QF_poolInit+0x7c>)
 8003282:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003284:	617b      	str	r3, [r7, #20]

    // see precondition{qf_dyn,200} and precondition{qf_dyn,201}
    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 8003286:	f7ff fa6b 	bl	8002760 <QF_crit_entry_>
    QF_MEM_SYS();

    Q_REQUIRE_INCRIT(200, poolNum < QF_MAX_EPOOL);
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	2b02      	cmp	r3, #2
 800328e:	d903      	bls.n	8003298 <QF_poolInit+0x24>
 8003290:	21c8      	movs	r1, #200	@ 0xc8
 8003292:	4818      	ldr	r0, [pc, #96]	@ (80032f4 <QF_poolInit+0x80>)
 8003294:	f7fd fb1e 	bl	80008d4 <Q_onError>
    if (poolNum > 0U) {
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d011      	beq.n	80032c2 <QF_poolInit+0x4e>
        Q_REQUIRE_INCRIT(201,
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	1e5a      	subs	r2, r3, #1
 80032a2:	4913      	ldr	r1, [pc, #76]	@ (80032f0 <QF_poolInit+0x7c>)
 80032a4:	4613      	mov	r3, r2
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	4413      	add	r3, r2
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	440b      	add	r3, r1
 80032ae:	330c      	adds	r3, #12
 80032b0:	881b      	ldrh	r3, [r3, #0]
 80032b2:	461a      	mov	r2, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d803      	bhi.n	80032c2 <QF_poolInit+0x4e>
 80032ba:	21c9      	movs	r1, #201	@ 0xc9
 80032bc:	480d      	ldr	r0, [pc, #52]	@ (80032f4 <QF_poolInit+0x80>)
 80032be:	f7fd fb09 	bl	80008d4 <Q_onError>
            QF_EPOOL_EVENT_SIZE_(QF_priv_.ePool_[poolNum - 1U]) < evtSize);
    }
    QF_priv_.maxPool_ = poolNum + 1U; // one more pool
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	3301      	adds	r3, #1
 80032c6:	4a0a      	ldr	r2, [pc, #40]	@ (80032f0 <QF_poolInit+0x7c>)
 80032c8:	63d3      	str	r3, [r2, #60]	@ 0x3c

    QF_MEM_APP();
    QF_CRIT_EXIT();
 80032ca:	f7ff fa5b 	bl	8002784 <QF_crit_exit_>

    // perform the port-dependent initialization of the event-pool
    QF_EPOOL_INIT_(QF_priv_.ePool_[poolNum], poolSto, poolSize, evtSize);
 80032ce:	697a      	ldr	r2, [r7, #20]
 80032d0:	4613      	mov	r3, r2
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	4413      	add	r3, r2
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	4a05      	ldr	r2, [pc, #20]	@ (80032f0 <QF_poolInit+0x7c>)
 80032da:	1898      	adds	r0, r3, r2
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	68ba      	ldr	r2, [r7, #8]
 80032e0:	68f9      	ldr	r1, [r7, #12]
 80032e2:	f000 f853 	bl	800338c <QMPool_init>
        uint8_t obj_name[9] = "EvtPool?";
        obj_name[7] = (uint8_t)((uint8_t)'0' + poolNum + 1U);
        QS_obj_dict_pre_(&QF_priv_.ePool_[poolNum], (char const *)obj_name);
    }
    #endif // Q_SPY
}
 80032e6:	bf00      	nop
 80032e8:	3718      	adds	r7, #24
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	20000310 	.word	0x20000310
 80032f4:	08004d4c 	.word	0x08004d4c

080032f8 <QF_gc>:
    return e;
}

//${QF::QF-dyn::gc} ..........................................................
//! @static @public @memberof QF
void QF_gc(QEvt const * const e) {
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 8003300:	f7ff fa2e 	bl	8002760 <QF_crit_entry_>
    Q_REQUIRE_INCRIT(402, QEvt_verify_(e));
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f7ff ff7d 	bl	8003204 <QEvt_verify_>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d104      	bne.n	800331a <QF_gc+0x22>
 8003310:	f44f 71c9 	mov.w	r1, #402	@ 0x192
 8003314:	481b      	ldr	r0, [pc, #108]	@ (8003384 <QF_gc+0x8c>)
 8003316:	f7fd fadd 	bl	80008d4 <Q_onError>

    uint_fast8_t const poolNum = QEvt_getPoolNum_(e);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f7ff ff8b 	bl	8003236 <QEvt_getPoolNum_>
 8003320:	60f8      	str	r0, [r7, #12]

    if (poolNum != 0U) { // is it a pool event (mutable)?
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d027      	beq.n	8003378 <QF_gc+0x80>
        QF_MEM_SYS();

        if (e->refCtr_ > 1U) { // isn't this the last reference?
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	789b      	ldrb	r3, [r3, #2]
 800332c:	b2db      	uxtb	r3, r3
 800332e:	2b01      	cmp	r3, #1
 8003330:	d905      	bls.n	800333e <QF_gc+0x46>
                QS_TIME_PRE_();       // timestamp
                QS_SIG_PRE_(e->sig);  // the signal of the event
                QS_2U8_PRE_(poolNum, e->refCtr_); // poolNum & refCtr
            QS_END_PRE_()

            QEvt_refCtr_dec_(e); // decrement the ref counter
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f7ff ff8d 	bl	8003252 <QEvt_refCtr_dec_>

            QF_MEM_APP();
            QF_CRIT_EXIT();
 8003338:	f7ff fa24 	bl	8002784 <QF_crit_exit_>
        }
    }
    else {
        QF_CRIT_EXIT();
    }
}
 800333c:	e01e      	b.n	800337c <QF_gc+0x84>
            Q_ASSERT_INCRIT(410, (poolNum <= QF_priv_.maxPool_)
 800333e:	4b12      	ldr	r3, [pc, #72]	@ (8003388 <QF_gc+0x90>)
 8003340:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003342:	68fa      	ldr	r2, [r7, #12]
 8003344:	429a      	cmp	r2, r3
 8003346:	d802      	bhi.n	800334e <QF_gc+0x56>
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2b03      	cmp	r3, #3
 800334c:	d904      	bls.n	8003358 <QF_gc+0x60>
 800334e:	f44f 71cd 	mov.w	r1, #410	@ 0x19a
 8003352:	480c      	ldr	r0, [pc, #48]	@ (8003384 <QF_gc+0x8c>)
 8003354:	f7fd fabe 	bl	80008d4 <Q_onError>
            QF_CRIT_EXIT();
 8003358:	f7ff fa14 	bl	8002784 <QF_crit_exit_>
            QF_EPOOL_PUT_(QF_priv_.ePool_[poolNum - 1U],
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	1e5a      	subs	r2, r3, #1
 8003360:	4613      	mov	r3, r2
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	4413      	add	r3, r2
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	4a07      	ldr	r2, [pc, #28]	@ (8003388 <QF_gc+0x90>)
 800336a:	4413      	add	r3, r2
 800336c:	2200      	movs	r2, #0
 800336e:	6879      	ldr	r1, [r7, #4]
 8003370:	4618      	mov	r0, r3
 8003372:	f000 f88f 	bl	8003494 <QMPool_put>
}
 8003376:	e001      	b.n	800337c <QF_gc+0x84>
        QF_CRIT_EXIT();
 8003378:	f7ff fa04 	bl	8002784 <QF_crit_exit_>
}
 800337c:	bf00      	nop
 800337e:	3710      	adds	r7, #16
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}
 8003384:	08004d4c 	.word	0x08004d4c
 8003388:	20000310 	.word	0x20000310

0800338c <QMPool_init>:
//! @public @memberof QMPool
void QMPool_init(QMPool * const me,
    void * const poolSto,
    uint_fast32_t const poolSize,
    uint_fast16_t const blockSize)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b088      	sub	sp, #32
 8003390:	af00      	add	r7, sp, #0
 8003392:	60f8      	str	r0, [r7, #12]
 8003394:	60b9      	str	r1, [r7, #8]
 8003396:	607a      	str	r2, [r7, #4]
 8003398:	603b      	str	r3, [r7, #0]
    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 800339a:	f7ff f9e1 	bl	8002760 <QF_crit_entry_>
    QF_MEM_SYS();

    Q_REQUIRE_INCRIT(100, (poolSto != (void *)0)
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d006      	beq.n	80033b2 <QMPool_init+0x26>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2b07      	cmp	r3, #7
 80033a8:	d903      	bls.n	80033b2 <QMPool_init+0x26>
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	f113 0f09 	cmn.w	r3, #9
 80033b0:	d903      	bls.n	80033ba <QMPool_init+0x2e>
 80033b2:	2164      	movs	r1, #100	@ 0x64
 80033b4:	4836      	ldr	r0, [pc, #216]	@ (8003490 <QMPool_init+0x104>)
 80033b6:	f7fd fa8d 	bl	80008d4 <Q_onError>
            && (poolSize >= (uint_fast32_t)sizeof(QFreeBlock))
            && ((uint_fast16_t)(blockSize + sizeof(QFreeBlock)) > blockSize));

    me->free_head = (QFreeBlock *)poolSto;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	68ba      	ldr	r2, [r7, #8]
 80033be:	609a      	str	r2, [r3, #8]

    // find # free blocks in a memory block, NO DIVISION
    me->blockSize = (QMPoolSize)sizeof(QFreeBlock);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2208      	movs	r2, #8
 80033c4:	819a      	strh	r2, [r3, #12]
    uint_fast16_t nblocks = 1U;
 80033c6:	2301      	movs	r3, #1
 80033c8:	61fb      	str	r3, [r7, #28]
    while (me->blockSize < (QMPoolSize)blockSize) {
 80033ca:	e008      	b.n	80033de <QMPool_init+0x52>
        me->blockSize += (QMPoolSize)sizeof(QFreeBlock);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	899b      	ldrh	r3, [r3, #12]
 80033d0:	3308      	adds	r3, #8
 80033d2:	b29a      	uxth	r2, r3
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	819a      	strh	r2, [r3, #12]
        ++nblocks;
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	3301      	adds	r3, #1
 80033dc:	61fb      	str	r3, [r7, #28]
    while (me->blockSize < (QMPoolSize)blockSize) {
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	899a      	ldrh	r2, [r3, #12]
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d3f0      	bcc.n	80033cc <QMPool_init+0x40>
    }

    // the pool buffer must fit at least one rounded-up block
    Q_ASSERT_INCRIT(110, poolSize >= me->blockSize);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	899b      	ldrh	r3, [r3, #12]
 80033ee:	461a      	mov	r2, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d203      	bcs.n	80033fe <QMPool_init+0x72>
 80033f6:	216e      	movs	r1, #110	@ 0x6e
 80033f8:	4825      	ldr	r0, [pc, #148]	@ (8003490 <QMPool_init+0x104>)
 80033fa:	f7fd fa6b 	bl	80008d4 <Q_onError>

    // start at the head of the free list
    QFreeBlock *fb = me->free_head;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	61bb      	str	r3, [r7, #24]
    me->nTot = 1U; // the last block already in the list
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2201      	movs	r2, #1
 8003408:	81da      	strh	r2, [r3, #14]

    // chain all blocks together in a free-list...
    for (uint_fast32_t size = poolSize - me->blockSize;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	899b      	ldrh	r3, [r3, #12]
 800340e:	461a      	mov	r2, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	1a9b      	subs	r3, r3, r2
 8003414:	617b      	str	r3, [r7, #20]
 8003416:	e019      	b.n	800344c <QMPool_init+0xc0>
         size >= (uint_fast32_t)me->blockSize;
         size -= (uint_fast32_t)me->blockSize)
    {
        fb->next = &fb[nblocks]; // point next link to next block
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	00db      	lsls	r3, r3, #3
 800341c:	69ba      	ldr	r2, [r7, #24]
 800341e:	441a      	add	r2, r3
 8003420:	69bb      	ldr	r3, [r7, #24]
 8003422:	601a      	str	r2, [r3, #0]
    #ifndef Q_UNSAFE
        fb->next_dis = (uintptr_t)(~Q_UINTPTR_CAST_(fb->next));
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	43da      	mvns	r2, r3
 800342a:	69bb      	ldr	r3, [r7, #24]
 800342c:	605a      	str	r2, [r3, #4]
    #endif
        fb = fb->next;           // advance to the next block
 800342e:	69bb      	ldr	r3, [r7, #24]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	61bb      	str	r3, [r7, #24]
        ++me->nTot;              // one more free block in the pool
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	89db      	ldrh	r3, [r3, #14]
 8003438:	3301      	adds	r3, #1
 800343a:	b29a      	uxth	r2, r3
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	81da      	strh	r2, [r3, #14]
         size -= (uint_fast32_t)me->blockSize)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	899b      	ldrh	r3, [r3, #12]
 8003444:	461a      	mov	r2, r3
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	1a9b      	subs	r3, r3, r2
 800344a:	617b      	str	r3, [r7, #20]
         size >= (uint_fast32_t)me->blockSize;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	899b      	ldrh	r3, [r3, #12]
 8003450:	461a      	mov	r2, r3
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	4293      	cmp	r3, r2
 8003456:	d2df      	bcs.n	8003418 <QMPool_init+0x8c>
    }

    fb->next  = (QFreeBlock *)0; // the last link points to NULL
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	2200      	movs	r2, #0
 800345c:	601a      	str	r2, [r3, #0]
    #ifndef Q_UNSAFE
    fb->next_dis = (uintptr_t)(~Q_UINTPTR_CAST_(fb->next));
 800345e:	69bb      	ldr	r3, [r7, #24]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	43da      	mvns	r2, r3
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	605a      	str	r2, [r3, #4]
    #endif

    me->nFree = me->nTot;        // all blocks are free
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	89da      	ldrh	r2, [r3, #14]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	821a      	strh	r2, [r3, #16]
    me->nMin  = me->nTot;        // the minimum # free blocks
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	89da      	ldrh	r2, [r3, #14]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	825a      	strh	r2, [r3, #18]
    me->start = (QFreeBlock *)poolSto; // the original start this pool buffer
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	68ba      	ldr	r2, [r7, #8]
 800347c:	601a      	str	r2, [r3, #0]
    me->end   = fb;              // the last block in this pool
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	69ba      	ldr	r2, [r7, #24]
 8003482:	605a      	str	r2, [r3, #4]

    QF_MEM_APP();
    QF_CRIT_EXIT();
 8003484:	f7ff f97e 	bl	8002784 <QF_crit_exit_>
}
 8003488:	bf00      	nop
 800348a:	3720      	adds	r7, #32
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	08004d54 	.word	0x08004d54

08003494 <QMPool_put>:
//${QF::QMPool::put} .........................................................
//! @public @memberof QMPool
void QMPool_put(QMPool * const me,
    void * const block,
    uint_fast8_t const qsId)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b086      	sub	sp, #24
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	607a      	str	r2, [r7, #4]
    #ifndef Q_SPY
    Q_UNUSED_PAR(qsId);
    #endif

    QFreeBlock * const fb = (QFreeBlock *)block;
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	617b      	str	r3, [r7, #20]

    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 80034a4:	f7ff f95c 	bl	8002760 <QF_crit_entry_>
    QF_MEM_SYS();

    Q_REQUIRE_INCRIT(200, (me->nFree < me->nTot)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	8a1b      	ldrh	r3, [r3, #16]
 80034ac:	b29a      	uxth	r2, r3
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	89db      	ldrh	r3, [r3, #14]
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d209      	bcs.n	80034ca <QMPool_put+0x36>
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	697a      	ldr	r2, [r7, #20]
 80034bc:	429a      	cmp	r2, r3
 80034be:	d304      	bcc.n	80034ca <QMPool_put+0x36>
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	697a      	ldr	r2, [r7, #20]
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d903      	bls.n	80034d2 <QMPool_put+0x3e>
 80034ca:	21c8      	movs	r1, #200	@ 0xc8
 80034cc:	480d      	ldr	r0, [pc, #52]	@ (8003504 <QMPool_put+0x70>)
 80034ce:	f7fd fa01 	bl	80008d4 <Q_onError>
                           && (me->start <= fb) && (fb <= me->end));

    fb->next = me->free_head; // link into list
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	689a      	ldr	r2, [r3, #8]
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	601a      	str	r2, [r3, #0]
    #ifndef Q_UNSAFE
    fb->next_dis = (uintptr_t)(~Q_UINTPTR_CAST_(fb->next));
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	43da      	mvns	r2, r3
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	605a      	str	r2, [r3, #4]
    #endif

    // set as new head of the free list
    me->free_head = fb;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	697a      	ldr	r2, [r7, #20]
 80034e8:	609a      	str	r2, [r3, #8]

    ++me->nFree; // one more free block in this pool
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	8a1b      	ldrh	r3, [r3, #16]
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	3301      	adds	r3, #1
 80034f2:	b29a      	uxth	r2, r3
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	821a      	strh	r2, [r3, #16]
        QS_OBJ_PRE_(me);        // this memory pool
        QS_MPC_PRE_(me->nFree); // the # free blocks in the pool
    QS_END_PRE_()

    QF_MEM_APP();
    QF_CRIT_EXIT();
 80034f8:	f7ff f944 	bl	8002784 <QF_crit_exit_>
}
 80034fc:	bf00      	nop
 80034fe:	3718      	adds	r7, #24
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}
 8003504:	08004d54 	.word	0x08004d54

08003508 <QEvt_getPoolNum_>:
static inline uint_fast8_t QEvt_getPoolNum_(QEvt const * const me) {
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
    return (uint_fast8_t)me->evtTag_ & 0x0FU;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	78db      	ldrb	r3, [r3, #3]
 8003514:	f003 030f 	and.w	r3, r3, #15
}
 8003518:	4618      	mov	r0, r3
 800351a:	370c      	adds	r7, #12
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr

08003524 <QPSet_setEmpty>:
static inline void QPSet_setEmpty(QPSet * const me) {
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
    me->bits[0] = 0U;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	601a      	str	r2, [r3, #0]
}
 8003532:	bf00      	nop
 8003534:	370c      	adds	r7, #12
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr

0800353e <QPSet_notEmpty>:
static inline bool QPSet_notEmpty(QPSet const * const me) {
 800353e:	b480      	push	{r7}
 8003540:	b083      	sub	sp, #12
 8003542:	af00      	add	r7, sp, #0
 8003544:	6078      	str	r0, [r7, #4]
    return (me->bits[0] != 0U);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	2b00      	cmp	r3, #0
 800354c:	bf14      	ite	ne
 800354e:	2301      	movne	r3, #1
 8003550:	2300      	moveq	r3, #0
 8003552:	b2db      	uxtb	r3, r3
}
 8003554:	4618      	mov	r0, r3
 8003556:	370c      	adds	r7, #12
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr

08003560 <QPSet_insert>:
{
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
    me->bits[0] = (me->bits[0] | ((QPSetBits)1U << (n - 1U)));
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	3b01      	subs	r3, #1
 8003572:	2101      	movs	r1, #1
 8003574:	fa01 f303 	lsl.w	r3, r1, r3
 8003578:	431a      	orrs	r2, r3
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	601a      	str	r2, [r3, #0]
}
 800357e:	bf00      	nop
 8003580:	370c      	adds	r7, #12
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr

0800358a <QPSet_remove>:
{
 800358a:	b480      	push	{r7}
 800358c:	b083      	sub	sp, #12
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
 8003592:	6039      	str	r1, [r7, #0]
    me->bits[0] = (me->bits[0] & (QPSetBits)(~((QPSetBits)1U << (n - 1U))));
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	3b01      	subs	r3, #1
 800359c:	2101      	movs	r1, #1
 800359e:	fa01 f303 	lsl.w	r3, r1, r3
 80035a2:	43db      	mvns	r3, r3
 80035a4:	401a      	ands	r2, r3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	601a      	str	r2, [r3, #0]
}
 80035aa:	bf00      	nop
 80035ac:	370c      	adds	r7, #12
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr

080035b6 <QPSet_findMax>:
static inline uint_fast8_t QPSet_findMax(QPSet const * const me) {
 80035b6:	b480      	push	{r7}
 80035b8:	b083      	sub	sp, #12
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
    return QF_LOG2(me->bits[0]);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	fab3 f383 	clz	r3, r3
 80035c6:	f1c3 0320 	rsb	r3, r3, #32
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	370c      	adds	r7, #12
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr

080035d6 <QPSet_update_>:
{
 80035d6:	b480      	push	{r7}
 80035d8:	b083      	sub	sp, #12
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
 80035de:	6039      	str	r1, [r7, #0]
    dis->bits[0] = ~me->bits[0];
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	43da      	mvns	r2, r3
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	601a      	str	r2, [r3, #0]
}
 80035ea:	bf00      	nop
 80035ec:	370c      	adds	r7, #12
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr

080035f6 <QPSet_verify_>:

#ifndef Q_UNSAFE
//! @private @memberof QPSet
static inline bool QPSet_verify_(QPSet const * const me,
    QPSet const * const dis)
{
 80035f6:	b480      	push	{r7}
 80035f8:	b083      	sub	sp, #12
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
 80035fe:	6039      	str	r1, [r7, #0]
    #if (QF_MAX_ACTIVE <= 32U)
    return me->bits[0] == (QPSetBits)(~dis->bits[0]);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	43db      	mvns	r3, r3
 800360a:	429a      	cmp	r2, r3
 800360c:	bf0c      	ite	eq
 800360e:	2301      	moveq	r3, #1
 8003610:	2300      	movne	r3, #0
 8003612:	b2db      	uxtb	r3, r3
    #else
    return (me->bits[0] == (QPSetBits)(~dis->bits[0]))
           && (me->bits[1] == (QPSetBits)(~dis->bits[1]));
    #endif
}
 8003614:	4618      	mov	r0, r3
 8003616:	370c      	adds	r7, #12
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <QEvt_refCtr_inc_>:
static inline void QEvt_refCtr_inc_(QEvt const *me) {
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
    ++((QEvt *)me)->refCtr_;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	789b      	ldrb	r3, [r3, #2]
 800362c:	b2db      	uxtb	r3, r3
 800362e:	3301      	adds	r3, #1
 8003630:	b2da      	uxtb	r2, r3
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	709a      	strb	r2, [r3, #2]
}
 8003636:	bf00      	nop
 8003638:	370c      	adds	r7, #12
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr
	...

08003644 <QActive_psInit>:
//${QF::QActive::psInit} .....................................................
//! @static @public @memberof QActive
void QActive_psInit(
    QSubscrList * const subscrSto,
    enum_t const maxSignal)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	6039      	str	r1, [r7, #0]
    QActive_subscrList_   = subscrSto;
 800364e:	4a14      	ldr	r2, [pc, #80]	@ (80036a0 <QActive_psInit+0x5c>)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6013      	str	r3, [r2, #0]
    QActive_maxPubSignal_ = maxSignal;
 8003654:	4a13      	ldr	r2, [pc, #76]	@ (80036a4 <QActive_psInit+0x60>)
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	6013      	str	r3, [r2, #0]

    // initialize the subscriber list
    for (enum_t sig = 0; sig < maxSignal; ++sig) {
 800365a:	2300      	movs	r3, #0
 800365c:	60fb      	str	r3, [r7, #12]
 800365e:	e016      	b.n	800368e <QActive_psInit+0x4a>
        QPSet_setEmpty(&subscrSto[sig].set);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	00db      	lsls	r3, r3, #3
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	4413      	add	r3, r2
 8003668:	4618      	mov	r0, r3
 800366a:	f7ff ff5b 	bl	8003524 <QPSet_setEmpty>
    #ifndef Q_UNSAFE
        QPSet_update_(&subscrSto[sig].set, &subscrSto[sig].set_dis);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	00db      	lsls	r3, r3, #3
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	4413      	add	r3, r2
 8003676:	4618      	mov	r0, r3
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	00db      	lsls	r3, r3, #3
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	4413      	add	r3, r2
 8003680:	3304      	adds	r3, #4
 8003682:	4619      	mov	r1, r3
 8003684:	f7ff ffa7 	bl	80035d6 <QPSet_update_>
    for (enum_t sig = 0; sig < maxSignal; ++sig) {
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	3301      	adds	r3, #1
 800368c:	60fb      	str	r3, [r7, #12]
 800368e:	68fa      	ldr	r2, [r7, #12]
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	429a      	cmp	r2, r3
 8003694:	dbe4      	blt.n	8003660 <QActive_psInit+0x1c>
    #endif
    }
}
 8003696:	bf00      	nop
 8003698:	bf00      	nop
 800369a:	3710      	adds	r7, #16
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	20000350 	.word	0x20000350
 80036a4:	20000354 	.word	0x20000354

080036a8 <QActive_publish_>:
//! @static @private @memberof QActive
void QActive_publish_(
    QEvt const * const e,
    void const * const sender,
    uint_fast8_t const qsId)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b08c      	sub	sp, #48	@ 0x30
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	60b9      	str	r1, [r7, #8]
 80036b2:	607a      	str	r2, [r7, #4]
    #ifndef Q_SPY
    Q_UNUSED_PAR(sender);
    Q_UNUSED_PAR(qsId);
    #endif

    QSignal const sig = e->sig;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	881b      	ldrh	r3, [r3, #0]
 80036b8:	83fb      	strh	r3, [r7, #30]

    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 80036ba:	f7ff f851 	bl	8002760 <QF_crit_entry_>
    QF_MEM_SYS();

    Q_REQUIRE_INCRIT(200, sig < (QSignal)QActive_maxPubSignal_);
 80036be:	4b57      	ldr	r3, [pc, #348]	@ (800381c <QActive_publish_+0x174>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	8bfa      	ldrh	r2, [r7, #30]
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d303      	bcc.n	80036d2 <QActive_publish_+0x2a>
 80036ca:	21c8      	movs	r1, #200	@ 0xc8
 80036cc:	4854      	ldr	r0, [pc, #336]	@ (8003820 <QActive_publish_+0x178>)
 80036ce:	f7fd f901 	bl	80008d4 <Q_onError>
    Q_REQUIRE_INCRIT(202,
 80036d2:	4b54      	ldr	r3, [pc, #336]	@ (8003824 <QActive_publish_+0x17c>)
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	8bfb      	ldrh	r3, [r7, #30]
 80036d8:	00db      	lsls	r3, r3, #3
 80036da:	4413      	add	r3, r2
 80036dc:	4618      	mov	r0, r3
 80036de:	4b51      	ldr	r3, [pc, #324]	@ (8003824 <QActive_publish_+0x17c>)
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	8bfb      	ldrh	r3, [r7, #30]
 80036e4:	00db      	lsls	r3, r3, #3
 80036e6:	4413      	add	r3, r2
 80036e8:	3304      	adds	r3, #4
 80036ea:	4619      	mov	r1, r3
 80036ec:	f7ff ff83 	bl	80035f6 <QPSet_verify_>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d103      	bne.n	80036fe <QActive_publish_+0x56>
 80036f6:	21ca      	movs	r1, #202	@ 0xca
 80036f8:	4849      	ldr	r0, [pc, #292]	@ (8003820 <QActive_publish_+0x178>)
 80036fa:	f7fd f8eb 	bl	80008d4 <Q_onError>
        QS_SIG_PRE_(sig);        // the signal of the event
        QS_2U8_PRE_(QEvt_getPoolNum_(e), e->refCtr_); // poolNum & refCtr
    QS_END_PRE_()

    // is it a mutable event?
    if (QEvt_getPoolNum_(e) != 0U) {
 80036fe:	68f8      	ldr	r0, [r7, #12]
 8003700:	f7ff ff02 	bl	8003508 <QEvt_getPoolNum_>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d002      	beq.n	8003710 <QActive_publish_+0x68>
        // prevent premature recycling of the event while the multicasting
        // is still in progress. At the end of the function, the garbage
        // collector step (QF_gc()) decrements the reference counter and
        // recycles the event if the counter drops to zero. This covers the
        // case when the event was published without any subscribers.
        QEvt_refCtr_inc_(e);
 800370a:	68f8      	ldr	r0, [r7, #12]
 800370c:	f7ff ff88 	bl	8003620 <QEvt_refCtr_inc_>
    }

    // make a local, modifiable copy of the subscriber set
    QPSet subscrSet = QActive_subscrList_[sig].set;
 8003710:	4b44      	ldr	r3, [pc, #272]	@ (8003824 <QActive_publish_+0x17c>)
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	8bfb      	ldrh	r3, [r7, #30]
 8003716:	00db      	lsls	r3, r3, #3
 8003718:	4413      	add	r3, r2
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	617b      	str	r3, [r7, #20]

    QF_MEM_APP();
    QF_CRIT_EXIT();
 800371e:	f7ff f831 	bl	8002784 <QF_crit_exit_>

    if (QPSet_notEmpty(&subscrSet)) { // any subscribers?
 8003722:	f107 0314 	add.w	r3, r7, #20
 8003726:	4618      	mov	r0, r3
 8003728:	f7ff ff09 	bl	800353e <QPSet_notEmpty>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d06d      	beq.n	800380e <QActive_publish_+0x166>
        // highest-prio subscriber
        uint_fast8_t p = QPSet_findMax(&subscrSet);
 8003732:	f107 0314 	add.w	r3, r7, #20
 8003736:	4618      	mov	r0, r3
 8003738:	f7ff ff3d 	bl	80035b6 <QPSet_findMax>
 800373c:	62f8      	str	r0, [r7, #44]	@ 0x2c

        QF_CRIT_ENTRY();
 800373e:	f7ff f80f 	bl	8002760 <QF_crit_entry_>
        QF_MEM_SYS();

        QActive *a = QActive_registry_[p];
 8003742:	4a39      	ldr	r2, [pc, #228]	@ (8003828 <QActive_publish_+0x180>)
 8003744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003746:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800374a:	62bb      	str	r3, [r7, #40]	@ 0x28
        // the AO must be registered with the framework
        Q_ASSERT_INCRIT(210, a != (QActive *)0);
 800374c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800374e:	2b00      	cmp	r3, #0
 8003750:	d103      	bne.n	800375a <QActive_publish_+0xb2>
 8003752:	21d2      	movs	r1, #210	@ 0xd2
 8003754:	4832      	ldr	r0, [pc, #200]	@ (8003820 <QActive_publish_+0x178>)
 8003756:	f7fd f8bd 	bl	80008d4 <Q_onError>

        QF_MEM_APP();
        QF_CRIT_EXIT();
 800375a:	f7ff f813 	bl	8002784 <QF_crit_exit_>
    __asm volatile ("mrs %0,ipsr" : "=r" (regIPSR));
 800375e:	f3ef 8305 	mrs	r3, IPSR
 8003762:	61bb      	str	r3, [r7, #24]
    return regIPSR;
 8003764:	69bb      	ldr	r3, [r7, #24]

        QF_SCHED_STAT_
        QF_SCHED_LOCK_(p); // lock the scheduler up to AO's prio
 8003766:	2b00      	cmp	r3, #0
 8003768:	d002      	beq.n	8003770 <QActive_publish_+0xc8>
 800376a:	23ff      	movs	r3, #255	@ 0xff
 800376c:	627b      	str	r3, [r7, #36]	@ 0x24
 800376e:	e003      	b.n	8003778 <QActive_publish_+0xd0>
 8003770:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003772:	f000 fb6f 	bl	8003e54 <QK_schedLock>
 8003776:	6278      	str	r0, [r7, #36]	@ 0x24
        uint_fast8_t limit = QF_MAX_ACTIVE + 1U;
 8003778:	2321      	movs	r3, #33	@ 0x21
 800377a:	623b      	str	r3, [r7, #32]
        do { // loop over all subscribers
            --limit;
 800377c:	6a3b      	ldr	r3, [r7, #32]
 800377e:	3b01      	subs	r3, #1
 8003780:	623b      	str	r3, [r7, #32]

            // QACTIVE_POST() asserts internally if the queue overflows
            QACTIVE_POST(a, e, sender);
 8003782:	2300      	movs	r3, #0
 8003784:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003788:	68f9      	ldr	r1, [r7, #12]
 800378a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800378c:	f7ff fc46 	bl	800301c <QActive_post_>

            QPSet_remove(&subscrSet, p); // remove the handled subscriber
 8003790:	f107 0314 	add.w	r3, r7, #20
 8003794:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003796:	4618      	mov	r0, r3
 8003798:	f7ff fef7 	bl	800358a <QPSet_remove>
            if (QPSet_notEmpty(&subscrSet)) {  // still more subscribers?
 800379c:	f107 0314 	add.w	r3, r7, #20
 80037a0:	4618      	mov	r0, r3
 80037a2:	f7ff fecc 	bl	800353e <QPSet_notEmpty>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d016      	beq.n	80037da <QActive_publish_+0x132>
                p = QPSet_findMax(&subscrSet); // highest-prio subscriber
 80037ac:	f107 0314 	add.w	r3, r7, #20
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7ff ff00 	bl	80035b6 <QPSet_findMax>
 80037b6:	62f8      	str	r0, [r7, #44]	@ 0x2c

                QF_CRIT_ENTRY();
 80037b8:	f7fe ffd2 	bl	8002760 <QF_crit_entry_>
                QF_MEM_SYS();

                a = QActive_registry_[p];
 80037bc:	4a1a      	ldr	r2, [pc, #104]	@ (8003828 <QActive_publish_+0x180>)
 80037be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037c4:	62bb      	str	r3, [r7, #40]	@ 0x28
                // the AO must be registered with the framework
                Q_ASSERT_INCRIT(220, a != (QActive *)0);
 80037c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d103      	bne.n	80037d4 <QActive_publish_+0x12c>
 80037cc:	21dc      	movs	r1, #220	@ 0xdc
 80037ce:	4814      	ldr	r0, [pc, #80]	@ (8003820 <QActive_publish_+0x178>)
 80037d0:	f7fd f880 	bl	80008d4 <Q_onError>

                QF_MEM_APP();
                QF_CRIT_EXIT();
 80037d4:	f7fe ffd6 	bl	8002784 <QF_crit_exit_>
 80037d8:	e001      	b.n	80037de <QActive_publish_+0x136>
            }
            else {
                p = 0U; // no more subscribers
 80037da:	2300      	movs	r3, #0
 80037dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
        } while ((p != 0U) && (limit > 0U));
 80037de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d002      	beq.n	80037ea <QActive_publish_+0x142>
 80037e4:	6a3b      	ldr	r3, [r7, #32]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d1c8      	bne.n	800377c <QActive_publish_+0xd4>

        QF_CRIT_ENTRY();
 80037ea:	f7fe ffb9 	bl	8002760 <QF_crit_entry_>
        Q_ENSURE_INCRIT(290, p == 0U);
 80037ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d004      	beq.n	80037fe <QActive_publish_+0x156>
 80037f4:	f44f 7191 	mov.w	r1, #290	@ 0x122
 80037f8:	4809      	ldr	r0, [pc, #36]	@ (8003820 <QActive_publish_+0x178>)
 80037fa:	f7fd f86b 	bl	80008d4 <Q_onError>
        QF_CRIT_EXIT();
 80037fe:	f7fe ffc1 	bl	8002784 <QF_crit_exit_>

        QF_SCHED_UNLOCK_(); // unlock the scheduler
 8003802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003804:	2bff      	cmp	r3, #255	@ 0xff
 8003806:	d002      	beq.n	800380e <QActive_publish_+0x166>
 8003808:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800380a:	f000 fb5b 	bl	8003ec4 <QK_schedUnlock>

    // The following garbage collection step decrements the reference counter
    // and recycles the event if the counter drops to zero. This covers both
    // cases when the event was published with or without any subscribers.
    #if (QF_MAX_EPOOL > 0U)
    QF_gc(e); // recycle the event to avoid a leak
 800380e:	68f8      	ldr	r0, [r7, #12]
 8003810:	f7ff fd72 	bl	80032f8 <QF_gc>
    #endif
}
 8003814:	bf00      	nop
 8003816:	3730      	adds	r7, #48	@ 0x30
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}
 800381c:	20000354 	.word	0x20000354
 8003820:	08004d5c 	.word	0x08004d5c
 8003824:	20000350 	.word	0x20000350
 8003828:	2000028c 	.word	0x2000028c

0800382c <QActive_subscribe>:

//${QF::QActive::subscribe} ..................................................
//! @protected @memberof QActive
void QActive_subscribe(QActive const * const me,
    enum_t const sig)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b084      	sub	sp, #16
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	6039      	str	r1, [r7, #0]
    uint_fast8_t const p = (uint_fast8_t)me->prio;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	7b1b      	ldrb	r3, [r3, #12]
 800383a:	60fb      	str	r3, [r7, #12]

    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 800383c:	f7fe ff90 	bl	8002760 <QF_crit_entry_>
    QF_MEM_SYS();

    Q_REQUIRE_INCRIT(300, ((enum_t)Q_USER_SIG <= sig)
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	2b03      	cmp	r3, #3
 8003844:	dd11      	ble.n	800386a <QActive_subscribe+0x3e>
 8003846:	4b26      	ldr	r3, [pc, #152]	@ (80038e0 <QActive_subscribe+0xb4>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	683a      	ldr	r2, [r7, #0]
 800384c:	429a      	cmp	r2, r3
 800384e:	da0c      	bge.n	800386a <QActive_subscribe+0x3e>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d009      	beq.n	800386a <QActive_subscribe+0x3e>
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2b20      	cmp	r3, #32
 800385a:	d806      	bhi.n	800386a <QActive_subscribe+0x3e>
 800385c:	4a21      	ldr	r2, [pc, #132]	@ (80038e4 <QActive_subscribe+0xb8>)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	429a      	cmp	r2, r3
 8003868:	d004      	beq.n	8003874 <QActive_subscribe+0x48>
 800386a:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 800386e:	481e      	ldr	r0, [pc, #120]	@ (80038e8 <QActive_subscribe+0xbc>)
 8003870:	f7fd f830 	bl	80008d4 <Q_onError>
        && (sig < QActive_maxPubSignal_)
        && (0U < p) && (p <= QF_MAX_ACTIVE)
        && (QActive_registry_[p] == me));
    Q_REQUIRE_INCRIT(302,
 8003874:	4b1d      	ldr	r3, [pc, #116]	@ (80038ec <QActive_subscribe+0xc0>)
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	00db      	lsls	r3, r3, #3
 800387c:	4413      	add	r3, r2
 800387e:	4618      	mov	r0, r3
 8003880:	4b1a      	ldr	r3, [pc, #104]	@ (80038ec <QActive_subscribe+0xc0>)
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	00db      	lsls	r3, r3, #3
 8003888:	4413      	add	r3, r2
 800388a:	3304      	adds	r3, #4
 800388c:	4619      	mov	r1, r3
 800388e:	f7ff feb2 	bl	80035f6 <QPSet_verify_>
 8003892:	4603      	mov	r3, r0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d104      	bne.n	80038a2 <QActive_subscribe+0x76>
 8003898:	f44f 7197 	mov.w	r1, #302	@ 0x12e
 800389c:	4812      	ldr	r0, [pc, #72]	@ (80038e8 <QActive_subscribe+0xbc>)
 800389e:	f7fd f819 	bl	80008d4 <Q_onError>
        QS_SIG_PRE_(sig);  // the signal of this event
        QS_OBJ_PRE_(me);   // this active object
    QS_END_PRE_()

    // insert the prio. into the subscriber set
    QPSet_insert(&QActive_subscrList_[sig].set, p);
 80038a2:	4b12      	ldr	r3, [pc, #72]	@ (80038ec <QActive_subscribe+0xc0>)
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	00db      	lsls	r3, r3, #3
 80038aa:	4413      	add	r3, r2
 80038ac:	68f9      	ldr	r1, [r7, #12]
 80038ae:	4618      	mov	r0, r3
 80038b0:	f7ff fe56 	bl	8003560 <QPSet_insert>
    #ifndef Q_UNSAFE
    QPSet_update_(&QActive_subscrList_[sig].set,
 80038b4:	4b0d      	ldr	r3, [pc, #52]	@ (80038ec <QActive_subscribe+0xc0>)
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	00db      	lsls	r3, r3, #3
 80038bc:	4413      	add	r3, r2
 80038be:	4618      	mov	r0, r3
                  &QActive_subscrList_[sig].set_dis);
 80038c0:	4b0a      	ldr	r3, [pc, #40]	@ (80038ec <QActive_subscribe+0xc0>)
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	00db      	lsls	r3, r3, #3
 80038c8:	4413      	add	r3, r2
    QPSet_update_(&QActive_subscrList_[sig].set,
 80038ca:	3304      	adds	r3, #4
 80038cc:	4619      	mov	r1, r3
 80038ce:	f7ff fe82 	bl	80035d6 <QPSet_update_>
    #endif

    QF_MEM_APP();
    QF_CRIT_EXIT();
 80038d2:	f7fe ff57 	bl	8002784 <QF_crit_exit_>
}
 80038d6:	bf00      	nop
 80038d8:	3710      	adds	r7, #16
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	20000354 	.word	0x20000354
 80038e4:	2000028c 	.word	0x2000028c
 80038e8:	08004d5c 	.word	0x08004d5c
 80038ec:	20000350 	.word	0x20000350

080038f0 <QActive_ctor>:

//${QF::QActive::ctor} .......................................................
//! @protected @memberof QActive
void QActive_ctor(QActive * const me,
    QStateHandler const initial)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	6039      	str	r1, [r7, #0]
    // clear the whole QActive object, so that the framework can start
    // correctly even if the startup code fails to clear the uninitialized
    // data (as is required by the C Standard).
    QF_bzero_(me, sizeof(*me));
 80038fa:	2128      	movs	r1, #40	@ 0x28
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f7ff fb13 	bl	8002f28 <QF_bzero_>

    // NOTE: QActive inherits the abstract QAsm class, but it calls the
    // constructor of the QHsm subclass. This is because QActive inherits
    // the behavior from the QHsm subclass.
    QHsm_ctor((QHsm *)(me), initial);
 8003902:	6839      	ldr	r1, [r7, #0]
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f7fe ffdf 	bl	80028c8 <QHsm_ctor>
        &QHsm_isIn_
    #ifdef Q_SPY
        ,&QHsm_getStateHandler_
    #endif
    };
    me->super.vptr = &vtable; // hook vptr to QActive vtable
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a02      	ldr	r2, [pc, #8]	@ (8003918 <QActive_ctor+0x28>)
 800390e:	601a      	str	r2, [r3, #0]
}
 8003910:	bf00      	nop
 8003912:	3708      	adds	r7, #8
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}
 8003918:	08004d6c 	.word	0x08004d6c

0800391c <QActive_register_>:

//$define${QF::QActive::register_} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${QF::QActive::register_} ..................................................
//! @private @memberof QActive
void QActive_register_(QActive * const me) {
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 8003924:	f7fe ff1c 	bl	8002760 <QF_crit_entry_>
    QF_MEM_SYS();

    if (me->pthre == 0U) { // preemption-threshold not defined?
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	7b5b      	ldrb	r3, [r3, #13]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d103      	bne.n	8003938 <QActive_register_+0x1c>
        me->pthre = me->prio; // apply the default
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	7b1a      	ldrb	r2, [r3, #12]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	735a      	strb	r2, [r3, #13]
    }

    #ifndef Q_UNSAFE

    Q_REQUIRE_INCRIT(100, (0U < me->prio) && (me->prio <= QF_MAX_ACTIVE)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	7b1b      	ldrb	r3, [r3, #12]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d011      	beq.n	8003964 <QActive_register_+0x48>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	7b1b      	ldrb	r3, [r3, #12]
 8003944:	2b20      	cmp	r3, #32
 8003946:	d80d      	bhi.n	8003964 <QActive_register_+0x48>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	7b1b      	ldrb	r3, [r3, #12]
 800394c:	461a      	mov	r2, r3
 800394e:	4b37      	ldr	r3, [pc, #220]	@ (8003a2c <QActive_register_+0x110>)
 8003950:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d105      	bne.n	8003964 <QActive_register_+0x48>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	7b1a      	ldrb	r2, [r3, #12]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	7b5b      	ldrb	r3, [r3, #13]
 8003960:	429a      	cmp	r2, r3
 8003962:	d903      	bls.n	800396c <QActive_register_+0x50>
 8003964:	2164      	movs	r1, #100	@ 0x64
 8003966:	4832      	ldr	r0, [pc, #200]	@ (8003a30 <QActive_register_+0x114>)
 8003968:	f7fc ffb4 	bl	80008d4 <Q_onError>
                      && (QActive_registry_[me->prio] == (QActive *)0)
                      && (me->prio <= me->pthre));

    uint8_t prev_thre = me->pthre;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	7b5b      	ldrb	r3, [r3, #13]
 8003970:	73fb      	strb	r3, [r7, #15]
    uint8_t next_thre = me->pthre;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	7b5b      	ldrb	r3, [r3, #13]
 8003976:	73bb      	strb	r3, [r7, #14]

    uint_fast8_t p;
    for (p = (uint_fast8_t)me->prio - 1U; p > 0U; --p) {
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	7b1b      	ldrb	r3, [r3, #12]
 800397c:	3b01      	subs	r3, #1
 800397e:	60bb      	str	r3, [r7, #8]
 8003980:	e00f      	b.n	80039a2 <QActive_register_+0x86>
        if (QActive_registry_[p] != (QActive *)0) {
 8003982:	4a2a      	ldr	r2, [pc, #168]	@ (8003a2c <QActive_register_+0x110>)
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d006      	beq.n	800399c <QActive_register_+0x80>
            prev_thre = QActive_registry_[p]->pthre;
 800398e:	4a27      	ldr	r2, [pc, #156]	@ (8003a2c <QActive_register_+0x110>)
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003996:	7b5b      	ldrb	r3, [r3, #13]
 8003998:	73fb      	strb	r3, [r7, #15]
            break;
 800399a:	e005      	b.n	80039a8 <QActive_register_+0x8c>
    for (p = (uint_fast8_t)me->prio - 1U; p > 0U; --p) {
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	3b01      	subs	r3, #1
 80039a0:	60bb      	str	r3, [r7, #8]
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d1ec      	bne.n	8003982 <QActive_register_+0x66>
        }
    }
    for (p = (uint_fast8_t)me->prio + 1U; p <= QF_MAX_ACTIVE; ++p) {
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	7b1b      	ldrb	r3, [r3, #12]
 80039ac:	3301      	adds	r3, #1
 80039ae:	60bb      	str	r3, [r7, #8]
 80039b0:	e00f      	b.n	80039d2 <QActive_register_+0xb6>
        if (QActive_registry_[p] != (QActive *)0) {
 80039b2:	4a1e      	ldr	r2, [pc, #120]	@ (8003a2c <QActive_register_+0x110>)
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d006      	beq.n	80039cc <QActive_register_+0xb0>
            next_thre = QActive_registry_[p]->pthre;
 80039be:	4a1b      	ldr	r2, [pc, #108]	@ (8003a2c <QActive_register_+0x110>)
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039c6:	7b5b      	ldrb	r3, [r3, #13]
 80039c8:	73bb      	strb	r3, [r7, #14]
            break;
 80039ca:	e005      	b.n	80039d8 <QActive_register_+0xbc>
    for (p = (uint_fast8_t)me->prio + 1U; p <= QF_MAX_ACTIVE; ++p) {
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	3301      	adds	r3, #1
 80039d0:	60bb      	str	r3, [r7, #8]
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	2b20      	cmp	r3, #32
 80039d6:	d9ec      	bls.n	80039b2 <QActive_register_+0x96>
        }
    }

    Q_ASSERT_INCRIT(190, (prev_thre <= me->pthre)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	7b5b      	ldrb	r3, [r3, #13]
 80039dc:	7bfa      	ldrb	r2, [r7, #15]
 80039de:	429a      	cmp	r2, r3
 80039e0:	d804      	bhi.n	80039ec <QActive_register_+0xd0>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	7b5b      	ldrb	r3, [r3, #13]
 80039e6:	7bba      	ldrb	r2, [r7, #14]
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d203      	bcs.n	80039f4 <QActive_register_+0xd8>
 80039ec:	21be      	movs	r1, #190	@ 0xbe
 80039ee:	4810      	ldr	r0, [pc, #64]	@ (8003a30 <QActive_register_+0x114>)
 80039f0:	f7fc ff70 	bl	80008d4 <Q_onError>
                          && (me->pthre <= next_thre));

    me->prio_dis  = (uint8_t)(~me->prio);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	7b1b      	ldrb	r3, [r3, #12]
 80039f8:	43db      	mvns	r3, r3
 80039fa:	b2da      	uxtb	r2, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    me->pthre_dis = (uint8_t)(~me->pthre);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	7b5b      	ldrb	r3, [r3, #13]
 8003a06:	43db      	mvns	r3, r3
 8003a08:	b2da      	uxtb	r2, r3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    #endif // Q_UNSAFE

    // register the AO at the QF-prio.
    QActive_registry_[me->prio] = me;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	7b1b      	ldrb	r3, [r3, #12]
 8003a14:	4619      	mov	r1, r3
 8003a16:	4a05      	ldr	r2, [pc, #20]	@ (8003a2c <QActive_register_+0x110>)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

    QF_MEM_APP();
    QF_CRIT_EXIT();
 8003a1e:	f7fe feb1 	bl	8002784 <QF_crit_exit_>
}
 8003a22:	bf00      	nop
 8003a24:	3710      	adds	r7, #16
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	2000028c 	.word	0x2000028c
 8003a30:	08004d64 	.word	0x08004d64

08003a34 <QEQueue_init>:
//${QF::QEQueue::init} .......................................................
//! @public @memberof QEQueue
void QEQueue_init(QEQueue * const me,
    struct QEvt const ** const qSto,
    uint_fast16_t const qLen)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b085      	sub	sp, #20
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	60b9      	str	r1, [r7, #8]
 8003a3e:	607a      	str	r2, [r7, #4]
    me->frontEvt = (QEvt *)0; // no events in the queue
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2200      	movs	r2, #0
 8003a44:	601a      	str	r2, [r3, #0]
    me->ring     = qSto;      // the beginning of the ring buffer
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	68ba      	ldr	r2, [r7, #8]
 8003a4a:	605a      	str	r2, [r3, #4]
    me->end      = (QEQueueCtr)qLen;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	b2da      	uxtb	r2, r3
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	721a      	strb	r2, [r3, #8]
    if (qLen != 0U) {
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d005      	beq.n	8003a66 <QEQueue_init+0x32>
        me->head = 0U;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	725a      	strb	r2, [r3, #9]
        me->tail = 0U;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2200      	movs	r2, #0
 8003a64:	729a      	strb	r2, [r3, #10]
    }
    me->nFree    = (QEQueueCtr)(qLen + 1U); // +1 for frontEvt
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	3301      	adds	r3, #1
 8003a6c:	b2da      	uxtb	r2, r3
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	72da      	strb	r2, [r3, #11]
    me->nMin     = me->nFree;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	7adb      	ldrb	r3, [r3, #11]
 8003a76:	b2da      	uxtb	r2, r3
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	731a      	strb	r2, [r3, #12]
}
 8003a7c:	bf00      	nop
 8003a7e:	3714      	adds	r7, #20
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <QEvt_verify_>:
static inline bool QEvt_verify_(QEvt const * const me) {
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
           && ((me->evtTag_ & 0xF0U) == QEVT_MARKER);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d007      	beq.n	8003aa6 <QEvt_verify_+0x1e>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	78db      	ldrb	r3, [r3, #3]
 8003a9a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a9e:	2be0      	cmp	r3, #224	@ 0xe0
 8003aa0:	d101      	bne.n	8003aa6 <QEvt_verify_+0x1e>
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e000      	b.n	8003aa8 <QEvt_verify_+0x20>
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	f003 0301 	and.w	r3, r3, #1
 8003aac:	b2db      	uxtb	r3, r3
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	370c      	adds	r7, #12
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr
	...

08003abc <QTimeEvt_ctorX>:
//! @public @memberof QTimeEvt
void QTimeEvt_ctorX(QTimeEvt * const me,
    QActive * const act,
    enum_t const sig,
    uint_fast8_t const tickRate)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	607a      	str	r2, [r7, #4]
 8003ac8:	603b      	str	r3, [r7, #0]
    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 8003aca:	f7fe fe49 	bl	8002760 <QF_crit_entry_>
    Q_REQUIRE_INCRIT(300, (sig != 0)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d002      	beq.n	8003ada <QTimeEvt_ctorX+0x1e>
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d004      	beq.n	8003ae4 <QTimeEvt_ctorX+0x28>
 8003ada:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8003ade:	4810      	ldr	r0, [pc, #64]	@ (8003b20 <QTimeEvt_ctorX+0x64>)
 8003ae0:	f7fc fef8 	bl	80008d4 <Q_onError>
        && (tickRate < QF_MAX_TICK_RATE));
    QF_CRIT_EXIT();
 8003ae4:	f7fe fe4e 	bl	8002784 <QF_crit_exit_>

    // Initialize the QEvt superclass:
    // NOTE: The refCtr_ attribute is not used in time events,
    // so it is reused to hold the tickRate as well as other
    // information about the status of the time event.
    me->super.sig     = (QSignal)sig;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	b29a      	uxth	r2, r3
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	801a      	strh	r2, [r3, #0]
    me->super.refCtr_ = (uint8_t)tickRate;
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	b2da      	uxtb	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	709a      	strb	r2, [r3, #2]
    me->super.evtTag_ = QEVT_MARKER;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	22e0      	movs	r2, #224	@ 0xe0
 8003afc:	70da      	strb	r2, [r3, #3]

    me->next     = (QTimeEvt *)0;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2200      	movs	r2, #0
 8003b02:	605a      	str	r2, [r3, #4]
    me->act      = act;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	68ba      	ldr	r2, [r7, #8]
 8003b08:	609a      	str	r2, [r3, #8]
    me->ctr      = 0U;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	60da      	str	r2, [r3, #12]
    me->interval = 0U;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2200      	movs	r2, #0
 8003b14:	611a      	str	r2, [r3, #16]
}
 8003b16:	bf00      	nop
 8003b18:	3710      	adds	r7, #16
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	08004d78 	.word	0x08004d78

08003b24 <QTimeEvt_armX>:
//${QF::QTimeEvt::armX} ......................................................
//! @public @memberof QTimeEvt
void QTimeEvt_armX(QTimeEvt * const me,
    QTimeEvtCtr const nTicks,
    QTimeEvtCtr const interval)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b086      	sub	sp, #24
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	607a      	str	r2, [r7, #4]
    uint_fast8_t const tickRate
                       = ((uint_fast8_t)me->super.refCtr_ & QTE_TICK_RATE);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	789b      	ldrb	r3, [r3, #2]
 8003b34:	b2db      	uxtb	r3, r3
    uint_fast8_t const tickRate
 8003b36:	f003 030f 	and.w	r3, r3, #15
 8003b3a:	617b      	str	r3, [r7, #20]
    QTimeEvtCtr const ctr = me->ctr;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	613b      	str	r3, [r7, #16]
    #ifdef Q_SPY
    uint_fast8_t const qsId = ((QActive *)(me->act))->prio;
    #endif

    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 8003b42:	f7fe fe0d 	bl	8002760 <QF_crit_entry_>
    QF_MEM_SYS();

    Q_REQUIRE_INCRIT(400, (me->act != (void *)0)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00c      	beq.n	8003b68 <QTimeEvt_armX+0x44>
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d109      	bne.n	8003b68 <QTimeEvt_armX+0x44>
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d006      	beq.n	8003b68 <QTimeEvt_armX+0x44>
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d103      	bne.n	8003b68 <QTimeEvt_armX+0x44>
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	881b      	ldrh	r3, [r3, #0]
 8003b64:	2b03      	cmp	r3, #3
 8003b66:	d804      	bhi.n	8003b72 <QTimeEvt_armX+0x4e>
 8003b68:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8003b6c:	4818      	ldr	r0, [pc, #96]	@ (8003bd0 <QTimeEvt_armX+0xac>)
 8003b6e:	f7fc feb1 	bl	80008d4 <Q_onError>
        && (me->super.sig >= (QSignal)Q_USER_SIG));
    #ifdef Q_UNSAFE
    Q_UNUSED_PAR(ctr);
    #endif

    me->ctr = nTicks;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	68ba      	ldr	r2, [r7, #8]
 8003b76:	60da      	str	r2, [r3, #12]
    me->interval = interval;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	611a      	str	r2, [r3, #16]

    // is the time event unlinked?
    // NOTE: For the duration of a single clock tick of the specified tick
    // rate a time event can be disarmed and yet still linked into the list
    // because un-linking is performed exclusively in QTimeEvt_tick_().
    if ((me->super.refCtr_ & QTE_IS_LINKED) == 0U) {
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	789b      	ldrb	r3, [r3, #2]
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	b25b      	sxtb	r3, r3
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	db1c      	blt.n	8003bc4 <QTimeEvt_armX+0xa0>
        // mark as linked
        me->super.refCtr_ |= QTE_IS_LINKED;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	789b      	ldrb	r3, [r3, #2]
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003b94:	b2da      	uxtb	r2, r3
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	709a      	strb	r2, [r3, #2]
        // "freshly armed" link list based on QTimeEvt_timeEvtHead_[tickRate].act.
        // Only later, inside the QTimeEvt_tick_() function, the "freshly armed"
        // list is appended to the main list of armed time events based on
        // QTimeEvt_timeEvtHead_[tickRate].next. Again, this is to keep any
        // changes to the main list exclusively inside the QTimeEvt_tick_().
        me->next = (QTimeEvt *)QTimeEvt_timeEvtHead_[tickRate].act;
 8003b9a:	490e      	ldr	r1, [pc, #56]	@ (8003bd4 <QTimeEvt_armX+0xb0>)
 8003b9c:	697a      	ldr	r2, [r7, #20]
 8003b9e:	4613      	mov	r3, r2
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	4413      	add	r3, r2
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	440b      	add	r3, r1
 8003ba8:	3308      	adds	r3, #8
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	605a      	str	r2, [r3, #4]
        QTimeEvt_timeEvtHead_[tickRate].act = me;
 8003bb0:	4908      	ldr	r1, [pc, #32]	@ (8003bd4 <QTimeEvt_armX+0xb0>)
 8003bb2:	697a      	ldr	r2, [r7, #20]
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	4413      	add	r3, r2
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	440b      	add	r3, r1
 8003bbe:	3308      	adds	r3, #8
 8003bc0:	68fa      	ldr	r2, [r7, #12]
 8003bc2:	601a      	str	r2, [r3, #0]
        QS_TEC_PRE_(interval); // the interval
        QS_U8_PRE_(tickRate);  // tick rate
    QS_END_PRE_()

    QF_MEM_APP();
    QF_CRIT_EXIT();
 8003bc4:	f7fe fdde 	bl	8002784 <QF_crit_exit_>
}
 8003bc8:	bf00      	nop
 8003bca:	3718      	adds	r7, #24
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	08004d78 	.word	0x08004d78
 8003bd4:	20000358 	.word	0x20000358

08003bd8 <QTimeEvt_disarm>:

//${QF::QTimeEvt::disarm} ....................................................
//! @public @memberof QTimeEvt
bool QTimeEvt_disarm(QTimeEvt * const me) {
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
    #ifdef Q_SPY
    uint_fast8_t const qsId = QACTIVE_CAST_(me->act)->prio;
    #endif

    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 8003be0:	f7fe fdbe 	bl	8002760 <QF_crit_entry_>
    QF_MEM_SYS();

    // is the time event actually armed?
    bool wasArmed;
    if (me->ctr != 0U) {
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d00d      	beq.n	8003c08 <QTimeEvt_disarm+0x30>
        wasArmed = true;
 8003bec:	2301      	movs	r3, #1
 8003bee:	73fb      	strb	r3, [r7, #15]
        me->super.refCtr_ |= QTE_WAS_DISARMED;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	789b      	ldrb	r3, [r3, #2]
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003bfa:	b2da      	uxtb	r2, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	709a      	strb	r2, [r3, #2]
            QS_TEC_PRE_(me->ctr);      // the # ticks
            QS_TEC_PRE_(me->interval); // the interval
            QS_U8_PRE_(me->super.refCtr_ & QTE_TICK_RATE); // tick rate
        QS_END_PRE_()

        me->ctr = 0U; // schedule removal from the list
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	60da      	str	r2, [r3, #12]
 8003c06:	e009      	b.n	8003c1c <QTimeEvt_disarm+0x44>
    }
    else { // the time event was already disarmed automatically
        wasArmed = false;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	73fb      	strb	r3, [r7, #15]
        me->super.refCtr_ &= (uint8_t)(~QTE_WAS_DISARMED & 0xFFU);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	789b      	ldrb	r3, [r3, #2]
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c16:	b2da      	uxtb	r2, r3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	709a      	strb	r2, [r3, #2]
            QS_U8_PRE_(me->super.refCtr_ & QTE_TICK_RATE); // tick rate
        QS_END_PRE_()
    }

    QF_MEM_APP();
    QF_CRIT_EXIT();
 8003c1c:	f7fe fdb2 	bl	8002784 <QF_crit_exit_>

    return wasArmed;
 8003c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3710      	adds	r7, #16
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
	...

08003c2c <QTimeEvt_tick_>:
//${QF::QTimeEvt::tick_} .....................................................
//! @static @private @memberof QTimeEvt
void QTimeEvt_tick_(
    uint_fast8_t const tickRate,
    void const * const sender)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b086      	sub	sp, #24
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	6039      	str	r1, [r7, #0]
    #ifndef Q_SPY
    Q_UNUSED_PAR(sender);
    #endif

    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 8003c36:	f7fe fd93 	bl	8002760 <QF_crit_entry_>
    QF_MEM_SYS();

    Q_REQUIRE_INCRIT(100, tickRate < Q_DIM(QTimeEvt_timeEvtHead_));
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d003      	beq.n	8003c48 <QTimeEvt_tick_+0x1c>
 8003c40:	2164      	movs	r1, #100	@ 0x64
 8003c42:	4854      	ldr	r0, [pc, #336]	@ (8003d94 <QTimeEvt_tick_+0x168>)
 8003c44:	f7fc fe46 	bl	80008d4 <Q_onError>

    QTimeEvt *prev = &QTimeEvt_timeEvtHead_[tickRate];
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	4613      	mov	r3, r2
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	4413      	add	r3, r2
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	4a51      	ldr	r2, [pc, #324]	@ (8003d98 <QTimeEvt_tick_+0x16c>)
 8003c54:	4413      	add	r3, r2
 8003c56:	617b      	str	r3, [r7, #20]
        QS_TEC_PRE_(prev->ctr);   // tick ctr
        QS_U8_PRE_(tickRate);     // tick rate
    QS_END_PRE_()

    // scan the linked-list of time events at this rate...
    uint_fast8_t limit = 2U*QF_MAX_ACTIVE; // loop hard limit
 8003c58:	2340      	movs	r3, #64	@ 0x40
 8003c5a:	613b      	str	r3, [r7, #16]
    for (; limit > 0U; --limit) {
 8003c5c:	e086      	b.n	8003d6c <QTimeEvt_tick_+0x140>
        QTimeEvt *e = prev->next; // advance down the time evt. list
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	60fb      	str	r3, [r7, #12]

        if (e == (QTimeEvt *)0) { // end of the list?
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d129      	bne.n	8003cbe <QTimeEvt_tick_+0x92>

            // any new time events armed since the last QTimeEvt_tick_()?
            if (QTimeEvt_timeEvtHead_[tickRate].act != (void *)0) {
 8003c6a:	494b      	ldr	r1, [pc, #300]	@ (8003d98 <QTimeEvt_tick_+0x16c>)
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	4613      	mov	r3, r2
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	4413      	add	r3, r2
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	440b      	add	r3, r1
 8003c78:	3308      	adds	r3, #8
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d07a      	beq.n	8003d76 <QTimeEvt_tick_+0x14a>

                // sanity check
                Q_ASSERT_INCRIT(110, prev != (QTimeEvt *)0);
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d103      	bne.n	8003c8e <QTimeEvt_tick_+0x62>
 8003c86:	216e      	movs	r1, #110	@ 0x6e
 8003c88:	4842      	ldr	r0, [pc, #264]	@ (8003d94 <QTimeEvt_tick_+0x168>)
 8003c8a:	f7fc fe23 	bl	80008d4 <Q_onError>
                prev->next = (QTimeEvt *)QTimeEvt_timeEvtHead_[tickRate].act;
 8003c8e:	4942      	ldr	r1, [pc, #264]	@ (8003d98 <QTimeEvt_tick_+0x16c>)
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	4613      	mov	r3, r2
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	4413      	add	r3, r2
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	440b      	add	r3, r1
 8003c9c:	3308      	adds	r3, #8
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	605a      	str	r2, [r3, #4]
                QTimeEvt_timeEvtHead_[tickRate].act = (void *)0;
 8003ca4:	493c      	ldr	r1, [pc, #240]	@ (8003d98 <QTimeEvt_tick_+0x16c>)
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	4613      	mov	r3, r2
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	4413      	add	r3, r2
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	440b      	add	r3, r1
 8003cb2:	3308      	adds	r3, #8
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	601a      	str	r2, [r3, #0]
                e = prev->next; // switch to the new list
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	60fb      	str	r3, [r7, #12]
                break; // terminate the for-loop
            }
        }

        // the time event 'e' must be valid
        Q_ASSERT_INCRIT(112, QEvt_verify_(Q_EVT_CAST(QEvt)));
 8003cbe:	68f8      	ldr	r0, [r7, #12]
 8003cc0:	f7ff fee2 	bl	8003a88 <QEvt_verify_>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d103      	bne.n	8003cd2 <QTimeEvt_tick_+0xa6>
 8003cca:	2170      	movs	r1, #112	@ 0x70
 8003ccc:	4831      	ldr	r0, [pc, #196]	@ (8003d94 <QTimeEvt_tick_+0x168>)
 8003cce:	f7fc fe01 	bl	80008d4 <Q_onError>

        if (e->ctr == 0U) { // time event scheduled for removal?
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d110      	bne.n	8003cfc <QTimeEvt_tick_+0xd0>
            prev->next = e->next;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	685a      	ldr	r2, [r3, #4]
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	605a      	str	r2, [r3, #4]
            // mark time event 'e' as NOT linked
            e->super.refCtr_ &= (uint8_t)(~QTE_IS_LINKED & 0xFFU);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	789b      	ldrb	r3, [r3, #2]
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003cec:	b2da      	uxtb	r2, r3
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	709a      	strb	r2, [r3, #2]
            // do NOT advance the prev pointer
            QF_MEM_APP();
            QF_CRIT_EXIT(); // exit crit. section to reduce latency
 8003cf2:	f7fe fd47 	bl	8002784 <QF_crit_exit_>
            // another entry to a critical section, the critical section
            // might not be really exited, but rather the two adjacent
            // critical sections would be MERGED. The QF_CRIT_EXIT_NOP()
            // macro contains minimal code required to prevent such merging
            // of critical sections in QF ports, in which it can occur.
            QF_CRIT_EXIT_NOP();
 8003cf6:	f3bf 8f6f 	isb	sy
 8003cfa:	e032      	b.n	8003d62 <QTimeEvt_tick_+0x136>
        }
        else {
            --e->ctr;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	1e5a      	subs	r2, r3, #1
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	60da      	str	r2, [r3, #12]

            if (e->ctr == 0U) { // is time event about to expire?
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d123      	bne.n	8003d56 <QTimeEvt_tick_+0x12a>
                QActive * const act = (QActive *)e->act;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	60bb      	str	r3, [r7, #8]

                if (e->interval != 0U) { // periodic time evt?
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	691b      	ldr	r3, [r3, #16]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d006      	beq.n	8003d2a <QTimeEvt_tick_+0xfe>
                    e->ctr = e->interval; // rearm the time event
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	691a      	ldr	r2, [r3, #16]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	60da      	str	r2, [r3, #12]
                    prev = e; // advance to this time event
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	617b      	str	r3, [r7, #20]
 8003d28:	e00b      	b.n	8003d42 <QTimeEvt_tick_+0x116>
                }
                else { // one-shot time event: automatically disarm
                    prev->next = e->next;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	685a      	ldr	r2, [r3, #4]
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	605a      	str	r2, [r3, #4]

                    // mark time event 'e' as NOT linked
                    e->super.refCtr_ &= (uint8_t)(~QTE_IS_LINKED & 0xFFU);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	789b      	ldrb	r3, [r3, #2]
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d3c:	b2da      	uxtb	r2, r3
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	709a      	strb	r2, [r3, #2]
                    // QACTIVE_POST() asserts if the queue overflows
                    QACTIVE_POST(act, &e->super, sender);
                }
    #else
                QF_MEM_APP();
                QF_CRIT_EXIT(); // exit crit. section before posting
 8003d42:	f7fe fd1f 	bl	8002784 <QF_crit_exit_>

                // QACTIVE_POST() asserts if the queue overflows
                QACTIVE_POST(act, &e->super, sender);
 8003d46:	68f9      	ldr	r1, [r7, #12]
 8003d48:	2300      	movs	r3, #0
 8003d4a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003d4e:	68b8      	ldr	r0, [r7, #8]
 8003d50:	f7ff f964 	bl	800301c <QActive_post_>
 8003d54:	e005      	b.n	8003d62 <QTimeEvt_tick_+0x136>
    #endif
            }
            else {
                prev = e; // advance to this time event
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	617b      	str	r3, [r7, #20]

                QF_MEM_APP();
                QF_CRIT_EXIT(); // exit crit. section to reduce latency
 8003d5a:	f7fe fd13 	bl	8002784 <QF_crit_exit_>

                // prevent merging critical sections, see NOTE above
                QF_CRIT_EXIT_NOP();
 8003d5e:	f3bf 8f6f 	isb	sy
            }
        }
        QF_CRIT_ENTRY(); // re-enter crit. section to continue the loop
 8003d62:	f7fe fcfd 	bl	8002760 <QF_crit_entry_>
    for (; limit > 0U; --limit) {
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	3b01      	subs	r3, #1
 8003d6a:	613b      	str	r3, [r7, #16]
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	f47f af75 	bne.w	8003c5e <QTimeEvt_tick_+0x32>
 8003d74:	e000      	b.n	8003d78 <QTimeEvt_tick_+0x14c>
                break; // terminate the for-loop
 8003d76:	bf00      	nop
        QF_MEM_SYS();
    }

    Q_ENSURE_INCRIT(190, limit > 0U);
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d103      	bne.n	8003d86 <QTimeEvt_tick_+0x15a>
 8003d7e:	21be      	movs	r1, #190	@ 0xbe
 8003d80:	4804      	ldr	r0, [pc, #16]	@ (8003d94 <QTimeEvt_tick_+0x168>)
 8003d82:	f7fc fda7 	bl	80008d4 <Q_onError>
    QF_MEM_APP();
    QF_CRIT_EXIT();
 8003d86:	f7fe fcfd 	bl	8002784 <QF_crit_exit_>
}
 8003d8a:	bf00      	nop
 8003d8c:	3718      	adds	r7, #24
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop
 8003d94:	08004d78 	.word	0x08004d78
 8003d98:	20000358 	.word	0x20000358

08003d9c <QPSet_isEmpty>:
static inline bool QPSet_isEmpty(QPSet const * const me) {
 8003d9c:	b480      	push	{r7}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
    return (me->bits[0] == 0U);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	bf0c      	ite	eq
 8003dac:	2301      	moveq	r3, #1
 8003dae:	2300      	movne	r3, #0
 8003db0:	b2db      	uxtb	r3, r3
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	370c      	adds	r7, #12
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr

08003dbe <QPSet_remove>:
{
 8003dbe:	b480      	push	{r7}
 8003dc0:	b083      	sub	sp, #12
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
 8003dc6:	6039      	str	r1, [r7, #0]
    me->bits[0] = (me->bits[0] & (QPSetBits)(~((QPSetBits)1U << (n - 1U))));
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	3b01      	subs	r3, #1
 8003dd0:	2101      	movs	r1, #1
 8003dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8003dd6:	43db      	mvns	r3, r3
 8003dd8:	401a      	ands	r2, r3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	601a      	str	r2, [r3, #0]
}
 8003dde:	bf00      	nop
 8003de0:	370c      	adds	r7, #12
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr

08003dea <QPSet_findMax>:
static inline uint_fast8_t QPSet_findMax(QPSet const * const me) {
 8003dea:	b480      	push	{r7}
 8003dec:	b083      	sub	sp, #12
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
    return QF_LOG2(me->bits[0]);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	fab3 f383 	clz	r3, r3
 8003dfa:	f1c3 0320 	rsb	r3, r3, #32
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	370c      	adds	r7, #12
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr

08003e0a <QPSet_update_>:
{
 8003e0a:	b480      	push	{r7}
 8003e0c:	b083      	sub	sp, #12
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
 8003e12:	6039      	str	r1, [r7, #0]
    dis->bits[0] = ~me->bits[0];
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	43da      	mvns	r2, r3
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	601a      	str	r2, [r3, #0]
}
 8003e1e:	bf00      	nop
 8003e20:	370c      	adds	r7, #12
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr

08003e2a <QPSet_verify_>:
{
 8003e2a:	b480      	push	{r7}
 8003e2c:	b083      	sub	sp, #12
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
 8003e32:	6039      	str	r1, [r7, #0]
    return me->bits[0] == (QPSetBits)(~dis->bits[0]);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	43db      	mvns	r3, r3
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	bf0c      	ite	eq
 8003e42:	2301      	moveq	r3, #1
 8003e44:	2300      	movne	r3, #0
 8003e46:	b2db      	uxtb	r3, r3
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	370c      	adds	r7, #12
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr

08003e54 <QK_schedLock>:
//${QK::QK-base::priv_} ......................................................
QK_Attr QK_priv_;

//${QK::QK-base::schedLock} ..................................................
//! @static @public @memberof QK
QSchedStatus QK_schedLock(uint_fast8_t const ceiling) {
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b084      	sub	sp, #16
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 8003e5c:	f7fe fc80 	bl	8002760 <QF_crit_entry_>
    __asm volatile ("mrs %0,ipsr" : "=r" (regIPSR));
 8003e60:	f3ef 8305 	mrs	r3, IPSR
 8003e64:	60bb      	str	r3, [r7, #8]
    return regIPSR;
 8003e66:	68bb      	ldr	r3, [r7, #8]
    QF_MEM_SYS();

    Q_REQUIRE_INCRIT(100, !QK_ISR_CONTEXT_());
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d003      	beq.n	8003e74 <QK_schedLock+0x20>
 8003e6c:	2164      	movs	r1, #100	@ 0x64
 8003e6e:	4813      	ldr	r0, [pc, #76]	@ (8003ebc <QK_schedLock+0x68>)
 8003e70:	f7fc fd30 	bl	80008d4 <Q_onError>
    Q_REQUIRE_INCRIT(102, QK_priv_.lockCeil
 8003e74:	4b12      	ldr	r3, [pc, #72]	@ (8003ec0 <QK_schedLock+0x6c>)
 8003e76:	691a      	ldr	r2, [r3, #16]
 8003e78:	4b11      	ldr	r3, [pc, #68]	@ (8003ec0 <QK_schedLock+0x6c>)
 8003e7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e7c:	43db      	mvns	r3, r3
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d003      	beq.n	8003e8a <QK_schedLock+0x36>
 8003e82:	2166      	movs	r1, #102	@ 0x66
 8003e84:	480d      	ldr	r0, [pc, #52]	@ (8003ebc <QK_schedLock+0x68>)
 8003e86:	f7fc fd25 	bl	80008d4 <Q_onError>
        == (uint_fast8_t)(~QK_priv_.lockCeil_dis));

    // first store the previous lock prio
    QSchedStatus stat;
    if (ceiling > QK_priv_.lockCeil) { // raising the lock ceiling?
 8003e8a:	4b0d      	ldr	r3, [pc, #52]	@ (8003ec0 <QK_schedLock+0x6c>)
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d90a      	bls.n	8003eaa <QK_schedLock+0x56>
            // the previous lock ceiling & new lock ceiling
            QS_2U8_PRE_((uint8_t)QK_priv_.lockCeil, (uint8_t)ceiling);
        QS_END_PRE_()

        // previous status of the lock
        stat = (QSchedStatus)QK_priv_.lockCeil;
 8003e94:	4b0a      	ldr	r3, [pc, #40]	@ (8003ec0 <QK_schedLock+0x6c>)
 8003e96:	691b      	ldr	r3, [r3, #16]
 8003e98:	60fb      	str	r3, [r7, #12]

        // new status of the lock
        QK_priv_.lockCeil = ceiling;
 8003e9a:	4a09      	ldr	r2, [pc, #36]	@ (8003ec0 <QK_schedLock+0x6c>)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6113      	str	r3, [r2, #16]
    #ifndef Q_UNSAFE
        QK_priv_.lockCeil_dis = (uint_fast8_t)(~ceiling);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	43db      	mvns	r3, r3
 8003ea4:	4a06      	ldr	r2, [pc, #24]	@ (8003ec0 <QK_schedLock+0x6c>)
 8003ea6:	6293      	str	r3, [r2, #40]	@ 0x28
 8003ea8:	e001      	b.n	8003eae <QK_schedLock+0x5a>
    #endif
    }
    else {
        stat = 0xFFU; // scheduler not locked
 8003eaa:	23ff      	movs	r3, #255	@ 0xff
 8003eac:	60fb      	str	r3, [r7, #12]
    }

    QF_MEM_APP();
    QF_CRIT_EXIT();
 8003eae:	f7fe fc69 	bl	8002784 <QF_crit_exit_>

    return stat; // return the status to be saved in a stack variable
 8003eb2:	68fb      	ldr	r3, [r7, #12]
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3710      	adds	r7, #16
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}
 8003ebc:	08004d80 	.word	0x08004d80
 8003ec0:	2000036c 	.word	0x2000036c

08003ec4 <QK_schedUnlock>:

//${QK::QK-base::schedUnlock} ................................................
//! @static @public @memberof QK
void QK_schedUnlock(QSchedStatus const prevCeil) {
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b084      	sub	sp, #16
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
    // has the scheduler been actually locked by the last QK_schedLock()?
    if (prevCeil != 0xFFU) {
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2bff      	cmp	r3, #255	@ 0xff
 8003ed0:	d02b      	beq.n	8003f2a <QK_schedUnlock+0x66>
        QF_CRIT_STAT
        QF_CRIT_ENTRY();
 8003ed2:	f7fe fc45 	bl	8002760 <QF_crit_entry_>
        QF_MEM_SYS();

        Q_REQUIRE_INCRIT(202, QK_priv_.lockCeil
 8003ed6:	4b17      	ldr	r3, [pc, #92]	@ (8003f34 <QK_schedUnlock+0x70>)
 8003ed8:	691a      	ldr	r2, [r3, #16]
 8003eda:	4b16      	ldr	r3, [pc, #88]	@ (8003f34 <QK_schedUnlock+0x70>)
 8003edc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ede:	43db      	mvns	r3, r3
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d003      	beq.n	8003eec <QK_schedUnlock+0x28>
 8003ee4:	21ca      	movs	r1, #202	@ 0xca
 8003ee6:	4814      	ldr	r0, [pc, #80]	@ (8003f38 <QK_schedUnlock+0x74>)
 8003ee8:	f7fc fcf4 	bl	80008d4 <Q_onError>
    __asm volatile ("mrs %0,ipsr" : "=r" (regIPSR));
 8003eec:	f3ef 8305 	mrs	r3, IPSR
 8003ef0:	60fb      	str	r3, [r7, #12]
    return regIPSR;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
            == (uint_fast8_t)(~QK_priv_.lockCeil_dis));
        Q_REQUIRE_INCRIT(210, (!QK_ISR_CONTEXT_())
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d104      	bne.n	8003f02 <QK_schedUnlock+0x3e>
 8003ef8:	4b0e      	ldr	r3, [pc, #56]	@ (8003f34 <QK_schedUnlock+0x70>)
 8003efa:	691b      	ldr	r3, [r3, #16]
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d303      	bcc.n	8003f0a <QK_schedUnlock+0x46>
 8003f02:	21d2      	movs	r1, #210	@ 0xd2
 8003f04:	480c      	ldr	r0, [pc, #48]	@ (8003f38 <QK_schedUnlock+0x74>)
 8003f06:	f7fc fce5 	bl	80008d4 <Q_onError>
            // current lock ceiling (old), previous lock ceiling (new)
            QS_2U8_PRE_((uint8_t)QK_priv_.lockCeil, (uint8_t)prevCeil);
        QS_END_PRE_()

        // restore the previous lock ceiling
        QK_priv_.lockCeil = prevCeil;
 8003f0a:	4a0a      	ldr	r2, [pc, #40]	@ (8003f34 <QK_schedUnlock+0x70>)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6113      	str	r3, [r2, #16]
    #ifndef Q_UNSAFE
        QK_priv_.lockCeil_dis = (uint_fast8_t)(~prevCeil);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	43db      	mvns	r3, r3
 8003f14:	4a07      	ldr	r2, [pc, #28]	@ (8003f34 <QK_schedUnlock+0x70>)
 8003f16:	6293      	str	r3, [r2, #40]	@ 0x28
    #endif

        // find if any AOs should be run after unlocking the scheduler
        if (QK_sched_() != 0U) { // preemption needed?
 8003f18:	f000 f810 	bl	8003f3c <QK_sched_>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d001      	beq.n	8003f26 <QK_schedUnlock+0x62>
            QK_activate_(); // activate any unlocked AOs
 8003f22:	f000 f86f 	bl	8004004 <QK_activate_>
        }

        QF_MEM_APP();
        QF_CRIT_EXIT();
 8003f26:	f7fe fc2d 	bl	8002784 <QF_crit_exit_>
    }
}
 8003f2a:	bf00      	nop
 8003f2c:	3710      	adds	r7, #16
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	2000036c 	.word	0x2000036c
 8003f38:	08004d80 	.word	0x08004d80

08003f3c <QK_sched_>:

//${QK::QK-base::sched_} .....................................................
//! @static @private @memberof QK
uint_fast8_t QK_sched_(void) {
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b082      	sub	sp, #8
 8003f40:	af00      	add	r7, sp, #0
    // NOTE: this function is entered with interrupts DISABLED

    Q_REQUIRE_INCRIT(402, QPSet_verify_(&QK_priv_.readySet,
 8003f42:	492d      	ldr	r1, [pc, #180]	@ (8003ff8 <QK_sched_+0xbc>)
 8003f44:	482d      	ldr	r0, [pc, #180]	@ (8003ffc <QK_sched_+0xc0>)
 8003f46:	f7ff ff70 	bl	8003e2a <QPSet_verify_>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d104      	bne.n	8003f5a <QK_sched_+0x1e>
 8003f50:	f44f 71c9 	mov.w	r1, #402	@ 0x192
 8003f54:	482a      	ldr	r0, [pc, #168]	@ (8004000 <QK_sched_+0xc4>)
 8003f56:	f7fc fcbd 	bl	80008d4 <Q_onError>
                                        &QK_priv_.readySet_dis));
    uint_fast8_t p;
    if (QPSet_isEmpty(&QK_priv_.readySet)) {
 8003f5a:	4828      	ldr	r0, [pc, #160]	@ (8003ffc <QK_sched_+0xc0>)
 8003f5c:	f7ff ff1e 	bl	8003d9c <QPSet_isEmpty>
 8003f60:	4603      	mov	r3, r0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d002      	beq.n	8003f6c <QK_sched_+0x30>
        p = 0U; // no activation needed
 8003f66:	2300      	movs	r3, #0
 8003f68:	607b      	str	r3, [r7, #4]
 8003f6a:	e03f      	b.n	8003fec <QK_sched_+0xb0>
    }
    else {
        // find the highest-prio AO with non-empty event queue
        p = QPSet_findMax(&QK_priv_.readySet);
 8003f6c:	4823      	ldr	r0, [pc, #140]	@ (8003ffc <QK_sched_+0xc0>)
 8003f6e:	f7ff ff3c 	bl	8003dea <QPSet_findMax>
 8003f72:	6078      	str	r0, [r7, #4]

        Q_ASSERT_INCRIT(412,
 8003f74:	4b21      	ldr	r3, [pc, #132]	@ (8003ffc <QK_sched_+0xc0>)
 8003f76:	68da      	ldr	r2, [r3, #12]
 8003f78:	4b20      	ldr	r3, [pc, #128]	@ (8003ffc <QK_sched_+0xc0>)
 8003f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f7c:	43db      	mvns	r3, r3
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d004      	beq.n	8003f8c <QK_sched_+0x50>
 8003f82:	f44f 71ce 	mov.w	r1, #412	@ 0x19c
 8003f86:	481e      	ldr	r0, [pc, #120]	@ (8004000 <QK_sched_+0xc4>)
 8003f88:	f7fc fca4 	bl	80008d4 <Q_onError>
            QK_priv_.actThre == (uint_fast8_t)(~QK_priv_.actThre_dis));

        // is the AO's prio. below the active preemption-threshold?
        if (p <= QK_priv_.actThre) {
 8003f8c:	4b1b      	ldr	r3, [pc, #108]	@ (8003ffc <QK_sched_+0xc0>)
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d802      	bhi.n	8003f9c <QK_sched_+0x60>
            p = 0U; // no activation needed
 8003f96:	2300      	movs	r3, #0
 8003f98:	607b      	str	r3, [r7, #4]
 8003f9a:	e027      	b.n	8003fec <QK_sched_+0xb0>
        }
        else {
            Q_ASSERT_INCRIT(422, QK_priv_.lockCeil
 8003f9c:	4b17      	ldr	r3, [pc, #92]	@ (8003ffc <QK_sched_+0xc0>)
 8003f9e:	691a      	ldr	r2, [r3, #16]
 8003fa0:	4b16      	ldr	r3, [pc, #88]	@ (8003ffc <QK_sched_+0xc0>)
 8003fa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fa4:	43db      	mvns	r3, r3
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d004      	beq.n	8003fb4 <QK_sched_+0x78>
 8003faa:	f44f 71d3 	mov.w	r1, #422	@ 0x1a6
 8003fae:	4814      	ldr	r0, [pc, #80]	@ (8004000 <QK_sched_+0xc4>)
 8003fb0:	f7fc fc90 	bl	80008d4 <Q_onError>
                == (uint_fast8_t)(~QK_priv_.lockCeil_dis));

            // is the AO's prio. below the lock-ceiling?
            if (p <= QK_priv_.lockCeil) {
 8003fb4:	4b11      	ldr	r3, [pc, #68]	@ (8003ffc <QK_sched_+0xc0>)
 8003fb6:	691b      	ldr	r3, [r3, #16]
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d802      	bhi.n	8003fc4 <QK_sched_+0x88>
                p = 0U; // no activation needed
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	607b      	str	r3, [r7, #4]
 8003fc2:	e013      	b.n	8003fec <QK_sched_+0xb0>
            }
            else {
                Q_ASSERT_INCRIT(432, QK_priv_.nextPrio
 8003fc4:	4b0d      	ldr	r3, [pc, #52]	@ (8003ffc <QK_sched_+0xc0>)
 8003fc6:	689a      	ldr	r2, [r3, #8]
 8003fc8:	4b0c      	ldr	r3, [pc, #48]	@ (8003ffc <QK_sched_+0xc0>)
 8003fca:	6a1b      	ldr	r3, [r3, #32]
 8003fcc:	43db      	mvns	r3, r3
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d004      	beq.n	8003fdc <QK_sched_+0xa0>
 8003fd2:	f44f 71d8 	mov.w	r1, #432	@ 0x1b0
 8003fd6:	480a      	ldr	r0, [pc, #40]	@ (8004000 <QK_sched_+0xc4>)
 8003fd8:	f7fc fc7c 	bl	80008d4 <Q_onError>
                    == (uint_fast8_t)(~QK_priv_.nextPrio_dis));
                QK_priv_.nextPrio = p; // next AO to run
 8003fdc:	4a07      	ldr	r2, [pc, #28]	@ (8003ffc <QK_sched_+0xc0>)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6093      	str	r3, [r2, #8]
    #ifndef Q_UNSAFE
                QK_priv_.nextPrio_dis = (uint_fast8_t)(~QK_priv_.nextPrio);
 8003fe2:	4b06      	ldr	r3, [pc, #24]	@ (8003ffc <QK_sched_+0xc0>)
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	43db      	mvns	r3, r3
 8003fe8:	4a04      	ldr	r2, [pc, #16]	@ (8003ffc <QK_sched_+0xc0>)
 8003fea:	6213      	str	r3, [r2, #32]
    #endif
            }
        }
    }

    return p;
 8003fec:	687b      	ldr	r3, [r7, #4]
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3708      	adds	r7, #8
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	20000384 	.word	0x20000384
 8003ffc:	2000036c 	.word	0x2000036c
 8004000:	08004d80 	.word	0x08004d80

08004004 <QK_activate_>:

//${QK::QK-base::activate_} ..................................................
//! @static @private @memberof QK
void QK_activate_(void) {
 8004004:	b580      	push	{r7, lr}
 8004006:	b086      	sub	sp, #24
 8004008:	af00      	add	r7, sp, #0
    // NOTE: this function is entered with interrupts DISABLED

    uint_fast8_t const prio_in = QK_priv_.actPrio; // save initial prio.
 800400a:	4b76      	ldr	r3, [pc, #472]	@ (80041e4 <QK_activate_+0x1e0>)
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	60fb      	str	r3, [r7, #12]
    uint_fast8_t p = QK_priv_.nextPrio; // next prio to run
 8004010:	4b74      	ldr	r3, [pc, #464]	@ (80041e4 <QK_activate_+0x1e0>)
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	617b      	str	r3, [r7, #20]

    Q_REQUIRE_INCRIT(502,
 8004016:	4b73      	ldr	r3, [pc, #460]	@ (80041e4 <QK_activate_+0x1e0>)
 8004018:	69db      	ldr	r3, [r3, #28]
 800401a:	43db      	mvns	r3, r3
 800401c:	68fa      	ldr	r2, [r7, #12]
 800401e:	429a      	cmp	r2, r3
 8004020:	d105      	bne.n	800402e <QK_activate_+0x2a>
 8004022:	4b70      	ldr	r3, [pc, #448]	@ (80041e4 <QK_activate_+0x1e0>)
 8004024:	6a1b      	ldr	r3, [r3, #32]
 8004026:	43db      	mvns	r3, r3
 8004028:	697a      	ldr	r2, [r7, #20]
 800402a:	429a      	cmp	r2, r3
 800402c:	d004      	beq.n	8004038 <QK_activate_+0x34>
 800402e:	f44f 71fb 	mov.w	r1, #502	@ 0x1f6
 8004032:	486d      	ldr	r0, [pc, #436]	@ (80041e8 <QK_activate_+0x1e4>)
 8004034:	f7fc fc4e 	bl	80008d4 <Q_onError>
       (prio_in == (uint_fast8_t)(~QK_priv_.actPrio_dis))
       && (p == (uint_fast8_t)(~QK_priv_.nextPrio_dis)));
    Q_REQUIRE_INCRIT(510, (prio_in <= QF_MAX_ACTIVE)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2b20      	cmp	r3, #32
 800403c:	d805      	bhi.n	800404a <QK_activate_+0x46>
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d002      	beq.n	800404a <QK_activate_+0x46>
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	2b20      	cmp	r3, #32
 8004048:	d904      	bls.n	8004054 <QK_activate_+0x50>
 800404a:	f44f 71ff 	mov.w	r1, #510	@ 0x1fe
 800404e:	4866      	ldr	r0, [pc, #408]	@ (80041e8 <QK_activate_+0x1e4>)
 8004050:	f7fc fc40 	bl	80008d4 <Q_onError>

    #if (defined QF_ON_CONTEXT_SW) || (defined Q_SPY)
    uint_fast8_t pprev = prio_in;
    #endif // QF_ON_CONTEXT_SW || Q_SPY

    QK_priv_.nextPrio = 0U; // clear for the next time
 8004054:	4b63      	ldr	r3, [pc, #396]	@ (80041e4 <QK_activate_+0x1e0>)
 8004056:	2200      	movs	r2, #0
 8004058:	609a      	str	r2, [r3, #8]
    #ifndef Q_UNSAFE
    QK_priv_.nextPrio_dis = (uint_fast8_t)(~0U);
 800405a:	4b62      	ldr	r3, [pc, #392]	@ (80041e4 <QK_activate_+0x1e0>)
 800405c:	f04f 32ff 	mov.w	r2, #4294967295
 8004060:	621a      	str	r2, [r3, #32]
    #endif

    uint_fast8_t pthre_in;
    QActive *a;
    if (prio_in == 0U) { // preempting the idle thread?
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d102      	bne.n	800406e <QK_activate_+0x6a>
        pthre_in = 0U;
 8004068:	2300      	movs	r3, #0
 800406a:	613b      	str	r3, [r7, #16]
 800406c:	e01c      	b.n	80040a8 <QK_activate_+0xa4>
    }
    else {
        a = QActive_registry_[prio_in];
 800406e:	4a5f      	ldr	r2, [pc, #380]	@ (80041ec <QK_activate_+0x1e8>)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004076:	60bb      	str	r3, [r7, #8]
        Q_ASSERT_INCRIT(510, a != (QActive *)0);
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d104      	bne.n	8004088 <QK_activate_+0x84>
 800407e:	f44f 71ff 	mov.w	r1, #510	@ 0x1fe
 8004082:	4859      	ldr	r0, [pc, #356]	@ (80041e8 <QK_activate_+0x1e4>)
 8004084:	f7fc fc26 	bl	80008d4 <Q_onError>

        pthre_in = (uint_fast8_t)a->pthre;
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	7b5b      	ldrb	r3, [r3, #13]
 800408c:	613b      	str	r3, [r7, #16]
        Q_ASSERT_INCRIT(511, pthre_in ==
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004094:	43db      	mvns	r3, r3
 8004096:	b2db      	uxtb	r3, r3
 8004098:	693a      	ldr	r2, [r7, #16]
 800409a:	429a      	cmp	r2, r3
 800409c:	d004      	beq.n	80040a8 <QK_activate_+0xa4>
 800409e:	f240 11ff 	movw	r1, #511	@ 0x1ff
 80040a2:	4851      	ldr	r0, [pc, #324]	@ (80041e8 <QK_activate_+0x1e4>)
 80040a4:	f7fc fc16 	bl	80008d4 <Q_onError>
            (uint_fast8_t)(~(uint_fast8_t)a->pthre_dis & 0xFFU));
    }

    // loop until no more ready-to-run AOs of higher pthre than the initial
    do  {
        a = QActive_registry_[p]; // obtain the pointer to the AO
 80040a8:	4a50      	ldr	r2, [pc, #320]	@ (80041ec <QK_activate_+0x1e8>)
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040b0:	60bb      	str	r3, [r7, #8]
        Q_ASSERT_INCRIT(520, a != (QActive *)0); // the AO must be registered
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d104      	bne.n	80040c2 <QK_activate_+0xbe>
 80040b8:	f44f 7102 	mov.w	r1, #520	@ 0x208
 80040bc:	484a      	ldr	r0, [pc, #296]	@ (80041e8 <QK_activate_+0x1e4>)
 80040be:	f7fc fc09 	bl	80008d4 <Q_onError>
        uint_fast8_t const pthre = (uint_fast8_t)a->pthre;
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	7b5b      	ldrb	r3, [r3, #13]
 80040c6:	607b      	str	r3, [r7, #4]
        Q_ASSERT_INCRIT(522, pthre ==
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80040ce:	43db      	mvns	r3, r3
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d004      	beq.n	80040e2 <QK_activate_+0xde>
 80040d8:	f240 210a 	movw	r1, #522	@ 0x20a
 80040dc:	4842      	ldr	r0, [pc, #264]	@ (80041e8 <QK_activate_+0x1e4>)
 80040de:	f7fc fbf9 	bl	80008d4 <Q_onError>
            (uint_fast8_t)(~(uint_fast8_t)a->pthre_dis & 0xFFU));

        // set new active prio. and preemption-threshold
        QK_priv_.actPrio = p;
 80040e2:	4a40      	ldr	r2, [pc, #256]	@ (80041e4 <QK_activate_+0x1e0>)
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	6053      	str	r3, [r2, #4]
        QK_priv_.actThre = pthre;
 80040e8:	4a3e      	ldr	r2, [pc, #248]	@ (80041e4 <QK_activate_+0x1e0>)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	60d3      	str	r3, [r2, #12]
    #ifndef Q_UNSAFE
        QK_priv_.actPrio_dis = (uint_fast8_t)(~p);
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	43db      	mvns	r3, r3
 80040f2:	4a3c      	ldr	r2, [pc, #240]	@ (80041e4 <QK_activate_+0x1e0>)
 80040f4:	61d3      	str	r3, [r2, #28]
        QK_priv_.actThre_dis = (uint_fast8_t)(~pthre);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	43db      	mvns	r3, r3
 80040fa:	4a3a      	ldr	r2, [pc, #232]	@ (80041e4 <QK_activate_+0x1e0>)
 80040fc:	6253      	str	r3, [r2, #36]	@ 0x24

            pprev = p; // update previous prio.
        }
    #endif // QF_ON_CONTEXT_SW || Q_SPY

        QF_INT_ENABLE(); // unconditionally enable interrupts
 80040fe:	f7fe fb1d 	bl	800273c <QF_int_enable_>

        QEvt const * const e = QActive_get_(a);
 8004102:	68b8      	ldr	r0, [r7, #8]
 8004104:	f7ff f82c 	bl	8003160 <QActive_get_>
 8004108:	6038      	str	r0, [r7, #0]
        // NOTE QActive_get_() performs QF_MEM_APP() before return

        // dispatch event (virtual call)
        (*a->super.vptr->dispatch)(&a->super, e, p);
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	68b8      	ldr	r0, [r7, #8]
 8004112:	697a      	ldr	r2, [r7, #20]
 8004114:	6839      	ldr	r1, [r7, #0]
 8004116:	4798      	blx	r3
    #if (QF_MAX_EPOOL > 0U)
        QF_gc(e);
 8004118:	6838      	ldr	r0, [r7, #0]
 800411a:	f7ff f8ed 	bl	80032f8 <QF_gc>
    #endif

        // determine the next highest-prio. AO ready to run...
        QF_INT_DISABLE(); // unconditionally disable interrupts
 800411e:	f7fe fafb 	bl	8002718 <QF_int_disable_>
        QF_MEM_SYS();

        // internal integrity check (duplicate inverse storage)
        Q_ASSERT_INCRIT(532, QPSet_verify_(&QK_priv_.readySet,
 8004122:	4933      	ldr	r1, [pc, #204]	@ (80041f0 <QK_activate_+0x1ec>)
 8004124:	482f      	ldr	r0, [pc, #188]	@ (80041e4 <QK_activate_+0x1e0>)
 8004126:	f7ff fe80 	bl	8003e2a <QPSet_verify_>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d104      	bne.n	800413a <QK_activate_+0x136>
 8004130:	f44f 7105 	mov.w	r1, #532	@ 0x214
 8004134:	482c      	ldr	r0, [pc, #176]	@ (80041e8 <QK_activate_+0x1e4>)
 8004136:	f7fc fbcd 	bl	80008d4 <Q_onError>
                                           &QK_priv_.readySet_dis));

        if (a->eQueue.frontEvt == (QEvt *)0) { // empty queue?
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	695b      	ldr	r3, [r3, #20]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d107      	bne.n	8004152 <QK_activate_+0x14e>
            QPSet_remove(&QK_priv_.readySet, p);
 8004142:	6979      	ldr	r1, [r7, #20]
 8004144:	4827      	ldr	r0, [pc, #156]	@ (80041e4 <QK_activate_+0x1e0>)
 8004146:	f7ff fe3a 	bl	8003dbe <QPSet_remove>
    #ifndef Q_UNSAFE
            QPSet_update_(&QK_priv_.readySet, &QK_priv_.readySet_dis);
 800414a:	4929      	ldr	r1, [pc, #164]	@ (80041f0 <QK_activate_+0x1ec>)
 800414c:	4825      	ldr	r0, [pc, #148]	@ (80041e4 <QK_activate_+0x1e0>)
 800414e:	f7ff fe5c 	bl	8003e0a <QPSet_update_>
    #endif
        }

        if (QPSet_isEmpty(&QK_priv_.readySet)) {
 8004152:	4824      	ldr	r0, [pc, #144]	@ (80041e4 <QK_activate_+0x1e0>)
 8004154:	f7ff fe22 	bl	8003d9c <QPSet_isEmpty>
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d002      	beq.n	8004164 <QK_activate_+0x160>
            p = 0U; // no activation needed
 800415e:	2300      	movs	r3, #0
 8004160:	617b      	str	r3, [r7, #20]
 8004162:	e026      	b.n	80041b2 <QK_activate_+0x1ae>
        }
        else {
            // find new highest-prio AO ready to run...
            p = QPSet_findMax(&QK_priv_.readySet);
 8004164:	481f      	ldr	r0, [pc, #124]	@ (80041e4 <QK_activate_+0x1e0>)
 8004166:	f7ff fe40 	bl	8003dea <QPSet_findMax>
 800416a:	6178      	str	r0, [r7, #20]

            // is the new prio. below the initial preemption-threshold?
            if (p <= pthre_in) {
 800416c:	697a      	ldr	r2, [r7, #20]
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	429a      	cmp	r2, r3
 8004172:	d802      	bhi.n	800417a <QK_activate_+0x176>
                p = 0U; // no activation needed
 8004174:	2300      	movs	r3, #0
 8004176:	617b      	str	r3, [r7, #20]
 8004178:	e01b      	b.n	80041b2 <QK_activate_+0x1ae>
            }
            else {
                Q_ASSERT_INCRIT(542, QK_priv_.lockCeil
 800417a:	4b1a      	ldr	r3, [pc, #104]	@ (80041e4 <QK_activate_+0x1e0>)
 800417c:	691a      	ldr	r2, [r3, #16]
 800417e:	4b19      	ldr	r3, [pc, #100]	@ (80041e4 <QK_activate_+0x1e0>)
 8004180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004182:	43db      	mvns	r3, r3
 8004184:	429a      	cmp	r2, r3
 8004186:	d004      	beq.n	8004192 <QK_activate_+0x18e>
 8004188:	f240 211e 	movw	r1, #542	@ 0x21e
 800418c:	4816      	ldr	r0, [pc, #88]	@ (80041e8 <QK_activate_+0x1e4>)
 800418e:	f7fc fba1 	bl	80008d4 <Q_onError>
                    == (uint_fast8_t)(~QK_priv_.lockCeil_dis));

                // is the AO's prio. below the lock preemption-threshold?
                if (p <= QK_priv_.lockCeil) {
 8004192:	4b14      	ldr	r3, [pc, #80]	@ (80041e4 <QK_activate_+0x1e0>)
 8004194:	691b      	ldr	r3, [r3, #16]
 8004196:	697a      	ldr	r2, [r7, #20]
 8004198:	429a      	cmp	r2, r3
 800419a:	d802      	bhi.n	80041a2 <QK_activate_+0x19e>
                    p = 0U; // no activation needed
 800419c:	2300      	movs	r3, #0
 800419e:	617b      	str	r3, [r7, #20]
 80041a0:	e007      	b.n	80041b2 <QK_activate_+0x1ae>
                }
                else {
                    Q_ASSERT_INCRIT(550, p <= QF_MAX_ACTIVE);
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	2b20      	cmp	r3, #32
 80041a6:	d904      	bls.n	80041b2 <QK_activate_+0x1ae>
 80041a8:	f240 2126 	movw	r1, #550	@ 0x226
 80041ac:	480e      	ldr	r0, [pc, #56]	@ (80041e8 <QK_activate_+0x1e4>)
 80041ae:	f7fc fb91 	bl	80008d4 <Q_onError>
                }
            }
        }
    } while (p != 0U);
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	f47f af77 	bne.w	80040a8 <QK_activate_+0xa4>

    // restore the active prio. and preemption-threshold
    QK_priv_.actPrio = prio_in;
 80041ba:	4a0a      	ldr	r2, [pc, #40]	@ (80041e4 <QK_activate_+0x1e0>)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6053      	str	r3, [r2, #4]
    QK_priv_.actThre = pthre_in;
 80041c0:	4a08      	ldr	r2, [pc, #32]	@ (80041e4 <QK_activate_+0x1e0>)
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	60d3      	str	r3, [r2, #12]
    #ifndef Q_UNSAFE
    QK_priv_.actPrio_dis = (uint_fast8_t)(~QK_priv_.actPrio);
 80041c6:	4b07      	ldr	r3, [pc, #28]	@ (80041e4 <QK_activate_+0x1e0>)
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	43db      	mvns	r3, r3
 80041cc:	4a05      	ldr	r2, [pc, #20]	@ (80041e4 <QK_activate_+0x1e0>)
 80041ce:	61d3      	str	r3, [r2, #28]
    QK_priv_.actThre_dis = (uint_fast8_t)(~QK_priv_.actThre);
 80041d0:	4b04      	ldr	r3, [pc, #16]	@ (80041e4 <QK_activate_+0x1e0>)
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	43db      	mvns	r3, r3
 80041d6:	4a03      	ldr	r2, [pc, #12]	@ (80041e4 <QK_activate_+0x1e0>)
 80041d8:	6253      	str	r3, [r2, #36]	@ 0x24
    #ifdef QF_ON_CONTEXT_SW
    QF_onContextSw(QActive_registry_[pprev], a);
    #endif // QF_ON_CONTEXT_SW

    #endif // QF_ON_CONTEXT_SW || Q_SPY
}
 80041da:	bf00      	nop
 80041dc:	3718      	adds	r7, #24
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	2000036c 	.word	0x2000036c
 80041e8:	08004d80 	.word	0x08004d80
 80041ec:	2000028c 	.word	0x2000028c
 80041f0:	20000384 	.word	0x20000384

080041f4 <QF_init>:

//$define${QK::QF-cust} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${QK::QF-cust::init} .......................................................
//! @static @public @memberof QF
void QF_init(void) {
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b082      	sub	sp, #8
 80041f8:	af00      	add	r7, sp, #0
    QF_bzero_(&QF_priv_,                 sizeof(QF_priv_));
 80041fa:	2140      	movs	r1, #64	@ 0x40
 80041fc:	481e      	ldr	r0, [pc, #120]	@ (8004278 <QF_init+0x84>)
 80041fe:	f7fe fe93 	bl	8002f28 <QF_bzero_>
    QF_bzero_(&QK_priv_,                 sizeof(QK_priv_));
 8004202:	212c      	movs	r1, #44	@ 0x2c
 8004204:	481d      	ldr	r0, [pc, #116]	@ (800427c <QF_init+0x88>)
 8004206:	f7fe fe8f 	bl	8002f28 <QF_bzero_>
    QF_bzero_(&QActive_registry_[0],     sizeof(QActive_registry_));
 800420a:	2184      	movs	r1, #132	@ 0x84
 800420c:	481c      	ldr	r0, [pc, #112]	@ (8004280 <QF_init+0x8c>)
 800420e:	f7fe fe8b 	bl	8002f28 <QF_bzero_>

    // setup the QK scheduler as initially locked and not running
    QK_priv_.lockCeil = (QF_MAX_ACTIVE + 1U); // scheduler locked
 8004212:	4b1a      	ldr	r3, [pc, #104]	@ (800427c <QF_init+0x88>)
 8004214:	2221      	movs	r2, #33	@ 0x21
 8004216:	611a      	str	r2, [r3, #16]

    #ifndef Q_UNSAFE
    QPSet_update_(&QK_priv_.readySet, &QK_priv_.readySet_dis);
 8004218:	491a      	ldr	r1, [pc, #104]	@ (8004284 <QF_init+0x90>)
 800421a:	4818      	ldr	r0, [pc, #96]	@ (800427c <QF_init+0x88>)
 800421c:	f7ff fdf5 	bl	8003e0a <QPSet_update_>
    QK_priv_.actPrio_dis  = (uint_fast8_t)(~0U);
 8004220:	4b16      	ldr	r3, [pc, #88]	@ (800427c <QF_init+0x88>)
 8004222:	f04f 32ff 	mov.w	r2, #4294967295
 8004226:	61da      	str	r2, [r3, #28]
    QK_priv_.nextPrio_dis = (uint_fast8_t)(~0U);
 8004228:	4b14      	ldr	r3, [pc, #80]	@ (800427c <QF_init+0x88>)
 800422a:	f04f 32ff 	mov.w	r2, #4294967295
 800422e:	621a      	str	r2, [r3, #32]
    QK_priv_.actThre_dis  = (uint_fast8_t)(~0U);
 8004230:	4b12      	ldr	r3, [pc, #72]	@ (800427c <QF_init+0x88>)
 8004232:	f04f 32ff 	mov.w	r2, #4294967295
 8004236:	625a      	str	r2, [r3, #36]	@ 0x24
    QK_priv_.lockCeil_dis = (uint_fast8_t)(~QK_priv_.lockCeil);
 8004238:	4b10      	ldr	r3, [pc, #64]	@ (800427c <QF_init+0x88>)
 800423a:	691b      	ldr	r3, [r3, #16]
 800423c:	43db      	mvns	r3, r3
 800423e:	4a0f      	ldr	r2, [pc, #60]	@ (800427c <QF_init+0x88>)
 8004240:	6293      	str	r3, [r2, #40]	@ 0x28
    #endif

    for (uint_fast8_t tickRate = 0U;
 8004242:	2300      	movs	r3, #0
 8004244:	607b      	str	r3, [r7, #4]
 8004246:	e00e      	b.n	8004266 <QF_init+0x72>
         tickRate < Q_DIM(QTimeEvt_timeEvtHead_);
         ++tickRate)
    {
        QTimeEvt_ctorX(&QTimeEvt_timeEvtHead_[tickRate],
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	4613      	mov	r3, r2
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	4413      	add	r3, r2
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	4a0d      	ldr	r2, [pc, #52]	@ (8004288 <QF_init+0x94>)
 8004254:	1898      	adds	r0, r3, r2
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2204      	movs	r2, #4
 800425a:	2100      	movs	r1, #0
 800425c:	f7ff fc2e 	bl	8003abc <QTimeEvt_ctorX>
         ++tickRate)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	3301      	adds	r3, #1
 8004264:	607b      	str	r3, [r7, #4]
         tickRate < Q_DIM(QTimeEvt_timeEvtHead_);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d0ed      	beq.n	8004248 <QF_init+0x54>
                       (QActive *)0, (enum_t)Q_USER_SIG, tickRate);
    }

    #ifdef QK_INIT
    QK_INIT(); // port-specific initialization of the QK kernel
 800426c:	f7fe fa9c 	bl	80027a8 <QK_init>
    #endif
}
 8004270:	bf00      	nop
 8004272:	3708      	adds	r7, #8
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}
 8004278:	20000310 	.word	0x20000310
 800427c:	2000036c 	.word	0x2000036c
 8004280:	2000028c 	.word	0x2000028c
 8004284:	20000384 	.word	0x20000384
 8004288:	20000358 	.word	0x20000358

0800428c <QF_run>:
    // nothing else to do for the preemptive QK kernel
}

//${QK::QF-cust::run} ........................................................
//! @static @public @memberof QF
int_t QF_run(void) {
 800428c:	b580      	push	{r7, lr}
 800428e:	af00      	add	r7, sp, #0
    QS_endRec_();
    QF_MEM_APP();
    QF_INT_ENABLE();
    #endif // Q_SPY

    QF_onStartup(); // application-specific startup callback
 8004290:	f7fc fc18 	bl	8000ac4 <QF_onStartup>

    QF_INT_DISABLE();
 8004294:	f7fe fa40 	bl	8002718 <QF_int_disable_>
    QF_MEM_SYS();

    #ifdef QK_START
    QK_START(); // port-specific startup of the QK kernel
 8004298:	2300      	movs	r3, #0
 800429a:	f383 8814 	msr	CONTROL, r3
    #endif

    QK_priv_.lockCeil = 0U; // unlock the QK scheduler
 800429e:	4b09      	ldr	r3, [pc, #36]	@ (80042c4 <QF_run+0x38>)
 80042a0:	2200      	movs	r2, #0
 80042a2:	611a      	str	r2, [r3, #16]
    #ifndef Q_UNSAFE
    QK_priv_.lockCeil_dis = (uint_fast8_t)(~0U);
 80042a4:	4b07      	ldr	r3, [pc, #28]	@ (80042c4 <QF_run+0x38>)
 80042a6:	f04f 32ff 	mov.w	r2, #4294967295
 80042aa:	629a      	str	r2, [r3, #40]	@ 0x28
    #endif

    // activate AOs to process events posted so far
    if (QK_sched_() != 0U) {
 80042ac:	f7ff fe46 	bl	8003f3c <QK_sched_>
 80042b0:	4603      	mov	r3, r0
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d001      	beq.n	80042ba <QF_run+0x2e>
        QK_activate_();
 80042b6:	f7ff fea5 	bl	8004004 <QK_activate_>
    }

    QF_MEM_APP();
    QF_INT_ENABLE();
 80042ba:	f7fe fa3f 	bl	800273c <QF_int_enable_>

    for (;;) { // QK idle loop...
        QK_onIdle(); // application-specific QK on-idle callback
 80042be:	f7fc fc25 	bl	8000b0c <QK_onIdle>
 80042c2:	e7fc      	b.n	80042be <QF_run+0x32>
 80042c4:	2000036c 	.word	0x2000036c

080042c8 <QActive_start_>:
    QEvt const * * const qSto,
    uint_fast16_t const qLen,
    void * const stkSto,
    uint_fast16_t const stkSize,
    void const * const par)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b086      	sub	sp, #24
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	60f8      	str	r0, [r7, #12]
 80042d0:	607a      	str	r2, [r7, #4]
 80042d2:	603b      	str	r3, [r7, #0]
 80042d4:	460b      	mov	r3, r1
 80042d6:	817b      	strh	r3, [r7, #10]
    Q_UNUSED_PAR(stkSto);  // not needed in QK
    Q_UNUSED_PAR(stkSize); // not needed in QK

    QF_CRIT_STAT
    QF_CRIT_ENTRY();
 80042d8:	f7fe fa42 	bl	8002760 <QF_crit_entry_>
    __asm volatile ("mrs %0,ipsr" : "=r" (regIPSR));
 80042dc:	f3ef 8305 	mrs	r3, IPSR
 80042e0:	617b      	str	r3, [r7, #20]
    return regIPSR;
 80042e2:	697b      	ldr	r3, [r7, #20]
    QF_MEM_SYS();

    Q_REQUIRE_INCRIT(300, (!QK_ISR_CONTEXT_())
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d102      	bne.n	80042ee <QActive_start_+0x26>
 80042e8:	6a3b      	ldr	r3, [r7, #32]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d004      	beq.n	80042f8 <QActive_start_+0x30>
 80042ee:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 80042f2:	4818      	ldr	r0, [pc, #96]	@ (8004354 <QActive_start_+0x8c>)
 80042f4:	f7fc faee 	bl	80008d4 <Q_onError>
                      && (stkSto == (void *)0));
    QF_MEM_APP();
    QF_CRIT_EXIT();
 80042f8:	f7fe fa44 	bl	8002784 <QF_crit_exit_>

    me->prio  = (uint8_t)(prioSpec & 0xFFU); // QF-prio. of the AO
 80042fc:	897b      	ldrh	r3, [r7, #10]
 80042fe:	b2da      	uxtb	r2, r3
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	731a      	strb	r2, [r3, #12]
    me->pthre = (uint8_t)(prioSpec >> 8U);   // preemption-threshold
 8004304:	897b      	ldrh	r3, [r7, #10]
 8004306:	0a1b      	lsrs	r3, r3, #8
 8004308:	b29b      	uxth	r3, r3
 800430a:	b2da      	uxtb	r2, r3
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	735a      	strb	r2, [r3, #13]
    QActive_register_(me); // make QF aware of this active object
 8004310:	68f8      	ldr	r0, [r7, #12]
 8004312:	f7ff fb03 	bl	800391c <QActive_register_>

    QEQueue_init(&me->eQueue, qSto, qLen); // init the built-in queue
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	3314      	adds	r3, #20
 800431a:	683a      	ldr	r2, [r7, #0]
 800431c:	6879      	ldr	r1, [r7, #4]
 800431e:	4618      	mov	r0, r3
 8004320:	f7ff fb88 	bl	8003a34 <QEQueue_init>

    // top-most initial tran. (virtual call)
    (*me->super.vptr->init)(&me->super, par, me->prio);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	68f8      	ldr	r0, [r7, #12]
 800432c:	68fa      	ldr	r2, [r7, #12]
 800432e:	7b12      	ldrb	r2, [r2, #12]
 8004330:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004332:	4798      	blx	r3
    QS_FLUSH(); // flush the trace buffer to the host

    // See if this AO needs to be scheduled if QK is already running
    QF_CRIT_ENTRY();
 8004334:	f7fe fa14 	bl	8002760 <QF_crit_entry_>
    QF_MEM_SYS();
    if (QK_sched_() != 0U) { // activation needed?
 8004338:	f7ff fe00 	bl	8003f3c <QK_sched_>
 800433c:	4603      	mov	r3, r0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d001      	beq.n	8004346 <QActive_start_+0x7e>
        QK_activate_();
 8004342:	f7ff fe5f 	bl	8004004 <QK_activate_>
    }
    QF_MEM_APP();
    QF_CRIT_EXIT();
 8004346:	f7fe fa1d 	bl	8002784 <QF_crit_exit_>
}
 800434a:	bf00      	nop
 800434c:	3718      	adds	r7, #24
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	08004d80 	.word	0x08004d80

08004358 <siprintf>:
 8004358:	b40e      	push	{r1, r2, r3}
 800435a:	b500      	push	{lr}
 800435c:	b09c      	sub	sp, #112	@ 0x70
 800435e:	ab1d      	add	r3, sp, #116	@ 0x74
 8004360:	9002      	str	r0, [sp, #8]
 8004362:	9006      	str	r0, [sp, #24]
 8004364:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004368:	4809      	ldr	r0, [pc, #36]	@ (8004390 <siprintf+0x38>)
 800436a:	9107      	str	r1, [sp, #28]
 800436c:	9104      	str	r1, [sp, #16]
 800436e:	4909      	ldr	r1, [pc, #36]	@ (8004394 <siprintf+0x3c>)
 8004370:	f853 2b04 	ldr.w	r2, [r3], #4
 8004374:	9105      	str	r1, [sp, #20]
 8004376:	6800      	ldr	r0, [r0, #0]
 8004378:	9301      	str	r3, [sp, #4]
 800437a:	a902      	add	r1, sp, #8
 800437c:	f000 f99a 	bl	80046b4 <_svfiprintf_r>
 8004380:	9b02      	ldr	r3, [sp, #8]
 8004382:	2200      	movs	r2, #0
 8004384:	701a      	strb	r2, [r3, #0]
 8004386:	b01c      	add	sp, #112	@ 0x70
 8004388:	f85d eb04 	ldr.w	lr, [sp], #4
 800438c:	b003      	add	sp, #12
 800438e:	4770      	bx	lr
 8004390:	2000000c 	.word	0x2000000c
 8004394:	ffff0208 	.word	0xffff0208

08004398 <__errno>:
 8004398:	4b01      	ldr	r3, [pc, #4]	@ (80043a0 <__errno+0x8>)
 800439a:	6818      	ldr	r0, [r3, #0]
 800439c:	4770      	bx	lr
 800439e:	bf00      	nop
 80043a0:	2000000c 	.word	0x2000000c

080043a4 <__libc_init_array>:
 80043a4:	b570      	push	{r4, r5, r6, lr}
 80043a6:	4d0d      	ldr	r5, [pc, #52]	@ (80043dc <__libc_init_array+0x38>)
 80043a8:	4c0d      	ldr	r4, [pc, #52]	@ (80043e0 <__libc_init_array+0x3c>)
 80043aa:	1b64      	subs	r4, r4, r5
 80043ac:	10a4      	asrs	r4, r4, #2
 80043ae:	2600      	movs	r6, #0
 80043b0:	42a6      	cmp	r6, r4
 80043b2:	d109      	bne.n	80043c8 <__libc_init_array+0x24>
 80043b4:	4d0b      	ldr	r5, [pc, #44]	@ (80043e4 <__libc_init_array+0x40>)
 80043b6:	4c0c      	ldr	r4, [pc, #48]	@ (80043e8 <__libc_init_array+0x44>)
 80043b8:	f000 fc66 	bl	8004c88 <_init>
 80043bc:	1b64      	subs	r4, r4, r5
 80043be:	10a4      	asrs	r4, r4, #2
 80043c0:	2600      	movs	r6, #0
 80043c2:	42a6      	cmp	r6, r4
 80043c4:	d105      	bne.n	80043d2 <__libc_init_array+0x2e>
 80043c6:	bd70      	pop	{r4, r5, r6, pc}
 80043c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80043cc:	4798      	blx	r3
 80043ce:	3601      	adds	r6, #1
 80043d0:	e7ee      	b.n	80043b0 <__libc_init_array+0xc>
 80043d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80043d6:	4798      	blx	r3
 80043d8:	3601      	adds	r6, #1
 80043da:	e7f2      	b.n	80043c2 <__libc_init_array+0x1e>
 80043dc:	08004dc0 	.word	0x08004dc0
 80043e0:	08004dc0 	.word	0x08004dc0
 80043e4:	08004dc0 	.word	0x08004dc0
 80043e8:	08004dc4 	.word	0x08004dc4

080043ec <__retarget_lock_acquire_recursive>:
 80043ec:	4770      	bx	lr

080043ee <__retarget_lock_release_recursive>:
 80043ee:	4770      	bx	lr

080043f0 <memcpy>:
 80043f0:	440a      	add	r2, r1
 80043f2:	4291      	cmp	r1, r2
 80043f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80043f8:	d100      	bne.n	80043fc <memcpy+0xc>
 80043fa:	4770      	bx	lr
 80043fc:	b510      	push	{r4, lr}
 80043fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004402:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004406:	4291      	cmp	r1, r2
 8004408:	d1f9      	bne.n	80043fe <memcpy+0xe>
 800440a:	bd10      	pop	{r4, pc}

0800440c <_free_r>:
 800440c:	b538      	push	{r3, r4, r5, lr}
 800440e:	4605      	mov	r5, r0
 8004410:	2900      	cmp	r1, #0
 8004412:	d041      	beq.n	8004498 <_free_r+0x8c>
 8004414:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004418:	1f0c      	subs	r4, r1, #4
 800441a:	2b00      	cmp	r3, #0
 800441c:	bfb8      	it	lt
 800441e:	18e4      	addlt	r4, r4, r3
 8004420:	f000 f8e0 	bl	80045e4 <__malloc_lock>
 8004424:	4a1d      	ldr	r2, [pc, #116]	@ (800449c <_free_r+0x90>)
 8004426:	6813      	ldr	r3, [r2, #0]
 8004428:	b933      	cbnz	r3, 8004438 <_free_r+0x2c>
 800442a:	6063      	str	r3, [r4, #4]
 800442c:	6014      	str	r4, [r2, #0]
 800442e:	4628      	mov	r0, r5
 8004430:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004434:	f000 b8dc 	b.w	80045f0 <__malloc_unlock>
 8004438:	42a3      	cmp	r3, r4
 800443a:	d908      	bls.n	800444e <_free_r+0x42>
 800443c:	6820      	ldr	r0, [r4, #0]
 800443e:	1821      	adds	r1, r4, r0
 8004440:	428b      	cmp	r3, r1
 8004442:	bf01      	itttt	eq
 8004444:	6819      	ldreq	r1, [r3, #0]
 8004446:	685b      	ldreq	r3, [r3, #4]
 8004448:	1809      	addeq	r1, r1, r0
 800444a:	6021      	streq	r1, [r4, #0]
 800444c:	e7ed      	b.n	800442a <_free_r+0x1e>
 800444e:	461a      	mov	r2, r3
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	b10b      	cbz	r3, 8004458 <_free_r+0x4c>
 8004454:	42a3      	cmp	r3, r4
 8004456:	d9fa      	bls.n	800444e <_free_r+0x42>
 8004458:	6811      	ldr	r1, [r2, #0]
 800445a:	1850      	adds	r0, r2, r1
 800445c:	42a0      	cmp	r0, r4
 800445e:	d10b      	bne.n	8004478 <_free_r+0x6c>
 8004460:	6820      	ldr	r0, [r4, #0]
 8004462:	4401      	add	r1, r0
 8004464:	1850      	adds	r0, r2, r1
 8004466:	4283      	cmp	r3, r0
 8004468:	6011      	str	r1, [r2, #0]
 800446a:	d1e0      	bne.n	800442e <_free_r+0x22>
 800446c:	6818      	ldr	r0, [r3, #0]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	6053      	str	r3, [r2, #4]
 8004472:	4408      	add	r0, r1
 8004474:	6010      	str	r0, [r2, #0]
 8004476:	e7da      	b.n	800442e <_free_r+0x22>
 8004478:	d902      	bls.n	8004480 <_free_r+0x74>
 800447a:	230c      	movs	r3, #12
 800447c:	602b      	str	r3, [r5, #0]
 800447e:	e7d6      	b.n	800442e <_free_r+0x22>
 8004480:	6820      	ldr	r0, [r4, #0]
 8004482:	1821      	adds	r1, r4, r0
 8004484:	428b      	cmp	r3, r1
 8004486:	bf04      	itt	eq
 8004488:	6819      	ldreq	r1, [r3, #0]
 800448a:	685b      	ldreq	r3, [r3, #4]
 800448c:	6063      	str	r3, [r4, #4]
 800448e:	bf04      	itt	eq
 8004490:	1809      	addeq	r1, r1, r0
 8004492:	6021      	streq	r1, [r4, #0]
 8004494:	6054      	str	r4, [r2, #4]
 8004496:	e7ca      	b.n	800442e <_free_r+0x22>
 8004498:	bd38      	pop	{r3, r4, r5, pc}
 800449a:	bf00      	nop
 800449c:	200004dc 	.word	0x200004dc

080044a0 <sbrk_aligned>:
 80044a0:	b570      	push	{r4, r5, r6, lr}
 80044a2:	4e0f      	ldr	r6, [pc, #60]	@ (80044e0 <sbrk_aligned+0x40>)
 80044a4:	460c      	mov	r4, r1
 80044a6:	6831      	ldr	r1, [r6, #0]
 80044a8:	4605      	mov	r5, r0
 80044aa:	b911      	cbnz	r1, 80044b2 <sbrk_aligned+0x12>
 80044ac:	f000 fba6 	bl	8004bfc <_sbrk_r>
 80044b0:	6030      	str	r0, [r6, #0]
 80044b2:	4621      	mov	r1, r4
 80044b4:	4628      	mov	r0, r5
 80044b6:	f000 fba1 	bl	8004bfc <_sbrk_r>
 80044ba:	1c43      	adds	r3, r0, #1
 80044bc:	d103      	bne.n	80044c6 <sbrk_aligned+0x26>
 80044be:	f04f 34ff 	mov.w	r4, #4294967295
 80044c2:	4620      	mov	r0, r4
 80044c4:	bd70      	pop	{r4, r5, r6, pc}
 80044c6:	1cc4      	adds	r4, r0, #3
 80044c8:	f024 0403 	bic.w	r4, r4, #3
 80044cc:	42a0      	cmp	r0, r4
 80044ce:	d0f8      	beq.n	80044c2 <sbrk_aligned+0x22>
 80044d0:	1a21      	subs	r1, r4, r0
 80044d2:	4628      	mov	r0, r5
 80044d4:	f000 fb92 	bl	8004bfc <_sbrk_r>
 80044d8:	3001      	adds	r0, #1
 80044da:	d1f2      	bne.n	80044c2 <sbrk_aligned+0x22>
 80044dc:	e7ef      	b.n	80044be <sbrk_aligned+0x1e>
 80044de:	bf00      	nop
 80044e0:	200004d8 	.word	0x200004d8

080044e4 <_malloc_r>:
 80044e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044e8:	1ccd      	adds	r5, r1, #3
 80044ea:	f025 0503 	bic.w	r5, r5, #3
 80044ee:	3508      	adds	r5, #8
 80044f0:	2d0c      	cmp	r5, #12
 80044f2:	bf38      	it	cc
 80044f4:	250c      	movcc	r5, #12
 80044f6:	2d00      	cmp	r5, #0
 80044f8:	4606      	mov	r6, r0
 80044fa:	db01      	blt.n	8004500 <_malloc_r+0x1c>
 80044fc:	42a9      	cmp	r1, r5
 80044fe:	d904      	bls.n	800450a <_malloc_r+0x26>
 8004500:	230c      	movs	r3, #12
 8004502:	6033      	str	r3, [r6, #0]
 8004504:	2000      	movs	r0, #0
 8004506:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800450a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80045e0 <_malloc_r+0xfc>
 800450e:	f000 f869 	bl	80045e4 <__malloc_lock>
 8004512:	f8d8 3000 	ldr.w	r3, [r8]
 8004516:	461c      	mov	r4, r3
 8004518:	bb44      	cbnz	r4, 800456c <_malloc_r+0x88>
 800451a:	4629      	mov	r1, r5
 800451c:	4630      	mov	r0, r6
 800451e:	f7ff ffbf 	bl	80044a0 <sbrk_aligned>
 8004522:	1c43      	adds	r3, r0, #1
 8004524:	4604      	mov	r4, r0
 8004526:	d158      	bne.n	80045da <_malloc_r+0xf6>
 8004528:	f8d8 4000 	ldr.w	r4, [r8]
 800452c:	4627      	mov	r7, r4
 800452e:	2f00      	cmp	r7, #0
 8004530:	d143      	bne.n	80045ba <_malloc_r+0xd6>
 8004532:	2c00      	cmp	r4, #0
 8004534:	d04b      	beq.n	80045ce <_malloc_r+0xea>
 8004536:	6823      	ldr	r3, [r4, #0]
 8004538:	4639      	mov	r1, r7
 800453a:	4630      	mov	r0, r6
 800453c:	eb04 0903 	add.w	r9, r4, r3
 8004540:	f000 fb5c 	bl	8004bfc <_sbrk_r>
 8004544:	4581      	cmp	r9, r0
 8004546:	d142      	bne.n	80045ce <_malloc_r+0xea>
 8004548:	6821      	ldr	r1, [r4, #0]
 800454a:	1a6d      	subs	r5, r5, r1
 800454c:	4629      	mov	r1, r5
 800454e:	4630      	mov	r0, r6
 8004550:	f7ff ffa6 	bl	80044a0 <sbrk_aligned>
 8004554:	3001      	adds	r0, #1
 8004556:	d03a      	beq.n	80045ce <_malloc_r+0xea>
 8004558:	6823      	ldr	r3, [r4, #0]
 800455a:	442b      	add	r3, r5
 800455c:	6023      	str	r3, [r4, #0]
 800455e:	f8d8 3000 	ldr.w	r3, [r8]
 8004562:	685a      	ldr	r2, [r3, #4]
 8004564:	bb62      	cbnz	r2, 80045c0 <_malloc_r+0xdc>
 8004566:	f8c8 7000 	str.w	r7, [r8]
 800456a:	e00f      	b.n	800458c <_malloc_r+0xa8>
 800456c:	6822      	ldr	r2, [r4, #0]
 800456e:	1b52      	subs	r2, r2, r5
 8004570:	d420      	bmi.n	80045b4 <_malloc_r+0xd0>
 8004572:	2a0b      	cmp	r2, #11
 8004574:	d917      	bls.n	80045a6 <_malloc_r+0xc2>
 8004576:	1961      	adds	r1, r4, r5
 8004578:	42a3      	cmp	r3, r4
 800457a:	6025      	str	r5, [r4, #0]
 800457c:	bf18      	it	ne
 800457e:	6059      	strne	r1, [r3, #4]
 8004580:	6863      	ldr	r3, [r4, #4]
 8004582:	bf08      	it	eq
 8004584:	f8c8 1000 	streq.w	r1, [r8]
 8004588:	5162      	str	r2, [r4, r5]
 800458a:	604b      	str	r3, [r1, #4]
 800458c:	4630      	mov	r0, r6
 800458e:	f000 f82f 	bl	80045f0 <__malloc_unlock>
 8004592:	f104 000b 	add.w	r0, r4, #11
 8004596:	1d23      	adds	r3, r4, #4
 8004598:	f020 0007 	bic.w	r0, r0, #7
 800459c:	1ac2      	subs	r2, r0, r3
 800459e:	bf1c      	itt	ne
 80045a0:	1a1b      	subne	r3, r3, r0
 80045a2:	50a3      	strne	r3, [r4, r2]
 80045a4:	e7af      	b.n	8004506 <_malloc_r+0x22>
 80045a6:	6862      	ldr	r2, [r4, #4]
 80045a8:	42a3      	cmp	r3, r4
 80045aa:	bf0c      	ite	eq
 80045ac:	f8c8 2000 	streq.w	r2, [r8]
 80045b0:	605a      	strne	r2, [r3, #4]
 80045b2:	e7eb      	b.n	800458c <_malloc_r+0xa8>
 80045b4:	4623      	mov	r3, r4
 80045b6:	6864      	ldr	r4, [r4, #4]
 80045b8:	e7ae      	b.n	8004518 <_malloc_r+0x34>
 80045ba:	463c      	mov	r4, r7
 80045bc:	687f      	ldr	r7, [r7, #4]
 80045be:	e7b6      	b.n	800452e <_malloc_r+0x4a>
 80045c0:	461a      	mov	r2, r3
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	42a3      	cmp	r3, r4
 80045c6:	d1fb      	bne.n	80045c0 <_malloc_r+0xdc>
 80045c8:	2300      	movs	r3, #0
 80045ca:	6053      	str	r3, [r2, #4]
 80045cc:	e7de      	b.n	800458c <_malloc_r+0xa8>
 80045ce:	230c      	movs	r3, #12
 80045d0:	6033      	str	r3, [r6, #0]
 80045d2:	4630      	mov	r0, r6
 80045d4:	f000 f80c 	bl	80045f0 <__malloc_unlock>
 80045d8:	e794      	b.n	8004504 <_malloc_r+0x20>
 80045da:	6005      	str	r5, [r0, #0]
 80045dc:	e7d6      	b.n	800458c <_malloc_r+0xa8>
 80045de:	bf00      	nop
 80045e0:	200004dc 	.word	0x200004dc

080045e4 <__malloc_lock>:
 80045e4:	4801      	ldr	r0, [pc, #4]	@ (80045ec <__malloc_lock+0x8>)
 80045e6:	f7ff bf01 	b.w	80043ec <__retarget_lock_acquire_recursive>
 80045ea:	bf00      	nop
 80045ec:	200004d4 	.word	0x200004d4

080045f0 <__malloc_unlock>:
 80045f0:	4801      	ldr	r0, [pc, #4]	@ (80045f8 <__malloc_unlock+0x8>)
 80045f2:	f7ff befc 	b.w	80043ee <__retarget_lock_release_recursive>
 80045f6:	bf00      	nop
 80045f8:	200004d4 	.word	0x200004d4

080045fc <__ssputs_r>:
 80045fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004600:	688e      	ldr	r6, [r1, #8]
 8004602:	461f      	mov	r7, r3
 8004604:	42be      	cmp	r6, r7
 8004606:	680b      	ldr	r3, [r1, #0]
 8004608:	4682      	mov	sl, r0
 800460a:	460c      	mov	r4, r1
 800460c:	4690      	mov	r8, r2
 800460e:	d82d      	bhi.n	800466c <__ssputs_r+0x70>
 8004610:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004614:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004618:	d026      	beq.n	8004668 <__ssputs_r+0x6c>
 800461a:	6965      	ldr	r5, [r4, #20]
 800461c:	6909      	ldr	r1, [r1, #16]
 800461e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004622:	eba3 0901 	sub.w	r9, r3, r1
 8004626:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800462a:	1c7b      	adds	r3, r7, #1
 800462c:	444b      	add	r3, r9
 800462e:	106d      	asrs	r5, r5, #1
 8004630:	429d      	cmp	r5, r3
 8004632:	bf38      	it	cc
 8004634:	461d      	movcc	r5, r3
 8004636:	0553      	lsls	r3, r2, #21
 8004638:	d527      	bpl.n	800468a <__ssputs_r+0x8e>
 800463a:	4629      	mov	r1, r5
 800463c:	f7ff ff52 	bl	80044e4 <_malloc_r>
 8004640:	4606      	mov	r6, r0
 8004642:	b360      	cbz	r0, 800469e <__ssputs_r+0xa2>
 8004644:	6921      	ldr	r1, [r4, #16]
 8004646:	464a      	mov	r2, r9
 8004648:	f7ff fed2 	bl	80043f0 <memcpy>
 800464c:	89a3      	ldrh	r3, [r4, #12]
 800464e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004652:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004656:	81a3      	strh	r3, [r4, #12]
 8004658:	6126      	str	r6, [r4, #16]
 800465a:	6165      	str	r5, [r4, #20]
 800465c:	444e      	add	r6, r9
 800465e:	eba5 0509 	sub.w	r5, r5, r9
 8004662:	6026      	str	r6, [r4, #0]
 8004664:	60a5      	str	r5, [r4, #8]
 8004666:	463e      	mov	r6, r7
 8004668:	42be      	cmp	r6, r7
 800466a:	d900      	bls.n	800466e <__ssputs_r+0x72>
 800466c:	463e      	mov	r6, r7
 800466e:	6820      	ldr	r0, [r4, #0]
 8004670:	4632      	mov	r2, r6
 8004672:	4641      	mov	r1, r8
 8004674:	f000 faa8 	bl	8004bc8 <memmove>
 8004678:	68a3      	ldr	r3, [r4, #8]
 800467a:	1b9b      	subs	r3, r3, r6
 800467c:	60a3      	str	r3, [r4, #8]
 800467e:	6823      	ldr	r3, [r4, #0]
 8004680:	4433      	add	r3, r6
 8004682:	6023      	str	r3, [r4, #0]
 8004684:	2000      	movs	r0, #0
 8004686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800468a:	462a      	mov	r2, r5
 800468c:	f000 fac6 	bl	8004c1c <_realloc_r>
 8004690:	4606      	mov	r6, r0
 8004692:	2800      	cmp	r0, #0
 8004694:	d1e0      	bne.n	8004658 <__ssputs_r+0x5c>
 8004696:	6921      	ldr	r1, [r4, #16]
 8004698:	4650      	mov	r0, sl
 800469a:	f7ff feb7 	bl	800440c <_free_r>
 800469e:	230c      	movs	r3, #12
 80046a0:	f8ca 3000 	str.w	r3, [sl]
 80046a4:	89a3      	ldrh	r3, [r4, #12]
 80046a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80046aa:	81a3      	strh	r3, [r4, #12]
 80046ac:	f04f 30ff 	mov.w	r0, #4294967295
 80046b0:	e7e9      	b.n	8004686 <__ssputs_r+0x8a>
	...

080046b4 <_svfiprintf_r>:
 80046b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046b8:	4698      	mov	r8, r3
 80046ba:	898b      	ldrh	r3, [r1, #12]
 80046bc:	061b      	lsls	r3, r3, #24
 80046be:	b09d      	sub	sp, #116	@ 0x74
 80046c0:	4607      	mov	r7, r0
 80046c2:	460d      	mov	r5, r1
 80046c4:	4614      	mov	r4, r2
 80046c6:	d510      	bpl.n	80046ea <_svfiprintf_r+0x36>
 80046c8:	690b      	ldr	r3, [r1, #16]
 80046ca:	b973      	cbnz	r3, 80046ea <_svfiprintf_r+0x36>
 80046cc:	2140      	movs	r1, #64	@ 0x40
 80046ce:	f7ff ff09 	bl	80044e4 <_malloc_r>
 80046d2:	6028      	str	r0, [r5, #0]
 80046d4:	6128      	str	r0, [r5, #16]
 80046d6:	b930      	cbnz	r0, 80046e6 <_svfiprintf_r+0x32>
 80046d8:	230c      	movs	r3, #12
 80046da:	603b      	str	r3, [r7, #0]
 80046dc:	f04f 30ff 	mov.w	r0, #4294967295
 80046e0:	b01d      	add	sp, #116	@ 0x74
 80046e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046e6:	2340      	movs	r3, #64	@ 0x40
 80046e8:	616b      	str	r3, [r5, #20]
 80046ea:	2300      	movs	r3, #0
 80046ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80046ee:	2320      	movs	r3, #32
 80046f0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80046f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80046f8:	2330      	movs	r3, #48	@ 0x30
 80046fa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004898 <_svfiprintf_r+0x1e4>
 80046fe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004702:	f04f 0901 	mov.w	r9, #1
 8004706:	4623      	mov	r3, r4
 8004708:	469a      	mov	sl, r3
 800470a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800470e:	b10a      	cbz	r2, 8004714 <_svfiprintf_r+0x60>
 8004710:	2a25      	cmp	r2, #37	@ 0x25
 8004712:	d1f9      	bne.n	8004708 <_svfiprintf_r+0x54>
 8004714:	ebba 0b04 	subs.w	fp, sl, r4
 8004718:	d00b      	beq.n	8004732 <_svfiprintf_r+0x7e>
 800471a:	465b      	mov	r3, fp
 800471c:	4622      	mov	r2, r4
 800471e:	4629      	mov	r1, r5
 8004720:	4638      	mov	r0, r7
 8004722:	f7ff ff6b 	bl	80045fc <__ssputs_r>
 8004726:	3001      	adds	r0, #1
 8004728:	f000 80a7 	beq.w	800487a <_svfiprintf_r+0x1c6>
 800472c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800472e:	445a      	add	r2, fp
 8004730:	9209      	str	r2, [sp, #36]	@ 0x24
 8004732:	f89a 3000 	ldrb.w	r3, [sl]
 8004736:	2b00      	cmp	r3, #0
 8004738:	f000 809f 	beq.w	800487a <_svfiprintf_r+0x1c6>
 800473c:	2300      	movs	r3, #0
 800473e:	f04f 32ff 	mov.w	r2, #4294967295
 8004742:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004746:	f10a 0a01 	add.w	sl, sl, #1
 800474a:	9304      	str	r3, [sp, #16]
 800474c:	9307      	str	r3, [sp, #28]
 800474e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004752:	931a      	str	r3, [sp, #104]	@ 0x68
 8004754:	4654      	mov	r4, sl
 8004756:	2205      	movs	r2, #5
 8004758:	f814 1b01 	ldrb.w	r1, [r4], #1
 800475c:	484e      	ldr	r0, [pc, #312]	@ (8004898 <_svfiprintf_r+0x1e4>)
 800475e:	f7fb fd67 	bl	8000230 <memchr>
 8004762:	9a04      	ldr	r2, [sp, #16]
 8004764:	b9d8      	cbnz	r0, 800479e <_svfiprintf_r+0xea>
 8004766:	06d0      	lsls	r0, r2, #27
 8004768:	bf44      	itt	mi
 800476a:	2320      	movmi	r3, #32
 800476c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004770:	0711      	lsls	r1, r2, #28
 8004772:	bf44      	itt	mi
 8004774:	232b      	movmi	r3, #43	@ 0x2b
 8004776:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800477a:	f89a 3000 	ldrb.w	r3, [sl]
 800477e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004780:	d015      	beq.n	80047ae <_svfiprintf_r+0xfa>
 8004782:	9a07      	ldr	r2, [sp, #28]
 8004784:	4654      	mov	r4, sl
 8004786:	2000      	movs	r0, #0
 8004788:	f04f 0c0a 	mov.w	ip, #10
 800478c:	4621      	mov	r1, r4
 800478e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004792:	3b30      	subs	r3, #48	@ 0x30
 8004794:	2b09      	cmp	r3, #9
 8004796:	d94b      	bls.n	8004830 <_svfiprintf_r+0x17c>
 8004798:	b1b0      	cbz	r0, 80047c8 <_svfiprintf_r+0x114>
 800479a:	9207      	str	r2, [sp, #28]
 800479c:	e014      	b.n	80047c8 <_svfiprintf_r+0x114>
 800479e:	eba0 0308 	sub.w	r3, r0, r8
 80047a2:	fa09 f303 	lsl.w	r3, r9, r3
 80047a6:	4313      	orrs	r3, r2
 80047a8:	9304      	str	r3, [sp, #16]
 80047aa:	46a2      	mov	sl, r4
 80047ac:	e7d2      	b.n	8004754 <_svfiprintf_r+0xa0>
 80047ae:	9b03      	ldr	r3, [sp, #12]
 80047b0:	1d19      	adds	r1, r3, #4
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	9103      	str	r1, [sp, #12]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	bfbb      	ittet	lt
 80047ba:	425b      	neglt	r3, r3
 80047bc:	f042 0202 	orrlt.w	r2, r2, #2
 80047c0:	9307      	strge	r3, [sp, #28]
 80047c2:	9307      	strlt	r3, [sp, #28]
 80047c4:	bfb8      	it	lt
 80047c6:	9204      	strlt	r2, [sp, #16]
 80047c8:	7823      	ldrb	r3, [r4, #0]
 80047ca:	2b2e      	cmp	r3, #46	@ 0x2e
 80047cc:	d10a      	bne.n	80047e4 <_svfiprintf_r+0x130>
 80047ce:	7863      	ldrb	r3, [r4, #1]
 80047d0:	2b2a      	cmp	r3, #42	@ 0x2a
 80047d2:	d132      	bne.n	800483a <_svfiprintf_r+0x186>
 80047d4:	9b03      	ldr	r3, [sp, #12]
 80047d6:	1d1a      	adds	r2, r3, #4
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	9203      	str	r2, [sp, #12]
 80047dc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80047e0:	3402      	adds	r4, #2
 80047e2:	9305      	str	r3, [sp, #20]
 80047e4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80048a8 <_svfiprintf_r+0x1f4>
 80047e8:	7821      	ldrb	r1, [r4, #0]
 80047ea:	2203      	movs	r2, #3
 80047ec:	4650      	mov	r0, sl
 80047ee:	f7fb fd1f 	bl	8000230 <memchr>
 80047f2:	b138      	cbz	r0, 8004804 <_svfiprintf_r+0x150>
 80047f4:	9b04      	ldr	r3, [sp, #16]
 80047f6:	eba0 000a 	sub.w	r0, r0, sl
 80047fa:	2240      	movs	r2, #64	@ 0x40
 80047fc:	4082      	lsls	r2, r0
 80047fe:	4313      	orrs	r3, r2
 8004800:	3401      	adds	r4, #1
 8004802:	9304      	str	r3, [sp, #16]
 8004804:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004808:	4824      	ldr	r0, [pc, #144]	@ (800489c <_svfiprintf_r+0x1e8>)
 800480a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800480e:	2206      	movs	r2, #6
 8004810:	f7fb fd0e 	bl	8000230 <memchr>
 8004814:	2800      	cmp	r0, #0
 8004816:	d036      	beq.n	8004886 <_svfiprintf_r+0x1d2>
 8004818:	4b21      	ldr	r3, [pc, #132]	@ (80048a0 <_svfiprintf_r+0x1ec>)
 800481a:	bb1b      	cbnz	r3, 8004864 <_svfiprintf_r+0x1b0>
 800481c:	9b03      	ldr	r3, [sp, #12]
 800481e:	3307      	adds	r3, #7
 8004820:	f023 0307 	bic.w	r3, r3, #7
 8004824:	3308      	adds	r3, #8
 8004826:	9303      	str	r3, [sp, #12]
 8004828:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800482a:	4433      	add	r3, r6
 800482c:	9309      	str	r3, [sp, #36]	@ 0x24
 800482e:	e76a      	b.n	8004706 <_svfiprintf_r+0x52>
 8004830:	fb0c 3202 	mla	r2, ip, r2, r3
 8004834:	460c      	mov	r4, r1
 8004836:	2001      	movs	r0, #1
 8004838:	e7a8      	b.n	800478c <_svfiprintf_r+0xd8>
 800483a:	2300      	movs	r3, #0
 800483c:	3401      	adds	r4, #1
 800483e:	9305      	str	r3, [sp, #20]
 8004840:	4619      	mov	r1, r3
 8004842:	f04f 0c0a 	mov.w	ip, #10
 8004846:	4620      	mov	r0, r4
 8004848:	f810 2b01 	ldrb.w	r2, [r0], #1
 800484c:	3a30      	subs	r2, #48	@ 0x30
 800484e:	2a09      	cmp	r2, #9
 8004850:	d903      	bls.n	800485a <_svfiprintf_r+0x1a6>
 8004852:	2b00      	cmp	r3, #0
 8004854:	d0c6      	beq.n	80047e4 <_svfiprintf_r+0x130>
 8004856:	9105      	str	r1, [sp, #20]
 8004858:	e7c4      	b.n	80047e4 <_svfiprintf_r+0x130>
 800485a:	fb0c 2101 	mla	r1, ip, r1, r2
 800485e:	4604      	mov	r4, r0
 8004860:	2301      	movs	r3, #1
 8004862:	e7f0      	b.n	8004846 <_svfiprintf_r+0x192>
 8004864:	ab03      	add	r3, sp, #12
 8004866:	9300      	str	r3, [sp, #0]
 8004868:	462a      	mov	r2, r5
 800486a:	4b0e      	ldr	r3, [pc, #56]	@ (80048a4 <_svfiprintf_r+0x1f0>)
 800486c:	a904      	add	r1, sp, #16
 800486e:	4638      	mov	r0, r7
 8004870:	f3af 8000 	nop.w
 8004874:	1c42      	adds	r2, r0, #1
 8004876:	4606      	mov	r6, r0
 8004878:	d1d6      	bne.n	8004828 <_svfiprintf_r+0x174>
 800487a:	89ab      	ldrh	r3, [r5, #12]
 800487c:	065b      	lsls	r3, r3, #25
 800487e:	f53f af2d 	bmi.w	80046dc <_svfiprintf_r+0x28>
 8004882:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004884:	e72c      	b.n	80046e0 <_svfiprintf_r+0x2c>
 8004886:	ab03      	add	r3, sp, #12
 8004888:	9300      	str	r3, [sp, #0]
 800488a:	462a      	mov	r2, r5
 800488c:	4b05      	ldr	r3, [pc, #20]	@ (80048a4 <_svfiprintf_r+0x1f0>)
 800488e:	a904      	add	r1, sp, #16
 8004890:	4638      	mov	r0, r7
 8004892:	f000 f879 	bl	8004988 <_printf_i>
 8004896:	e7ed      	b.n	8004874 <_svfiprintf_r+0x1c0>
 8004898:	08004d83 	.word	0x08004d83
 800489c:	08004d8d 	.word	0x08004d8d
 80048a0:	00000000 	.word	0x00000000
 80048a4:	080045fd 	.word	0x080045fd
 80048a8:	08004d89 	.word	0x08004d89

080048ac <_printf_common>:
 80048ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048b0:	4616      	mov	r6, r2
 80048b2:	4698      	mov	r8, r3
 80048b4:	688a      	ldr	r2, [r1, #8]
 80048b6:	690b      	ldr	r3, [r1, #16]
 80048b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80048bc:	4293      	cmp	r3, r2
 80048be:	bfb8      	it	lt
 80048c0:	4613      	movlt	r3, r2
 80048c2:	6033      	str	r3, [r6, #0]
 80048c4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80048c8:	4607      	mov	r7, r0
 80048ca:	460c      	mov	r4, r1
 80048cc:	b10a      	cbz	r2, 80048d2 <_printf_common+0x26>
 80048ce:	3301      	adds	r3, #1
 80048d0:	6033      	str	r3, [r6, #0]
 80048d2:	6823      	ldr	r3, [r4, #0]
 80048d4:	0699      	lsls	r1, r3, #26
 80048d6:	bf42      	ittt	mi
 80048d8:	6833      	ldrmi	r3, [r6, #0]
 80048da:	3302      	addmi	r3, #2
 80048dc:	6033      	strmi	r3, [r6, #0]
 80048de:	6825      	ldr	r5, [r4, #0]
 80048e0:	f015 0506 	ands.w	r5, r5, #6
 80048e4:	d106      	bne.n	80048f4 <_printf_common+0x48>
 80048e6:	f104 0a19 	add.w	sl, r4, #25
 80048ea:	68e3      	ldr	r3, [r4, #12]
 80048ec:	6832      	ldr	r2, [r6, #0]
 80048ee:	1a9b      	subs	r3, r3, r2
 80048f0:	42ab      	cmp	r3, r5
 80048f2:	dc26      	bgt.n	8004942 <_printf_common+0x96>
 80048f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80048f8:	6822      	ldr	r2, [r4, #0]
 80048fa:	3b00      	subs	r3, #0
 80048fc:	bf18      	it	ne
 80048fe:	2301      	movne	r3, #1
 8004900:	0692      	lsls	r2, r2, #26
 8004902:	d42b      	bmi.n	800495c <_printf_common+0xb0>
 8004904:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004908:	4641      	mov	r1, r8
 800490a:	4638      	mov	r0, r7
 800490c:	47c8      	blx	r9
 800490e:	3001      	adds	r0, #1
 8004910:	d01e      	beq.n	8004950 <_printf_common+0xa4>
 8004912:	6823      	ldr	r3, [r4, #0]
 8004914:	6922      	ldr	r2, [r4, #16]
 8004916:	f003 0306 	and.w	r3, r3, #6
 800491a:	2b04      	cmp	r3, #4
 800491c:	bf02      	ittt	eq
 800491e:	68e5      	ldreq	r5, [r4, #12]
 8004920:	6833      	ldreq	r3, [r6, #0]
 8004922:	1aed      	subeq	r5, r5, r3
 8004924:	68a3      	ldr	r3, [r4, #8]
 8004926:	bf0c      	ite	eq
 8004928:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800492c:	2500      	movne	r5, #0
 800492e:	4293      	cmp	r3, r2
 8004930:	bfc4      	itt	gt
 8004932:	1a9b      	subgt	r3, r3, r2
 8004934:	18ed      	addgt	r5, r5, r3
 8004936:	2600      	movs	r6, #0
 8004938:	341a      	adds	r4, #26
 800493a:	42b5      	cmp	r5, r6
 800493c:	d11a      	bne.n	8004974 <_printf_common+0xc8>
 800493e:	2000      	movs	r0, #0
 8004940:	e008      	b.n	8004954 <_printf_common+0xa8>
 8004942:	2301      	movs	r3, #1
 8004944:	4652      	mov	r2, sl
 8004946:	4641      	mov	r1, r8
 8004948:	4638      	mov	r0, r7
 800494a:	47c8      	blx	r9
 800494c:	3001      	adds	r0, #1
 800494e:	d103      	bne.n	8004958 <_printf_common+0xac>
 8004950:	f04f 30ff 	mov.w	r0, #4294967295
 8004954:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004958:	3501      	adds	r5, #1
 800495a:	e7c6      	b.n	80048ea <_printf_common+0x3e>
 800495c:	18e1      	adds	r1, r4, r3
 800495e:	1c5a      	adds	r2, r3, #1
 8004960:	2030      	movs	r0, #48	@ 0x30
 8004962:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004966:	4422      	add	r2, r4
 8004968:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800496c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004970:	3302      	adds	r3, #2
 8004972:	e7c7      	b.n	8004904 <_printf_common+0x58>
 8004974:	2301      	movs	r3, #1
 8004976:	4622      	mov	r2, r4
 8004978:	4641      	mov	r1, r8
 800497a:	4638      	mov	r0, r7
 800497c:	47c8      	blx	r9
 800497e:	3001      	adds	r0, #1
 8004980:	d0e6      	beq.n	8004950 <_printf_common+0xa4>
 8004982:	3601      	adds	r6, #1
 8004984:	e7d9      	b.n	800493a <_printf_common+0x8e>
	...

08004988 <_printf_i>:
 8004988:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800498c:	7e0f      	ldrb	r7, [r1, #24]
 800498e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004990:	2f78      	cmp	r7, #120	@ 0x78
 8004992:	4691      	mov	r9, r2
 8004994:	4680      	mov	r8, r0
 8004996:	460c      	mov	r4, r1
 8004998:	469a      	mov	sl, r3
 800499a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800499e:	d807      	bhi.n	80049b0 <_printf_i+0x28>
 80049a0:	2f62      	cmp	r7, #98	@ 0x62
 80049a2:	d80a      	bhi.n	80049ba <_printf_i+0x32>
 80049a4:	2f00      	cmp	r7, #0
 80049a6:	f000 80d2 	beq.w	8004b4e <_printf_i+0x1c6>
 80049aa:	2f58      	cmp	r7, #88	@ 0x58
 80049ac:	f000 80b9 	beq.w	8004b22 <_printf_i+0x19a>
 80049b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80049b4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80049b8:	e03a      	b.n	8004a30 <_printf_i+0xa8>
 80049ba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80049be:	2b15      	cmp	r3, #21
 80049c0:	d8f6      	bhi.n	80049b0 <_printf_i+0x28>
 80049c2:	a101      	add	r1, pc, #4	@ (adr r1, 80049c8 <_printf_i+0x40>)
 80049c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80049c8:	08004a21 	.word	0x08004a21
 80049cc:	08004a35 	.word	0x08004a35
 80049d0:	080049b1 	.word	0x080049b1
 80049d4:	080049b1 	.word	0x080049b1
 80049d8:	080049b1 	.word	0x080049b1
 80049dc:	080049b1 	.word	0x080049b1
 80049e0:	08004a35 	.word	0x08004a35
 80049e4:	080049b1 	.word	0x080049b1
 80049e8:	080049b1 	.word	0x080049b1
 80049ec:	080049b1 	.word	0x080049b1
 80049f0:	080049b1 	.word	0x080049b1
 80049f4:	08004b35 	.word	0x08004b35
 80049f8:	08004a5f 	.word	0x08004a5f
 80049fc:	08004aef 	.word	0x08004aef
 8004a00:	080049b1 	.word	0x080049b1
 8004a04:	080049b1 	.word	0x080049b1
 8004a08:	08004b57 	.word	0x08004b57
 8004a0c:	080049b1 	.word	0x080049b1
 8004a10:	08004a5f 	.word	0x08004a5f
 8004a14:	080049b1 	.word	0x080049b1
 8004a18:	080049b1 	.word	0x080049b1
 8004a1c:	08004af7 	.word	0x08004af7
 8004a20:	6833      	ldr	r3, [r6, #0]
 8004a22:	1d1a      	adds	r2, r3, #4
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	6032      	str	r2, [r6, #0]
 8004a28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004a2c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004a30:	2301      	movs	r3, #1
 8004a32:	e09d      	b.n	8004b70 <_printf_i+0x1e8>
 8004a34:	6833      	ldr	r3, [r6, #0]
 8004a36:	6820      	ldr	r0, [r4, #0]
 8004a38:	1d19      	adds	r1, r3, #4
 8004a3a:	6031      	str	r1, [r6, #0]
 8004a3c:	0606      	lsls	r6, r0, #24
 8004a3e:	d501      	bpl.n	8004a44 <_printf_i+0xbc>
 8004a40:	681d      	ldr	r5, [r3, #0]
 8004a42:	e003      	b.n	8004a4c <_printf_i+0xc4>
 8004a44:	0645      	lsls	r5, r0, #25
 8004a46:	d5fb      	bpl.n	8004a40 <_printf_i+0xb8>
 8004a48:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004a4c:	2d00      	cmp	r5, #0
 8004a4e:	da03      	bge.n	8004a58 <_printf_i+0xd0>
 8004a50:	232d      	movs	r3, #45	@ 0x2d
 8004a52:	426d      	negs	r5, r5
 8004a54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a58:	4859      	ldr	r0, [pc, #356]	@ (8004bc0 <_printf_i+0x238>)
 8004a5a:	230a      	movs	r3, #10
 8004a5c:	e011      	b.n	8004a82 <_printf_i+0xfa>
 8004a5e:	6821      	ldr	r1, [r4, #0]
 8004a60:	6833      	ldr	r3, [r6, #0]
 8004a62:	0608      	lsls	r0, r1, #24
 8004a64:	f853 5b04 	ldr.w	r5, [r3], #4
 8004a68:	d402      	bmi.n	8004a70 <_printf_i+0xe8>
 8004a6a:	0649      	lsls	r1, r1, #25
 8004a6c:	bf48      	it	mi
 8004a6e:	b2ad      	uxthmi	r5, r5
 8004a70:	2f6f      	cmp	r7, #111	@ 0x6f
 8004a72:	4853      	ldr	r0, [pc, #332]	@ (8004bc0 <_printf_i+0x238>)
 8004a74:	6033      	str	r3, [r6, #0]
 8004a76:	bf14      	ite	ne
 8004a78:	230a      	movne	r3, #10
 8004a7a:	2308      	moveq	r3, #8
 8004a7c:	2100      	movs	r1, #0
 8004a7e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004a82:	6866      	ldr	r6, [r4, #4]
 8004a84:	60a6      	str	r6, [r4, #8]
 8004a86:	2e00      	cmp	r6, #0
 8004a88:	bfa2      	ittt	ge
 8004a8a:	6821      	ldrge	r1, [r4, #0]
 8004a8c:	f021 0104 	bicge.w	r1, r1, #4
 8004a90:	6021      	strge	r1, [r4, #0]
 8004a92:	b90d      	cbnz	r5, 8004a98 <_printf_i+0x110>
 8004a94:	2e00      	cmp	r6, #0
 8004a96:	d04b      	beq.n	8004b30 <_printf_i+0x1a8>
 8004a98:	4616      	mov	r6, r2
 8004a9a:	fbb5 f1f3 	udiv	r1, r5, r3
 8004a9e:	fb03 5711 	mls	r7, r3, r1, r5
 8004aa2:	5dc7      	ldrb	r7, [r0, r7]
 8004aa4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004aa8:	462f      	mov	r7, r5
 8004aaa:	42bb      	cmp	r3, r7
 8004aac:	460d      	mov	r5, r1
 8004aae:	d9f4      	bls.n	8004a9a <_printf_i+0x112>
 8004ab0:	2b08      	cmp	r3, #8
 8004ab2:	d10b      	bne.n	8004acc <_printf_i+0x144>
 8004ab4:	6823      	ldr	r3, [r4, #0]
 8004ab6:	07df      	lsls	r7, r3, #31
 8004ab8:	d508      	bpl.n	8004acc <_printf_i+0x144>
 8004aba:	6923      	ldr	r3, [r4, #16]
 8004abc:	6861      	ldr	r1, [r4, #4]
 8004abe:	4299      	cmp	r1, r3
 8004ac0:	bfde      	ittt	le
 8004ac2:	2330      	movle	r3, #48	@ 0x30
 8004ac4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004ac8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004acc:	1b92      	subs	r2, r2, r6
 8004ace:	6122      	str	r2, [r4, #16]
 8004ad0:	f8cd a000 	str.w	sl, [sp]
 8004ad4:	464b      	mov	r3, r9
 8004ad6:	aa03      	add	r2, sp, #12
 8004ad8:	4621      	mov	r1, r4
 8004ada:	4640      	mov	r0, r8
 8004adc:	f7ff fee6 	bl	80048ac <_printf_common>
 8004ae0:	3001      	adds	r0, #1
 8004ae2:	d14a      	bne.n	8004b7a <_printf_i+0x1f2>
 8004ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ae8:	b004      	add	sp, #16
 8004aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004aee:	6823      	ldr	r3, [r4, #0]
 8004af0:	f043 0320 	orr.w	r3, r3, #32
 8004af4:	6023      	str	r3, [r4, #0]
 8004af6:	4833      	ldr	r0, [pc, #204]	@ (8004bc4 <_printf_i+0x23c>)
 8004af8:	2778      	movs	r7, #120	@ 0x78
 8004afa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004afe:	6823      	ldr	r3, [r4, #0]
 8004b00:	6831      	ldr	r1, [r6, #0]
 8004b02:	061f      	lsls	r7, r3, #24
 8004b04:	f851 5b04 	ldr.w	r5, [r1], #4
 8004b08:	d402      	bmi.n	8004b10 <_printf_i+0x188>
 8004b0a:	065f      	lsls	r7, r3, #25
 8004b0c:	bf48      	it	mi
 8004b0e:	b2ad      	uxthmi	r5, r5
 8004b10:	6031      	str	r1, [r6, #0]
 8004b12:	07d9      	lsls	r1, r3, #31
 8004b14:	bf44      	itt	mi
 8004b16:	f043 0320 	orrmi.w	r3, r3, #32
 8004b1a:	6023      	strmi	r3, [r4, #0]
 8004b1c:	b11d      	cbz	r5, 8004b26 <_printf_i+0x19e>
 8004b1e:	2310      	movs	r3, #16
 8004b20:	e7ac      	b.n	8004a7c <_printf_i+0xf4>
 8004b22:	4827      	ldr	r0, [pc, #156]	@ (8004bc0 <_printf_i+0x238>)
 8004b24:	e7e9      	b.n	8004afa <_printf_i+0x172>
 8004b26:	6823      	ldr	r3, [r4, #0]
 8004b28:	f023 0320 	bic.w	r3, r3, #32
 8004b2c:	6023      	str	r3, [r4, #0]
 8004b2e:	e7f6      	b.n	8004b1e <_printf_i+0x196>
 8004b30:	4616      	mov	r6, r2
 8004b32:	e7bd      	b.n	8004ab0 <_printf_i+0x128>
 8004b34:	6833      	ldr	r3, [r6, #0]
 8004b36:	6825      	ldr	r5, [r4, #0]
 8004b38:	6961      	ldr	r1, [r4, #20]
 8004b3a:	1d18      	adds	r0, r3, #4
 8004b3c:	6030      	str	r0, [r6, #0]
 8004b3e:	062e      	lsls	r6, r5, #24
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	d501      	bpl.n	8004b48 <_printf_i+0x1c0>
 8004b44:	6019      	str	r1, [r3, #0]
 8004b46:	e002      	b.n	8004b4e <_printf_i+0x1c6>
 8004b48:	0668      	lsls	r0, r5, #25
 8004b4a:	d5fb      	bpl.n	8004b44 <_printf_i+0x1bc>
 8004b4c:	8019      	strh	r1, [r3, #0]
 8004b4e:	2300      	movs	r3, #0
 8004b50:	6123      	str	r3, [r4, #16]
 8004b52:	4616      	mov	r6, r2
 8004b54:	e7bc      	b.n	8004ad0 <_printf_i+0x148>
 8004b56:	6833      	ldr	r3, [r6, #0]
 8004b58:	1d1a      	adds	r2, r3, #4
 8004b5a:	6032      	str	r2, [r6, #0]
 8004b5c:	681e      	ldr	r6, [r3, #0]
 8004b5e:	6862      	ldr	r2, [r4, #4]
 8004b60:	2100      	movs	r1, #0
 8004b62:	4630      	mov	r0, r6
 8004b64:	f7fb fb64 	bl	8000230 <memchr>
 8004b68:	b108      	cbz	r0, 8004b6e <_printf_i+0x1e6>
 8004b6a:	1b80      	subs	r0, r0, r6
 8004b6c:	6060      	str	r0, [r4, #4]
 8004b6e:	6863      	ldr	r3, [r4, #4]
 8004b70:	6123      	str	r3, [r4, #16]
 8004b72:	2300      	movs	r3, #0
 8004b74:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b78:	e7aa      	b.n	8004ad0 <_printf_i+0x148>
 8004b7a:	6923      	ldr	r3, [r4, #16]
 8004b7c:	4632      	mov	r2, r6
 8004b7e:	4649      	mov	r1, r9
 8004b80:	4640      	mov	r0, r8
 8004b82:	47d0      	blx	sl
 8004b84:	3001      	adds	r0, #1
 8004b86:	d0ad      	beq.n	8004ae4 <_printf_i+0x15c>
 8004b88:	6823      	ldr	r3, [r4, #0]
 8004b8a:	079b      	lsls	r3, r3, #30
 8004b8c:	d413      	bmi.n	8004bb6 <_printf_i+0x22e>
 8004b8e:	68e0      	ldr	r0, [r4, #12]
 8004b90:	9b03      	ldr	r3, [sp, #12]
 8004b92:	4298      	cmp	r0, r3
 8004b94:	bfb8      	it	lt
 8004b96:	4618      	movlt	r0, r3
 8004b98:	e7a6      	b.n	8004ae8 <_printf_i+0x160>
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	4632      	mov	r2, r6
 8004b9e:	4649      	mov	r1, r9
 8004ba0:	4640      	mov	r0, r8
 8004ba2:	47d0      	blx	sl
 8004ba4:	3001      	adds	r0, #1
 8004ba6:	d09d      	beq.n	8004ae4 <_printf_i+0x15c>
 8004ba8:	3501      	adds	r5, #1
 8004baa:	68e3      	ldr	r3, [r4, #12]
 8004bac:	9903      	ldr	r1, [sp, #12]
 8004bae:	1a5b      	subs	r3, r3, r1
 8004bb0:	42ab      	cmp	r3, r5
 8004bb2:	dcf2      	bgt.n	8004b9a <_printf_i+0x212>
 8004bb4:	e7eb      	b.n	8004b8e <_printf_i+0x206>
 8004bb6:	2500      	movs	r5, #0
 8004bb8:	f104 0619 	add.w	r6, r4, #25
 8004bbc:	e7f5      	b.n	8004baa <_printf_i+0x222>
 8004bbe:	bf00      	nop
 8004bc0:	08004d94 	.word	0x08004d94
 8004bc4:	08004da5 	.word	0x08004da5

08004bc8 <memmove>:
 8004bc8:	4288      	cmp	r0, r1
 8004bca:	b510      	push	{r4, lr}
 8004bcc:	eb01 0402 	add.w	r4, r1, r2
 8004bd0:	d902      	bls.n	8004bd8 <memmove+0x10>
 8004bd2:	4284      	cmp	r4, r0
 8004bd4:	4623      	mov	r3, r4
 8004bd6:	d807      	bhi.n	8004be8 <memmove+0x20>
 8004bd8:	1e43      	subs	r3, r0, #1
 8004bda:	42a1      	cmp	r1, r4
 8004bdc:	d008      	beq.n	8004bf0 <memmove+0x28>
 8004bde:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004be2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004be6:	e7f8      	b.n	8004bda <memmove+0x12>
 8004be8:	4402      	add	r2, r0
 8004bea:	4601      	mov	r1, r0
 8004bec:	428a      	cmp	r2, r1
 8004bee:	d100      	bne.n	8004bf2 <memmove+0x2a>
 8004bf0:	bd10      	pop	{r4, pc}
 8004bf2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004bf6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004bfa:	e7f7      	b.n	8004bec <memmove+0x24>

08004bfc <_sbrk_r>:
 8004bfc:	b538      	push	{r3, r4, r5, lr}
 8004bfe:	4d06      	ldr	r5, [pc, #24]	@ (8004c18 <_sbrk_r+0x1c>)
 8004c00:	2300      	movs	r3, #0
 8004c02:	4604      	mov	r4, r0
 8004c04:	4608      	mov	r0, r1
 8004c06:	602b      	str	r3, [r5, #0]
 8004c08:	f7fc fa9a 	bl	8001140 <_sbrk>
 8004c0c:	1c43      	adds	r3, r0, #1
 8004c0e:	d102      	bne.n	8004c16 <_sbrk_r+0x1a>
 8004c10:	682b      	ldr	r3, [r5, #0]
 8004c12:	b103      	cbz	r3, 8004c16 <_sbrk_r+0x1a>
 8004c14:	6023      	str	r3, [r4, #0]
 8004c16:	bd38      	pop	{r3, r4, r5, pc}
 8004c18:	200004d0 	.word	0x200004d0

08004c1c <_realloc_r>:
 8004c1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c20:	4680      	mov	r8, r0
 8004c22:	4615      	mov	r5, r2
 8004c24:	460c      	mov	r4, r1
 8004c26:	b921      	cbnz	r1, 8004c32 <_realloc_r+0x16>
 8004c28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c2c:	4611      	mov	r1, r2
 8004c2e:	f7ff bc59 	b.w	80044e4 <_malloc_r>
 8004c32:	b92a      	cbnz	r2, 8004c40 <_realloc_r+0x24>
 8004c34:	f7ff fbea 	bl	800440c <_free_r>
 8004c38:	2400      	movs	r4, #0
 8004c3a:	4620      	mov	r0, r4
 8004c3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c40:	f000 f81a 	bl	8004c78 <_malloc_usable_size_r>
 8004c44:	4285      	cmp	r5, r0
 8004c46:	4606      	mov	r6, r0
 8004c48:	d802      	bhi.n	8004c50 <_realloc_r+0x34>
 8004c4a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004c4e:	d8f4      	bhi.n	8004c3a <_realloc_r+0x1e>
 8004c50:	4629      	mov	r1, r5
 8004c52:	4640      	mov	r0, r8
 8004c54:	f7ff fc46 	bl	80044e4 <_malloc_r>
 8004c58:	4607      	mov	r7, r0
 8004c5a:	2800      	cmp	r0, #0
 8004c5c:	d0ec      	beq.n	8004c38 <_realloc_r+0x1c>
 8004c5e:	42b5      	cmp	r5, r6
 8004c60:	462a      	mov	r2, r5
 8004c62:	4621      	mov	r1, r4
 8004c64:	bf28      	it	cs
 8004c66:	4632      	movcs	r2, r6
 8004c68:	f7ff fbc2 	bl	80043f0 <memcpy>
 8004c6c:	4621      	mov	r1, r4
 8004c6e:	4640      	mov	r0, r8
 8004c70:	f7ff fbcc 	bl	800440c <_free_r>
 8004c74:	463c      	mov	r4, r7
 8004c76:	e7e0      	b.n	8004c3a <_realloc_r+0x1e>

08004c78 <_malloc_usable_size_r>:
 8004c78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c7c:	1f18      	subs	r0, r3, #4
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	bfbc      	itt	lt
 8004c82:	580b      	ldrlt	r3, [r1, r0]
 8004c84:	18c0      	addlt	r0, r0, r3
 8004c86:	4770      	bx	lr

08004c88 <_init>:
 8004c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c8a:	bf00      	nop
 8004c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c8e:	bc08      	pop	{r3}
 8004c90:	469e      	mov	lr, r3
 8004c92:	4770      	bx	lr

08004c94 <_fini>:
 8004c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c96:	bf00      	nop
 8004c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c9a:	bc08      	pop	{r3}
 8004c9c:	469e      	mov	lr, r3
 8004c9e:	4770      	bx	lr
